
F407_IoT_Shield_Diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e40  08010020  08010020  00011020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e60  08010e60  000121ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010e60  08010e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e68  08010e68  000121ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e68  08010e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e6c  08010e6c  00011e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08010e70  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121ec  2**0
                  CONTENTS
 10 .bss          00003be4  200001ec  200001ec  000121ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003dd0  20003dd0  000121ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef8e  00000000  00000000  0001221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044fa  00000000  00000000  000311aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc8  00000000  00000000  000356a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c4  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265cf  00000000  00000000  00038834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240e0  00000000  00000000  0005ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4be3  00000000  00000000  00082ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00167ac6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aec  00000000  00000000  00167b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  001705f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010008 	.word	0x08010008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08010008 	.word	0x08010008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <w25qxx_init>:
static void w25qxx_select(void);
static void w25qxx_deselect(void);
static w25qxx_status_t w25qxx_send_command(uint8_t cmd, uint32_t address, uint8_t *data, uint32_t length, bool is_write);

// Initialize W25QXX flash
w25qxx_status_t w25qxx_init(w25qxx_config_t *config) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if (!config || !config->hspi || config->flash_size == 0) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <w25qxx_init+0x1e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <w25qxx_init+0x1e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <w25qxx_init+0x22>
        return W25QXX_INVALID_PARAM;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e03c      	b.n	8001050 <w25qxx_init+0x9c>
    }

    w25qxx_config = config;
 8000fd6:	4a20      	ldr	r2, [pc, #128]	@ (8001058 <w25qxx_init+0xa4>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]
    w25qxx_initialized = false;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <w25qxx_init+0xa8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]

    // Initialize chip select pin
    FLASH_SELECT;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	481e      	ldr	r0, [pc, #120]	@ (8001060 <w25qxx_init+0xac>)
 8000fe8:	f004 f908 	bl	80051fc <HAL_GPIO_WritePin>

    // Send dummy clocks to stabilize SPI
    uint8_t dummy = DUMMY_BYTE;
 8000fec:	23ff      	movs	r3, #255	@ 0xff
 8000fee:	73bb      	strb	r3, [r7, #14]
    w25qxx_deselect();
 8000ff0:	f000 f9c6 	bl	8001380 <w25qxx_deselect>
    for (uint8_t i = 0; i < 10; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e011      	b.n	800101e <w25qxx_init+0x6a>
        if (HAL_SPI_Transmit(w25qxx_config->hspi, &dummy, 1, W25QXX_TIMEOUT_MS) != HAL_OK) {
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <w25qxx_init+0xa4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	f107 010e 	add.w	r1, r7, #14
 8001004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001008:	2201      	movs	r2, #1
 800100a:	f005 fe82 	bl	8006d12 <HAL_SPI_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <w25qxx_init+0x64>
            return W25QXX_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e01b      	b.n	8001050 <w25qxx_init+0x9c>
    for (uint8_t i = 0; i < 10; i++) {
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	3301      	adds	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d9ea      	bls.n	8000ffa <w25qxx_init+0x46>
    }

    // Read JEDEC ID to verify communication
    uint8_t manufacturer_id;
    uint16_t device_id;
    if (w25qxx_read_id(&manufacturer_id, &device_id) != W25QXX_OK) {
 8001024:	f107 020a 	add.w	r2, r7, #10
 8001028:	f107 030d 	add.w	r3, r7, #13
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f818 	bl	8001064 <w25qxx_read_id>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <w25qxx_init+0x8a>
        return W25QXX_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e008      	b.n	8001050 <w25qxx_init+0x9c>
    }

    // Verify manufacturer (Winbond = 0xEF)
    if (manufacturer_id != 0xEF) {
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	2bef      	cmp	r3, #239	@ 0xef
 8001042:	d001      	beq.n	8001048 <w25qxx_init+0x94>
        return W25QXX_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e003      	b.n	8001050 <w25qxx_init+0x9c>
    }

    w25qxx_initialized = true;
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <w25qxx_init+0xa8>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
    return W25QXX_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000208 	.word	0x20000208
 800105c:	2000020c 	.word	0x2000020c
 8001060:	40020400 	.word	0x40020400

08001064 <w25qxx_read_id>:

// Read JEDEC ID
w25qxx_status_t w25qxx_read_id(uint8_t *manufacturer_id, uint16_t *device_id) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    if (!manufacturer_id || !device_id) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <w25qxx_read_id+0x16>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <w25qxx_read_id+0x1a>
        return W25QXX_INVALID_PARAM;
 800107a:	2304      	movs	r3, #4
 800107c:	e032      	b.n	80010e4 <w25qxx_read_id+0x80>
    }

    uint8_t cmd = CMD_JEDEC_ID;
 800107e:	239f      	movs	r3, #159	@ 0x9f
 8001080:	73fb      	strb	r3, [r7, #15]
    uint8_t response[3];
    w25qxx_select();
 8001082:	f000 f96f 	bl	8001364 <w25qxx_select>
    if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK ||
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <w25qxx_read_id+0x88>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f107 010f 	add.w	r1, r7, #15
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	2201      	movs	r2, #1
 8001096:	f005 fe3c 	bl	8006d12 <HAL_SPI_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10c      	bne.n	80010ba <w25qxx_read_id+0x56>
        HAL_SPI_Receive(w25qxx_config->hspi, response, 3, W25QXX_TIMEOUT_MS) != HAL_OK) {
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <w25qxx_read_id+0x88>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	2203      	movs	r2, #3
 80010b0:	f005 ff73 	bl	8006f9a <HAL_SPI_Receive>
 80010b4:	4603      	mov	r3, r0
    if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK ||
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <w25qxx_read_id+0x5e>
        w25qxx_deselect();
 80010ba:	f000 f961 	bl	8001380 <w25qxx_deselect>
        return W25QXX_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e010      	b.n	80010e4 <w25qxx_read_id+0x80>
    }
    w25qxx_deselect();
 80010c2:	f000 f95d 	bl	8001380 <w25qxx_deselect>

    *manufacturer_id = response[0];
 80010c6:	7b3a      	ldrb	r2, [r7, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	701a      	strb	r2, [r3, #0]
    *device_id = (response[1] << 8) | response[2];
 80010cc:	7b7b      	ldrb	r3, [r7, #13]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b29a      	uxth	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	801a      	strh	r2, [r3, #0]
    return W25QXX_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000208 	.word	0x20000208

080010f0 <w25qxx_read_data>:

// Read data from specified address
w25qxx_status_t w25qxx_read_data(uint32_t address, uint8_t *buffer, uint32_t length) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
    if (!w25qxx_initialized || !buffer || address >= w25qxx_config->flash_size) {
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <w25qxx_read_data+0x4c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f083 0301 	eor.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d108      	bne.n	800111e <w25qxx_read_data+0x2e>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <w25qxx_read_data+0x2e>
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <w25qxx_read_data+0x50>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d301      	bcc.n	8001122 <w25qxx_read_data+0x32>
        return W25QXX_INVALID_PARAM;
 800111e:	2304      	movs	r3, #4
 8001120:	e008      	b.n	8001134 <w25qxx_read_data+0x44>
    }

    return w25qxx_send_command(CMD_READ_DATA, address, buffer, length, false);
 8001122:	2300      	movs	r3, #0
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	68f9      	ldr	r1, [r7, #12]
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f943 	bl	80013b8 <w25qxx_send_command>
 8001132:	4603      	mov	r3, r0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000020c 	.word	0x2000020c
 8001140:	20000208 	.word	0x20000208

08001144 <w25qxx_write_page>:

// Write data to a page
w25qxx_status_t w25qxx_write_page(uint32_t address, const uint8_t *buffer, uint32_t length) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
    if (!w25qxx_initialized || !buffer || address >= w25qxx_config->flash_size) {
 8001150:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <w25qxx_write_page+0xe0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d108      	bne.n	8001172 <w25qxx_write_page+0x2e>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <w25qxx_write_page+0x2e>
 8001166:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <w25qxx_write_page+0xe4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	429a      	cmp	r2, r3
 8001170:	d301      	bcc.n	8001176 <w25qxx_write_page+0x32>
        return W25QXX_INVALID_PARAM;
 8001172:	2304      	movs	r3, #4
 8001174:	e051      	b.n	800121a <w25qxx_write_page+0xd6>
    }

    if (length > W25QXX_PAGE_SIZE || (address % W25QXX_PAGE_SIZE) + length > W25QXX_PAGE_SIZE) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117c:	d806      	bhi.n	800118c <w25qxx_write_page+0x48>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800118a:	d901      	bls.n	8001190 <w25qxx_write_page+0x4c>
        return W25QXX_INVALID_PARAM; // Must not cross page boundary
 800118c:	2304      	movs	r3, #4
 800118e:	e044      	b.n	800121a <w25qxx_write_page+0xd6>
    }

    // Enable write
    uint8_t cmd = CMD_WRITE_ENABLE;
 8001190:	2306      	movs	r3, #6
 8001192:	75bb      	strb	r3, [r7, #22]
    w25qxx_select();
 8001194:	f000 f8e6 	bl	8001364 <w25qxx_select>
    if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK) {
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <w25qxx_write_page+0xe4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	f107 0116 	add.w	r1, r7, #22
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	2201      	movs	r2, #1
 80011a8:	f005 fdb3 	bl	8006d12 <HAL_SPI_Transmit>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <w25qxx_write_page+0x76>
        w25qxx_deselect();
 80011b2:	f000 f8e5 	bl	8001380 <w25qxx_deselect>
        return W25QXX_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e02f      	b.n	800121a <w25qxx_write_page+0xd6>
    }
    w25qxx_deselect();
 80011ba:	f000 f8e1 	bl	8001380 <w25qxx_deselect>

    // Write page
    w25qxx_status_t status = w25qxx_send_command(CMD_PAGE_PROGRAM, address, (uint8_t *)buffer, length, true);
 80011be:	2301      	movs	r3, #1
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 f8f5 	bl	80013b8 <w25qxx_send_command>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
    if (status != W25QXX_OK) {
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <w25qxx_write_page+0x98>
        return status;
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	e01e      	b.n	800121a <w25qxx_write_page+0xd6>
    }

    // Wait for write to complete
    if (w25qxx_wait_busy() != W25QXX_OK) {
 80011dc:	f000 f884 	bl	80012e8 <w25qxx_wait_busy>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <w25qxx_write_page+0xa6>
        return W25QXX_TIMEOUT;
 80011e6:	2302      	movs	r3, #2
 80011e8:	e017      	b.n	800121a <w25qxx_write_page+0xd6>
    }

    // Disable write
    cmd = CMD_WRITE_DISABLE;
 80011ea:	2304      	movs	r3, #4
 80011ec:	75bb      	strb	r3, [r7, #22]
    w25qxx_select();
 80011ee:	f000 f8b9 	bl	8001364 <w25qxx_select>
    if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK) {
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <w25qxx_write_page+0xe4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f107 0116 	add.w	r1, r7, #22
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	2201      	movs	r2, #1
 8001202:	f005 fd86 	bl	8006d12 <HAL_SPI_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <w25qxx_write_page+0xd0>
        w25qxx_deselect();
 800120c:	f000 f8b8 	bl	8001380 <w25qxx_deselect>
        return W25QXX_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e002      	b.n	800121a <w25qxx_write_page+0xd6>
    }
    w25qxx_deselect();
 8001214:	f000 f8b4 	bl	8001380 <w25qxx_deselect>

    return W25QXX_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000020c 	.word	0x2000020c
 8001228:	20000208 	.word	0x20000208

0800122c <w25qxx_erase_sector>:

// Erase a sector
w25qxx_status_t w25qxx_erase_sector(uint32_t sector_addr) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    if (!w25qxx_initialized || sector_addr >= w25qxx_config->flash_size) {
 8001234:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <w25qxx_erase_sector+0xb4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <w25qxx_erase_sector+0x24>
 8001244:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <w25qxx_erase_sector+0xb8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d301      	bcc.n	8001254 <w25qxx_erase_sector+0x28>
        return W25QXX_INVALID_PARAM;
 8001250:	2304      	movs	r3, #4
 8001252:	e040      	b.n	80012d6 <w25qxx_erase_sector+0xaa>
    }

    // Enable write
    uint8_t cmd = CMD_WRITE_ENABLE;
 8001254:	2306      	movs	r3, #6
 8001256:	73fb      	strb	r3, [r7, #15]
    w25qxx_select();
 8001258:	f000 f884 	bl	8001364 <w25qxx_select>
    if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK) {
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <w25qxx_erase_sector+0xb8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f107 010f 	add.w	r1, r7, #15
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	2201      	movs	r2, #1
 800126c:	f005 fd51 	bl	8006d12 <HAL_SPI_Transmit>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <w25qxx_erase_sector+0x52>
        w25qxx_deselect();
 8001276:	f000 f883 	bl	8001380 <w25qxx_deselect>
        return W25QXX_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e02b      	b.n	80012d6 <w25qxx_erase_sector+0xaa>
    }
    w25qxx_deselect();
 800127e:	f000 f87f 	bl	8001380 <w25qxx_deselect>

    // Send sector erase command
    uint8_t command[4] = {CMD_SECTOR_ERASE, (uint8_t)(sector_addr >> 16), (uint8_t)(sector_addr >> 8), (uint8_t)sector_addr};
 8001282:	2320      	movs	r3, #32
 8001284:	723b      	strb	r3, [r7, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	727b      	strb	r3, [r7, #9]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	b2db      	uxtb	r3, r3
 8001294:	72bb      	strb	r3, [r7, #10]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	72fb      	strb	r3, [r7, #11]
    w25qxx_select();
 800129c:	f000 f862 	bl	8001364 <w25qxx_select>
    if (HAL_SPI_Transmit(w25qxx_config->hspi, command, 4, W25QXX_TIMEOUT_MS) != HAL_OK) {
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <w25qxx_erase_sector+0xb8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	2204      	movs	r2, #4
 80012b0:	f005 fd2f 	bl	8006d12 <HAL_SPI_Transmit>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <w25qxx_erase_sector+0x96>
        w25qxx_deselect();
 80012ba:	f000 f861 	bl	8001380 <w25qxx_deselect>
        return W25QXX_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e009      	b.n	80012d6 <w25qxx_erase_sector+0xaa>
    }
    w25qxx_deselect();
 80012c2:	f000 f85d 	bl	8001380 <w25qxx_deselect>

    // Wait for erase to complete
    if (w25qxx_wait_busy() != W25QXX_OK) {
 80012c6:	f000 f80f 	bl	80012e8 <w25qxx_wait_busy>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <w25qxx_erase_sector+0xa8>
        return W25QXX_TIMEOUT;
 80012d0:	2302      	movs	r3, #2
 80012d2:	e000      	b.n	80012d6 <w25qxx_erase_sector+0xaa>
    }

    return W25QXX_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000020c 	.word	0x2000020c
 80012e4:	20000208 	.word	0x20000208

080012e8 <w25qxx_wait_busy>:
    w25qxx_initialized = false;
    w25qxx_config = NULL;
}

// Wait for flash to be ready
static w25qxx_status_t w25qxx_wait_busy(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_READ_STATUS_REG1;
 80012ee:	2305      	movs	r3, #5
 80012f0:	70fb      	strb	r3, [r7, #3]
    uint8_t status;
    uint32_t start_time = HAL_GetTick();
 80012f2:	f002 f9b1 	bl	8003658 <HAL_GetTick>
 80012f6:	6078      	str	r0, [r7, #4]

    do {
        w25qxx_select();
 80012f8:	f000 f834 	bl	8001364 <w25qxx_select>
        if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK ||
 80012fc:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <w25qxx_wait_busy+0x78>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	1cf9      	adds	r1, r7, #3
 8001304:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001308:	2201      	movs	r2, #1
 800130a:	f005 fd02 	bl	8006d12 <HAL_SPI_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10b      	bne.n	800132c <w25qxx_wait_busy+0x44>
            HAL_SPI_Receive(w25qxx_config->hspi, &status, 1, W25QXX_TIMEOUT_MS) != HAL_OK) {
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <w25qxx_wait_busy+0x78>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	1cb9      	adds	r1, r7, #2
 800131c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001320:	2201      	movs	r2, #1
 8001322:	f005 fe3a 	bl	8006f9a <HAL_SPI_Receive>
 8001326:	4603      	mov	r3, r0
        if (HAL_SPI_Transmit(w25qxx_config->hspi, &cmd, 1, W25QXX_TIMEOUT_MS) != HAL_OK ||
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <w25qxx_wait_busy+0x4c>
            w25qxx_deselect();
 800132c:	f000 f828 	bl	8001380 <w25qxx_deselect>
            return W25QXX_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e011      	b.n	8001358 <w25qxx_wait_busy+0x70>
        }
        w25qxx_deselect();
 8001334:	f000 f824 	bl	8001380 <w25qxx_deselect>
        if (HAL_GetTick() - start_time > W25QXX_TIMEOUT_MS) {
 8001338:	f002 f98e 	bl	8003658 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001346:	d901      	bls.n	800134c <w25qxx_wait_busy+0x64>
            return W25QXX_TIMEOUT;
 8001348:	2302      	movs	r3, #2
 800134a:	e005      	b.n	8001358 <w25qxx_wait_busy+0x70>
        }
    } while (status & 0x01); // Busy bit
 800134c:	78bb      	ldrb	r3, [r7, #2]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1d0      	bne.n	80012f8 <w25qxx_wait_busy+0x10>

    return W25QXX_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000208 	.word	0x20000208

08001364 <w25qxx_select>:

// Select flash chip
static void w25qxx_select(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
    FLASH_DESELECT; // Active-low CS
 8001368:	2200      	movs	r2, #0
 800136a:	2102      	movs	r1, #2
 800136c:	4803      	ldr	r0, [pc, #12]	@ (800137c <w25qxx_select+0x18>)
 800136e:	f003 ff45 	bl	80051fc <HAL_GPIO_WritePin>
    HAL_Delay(1); // Small delay for stability
 8001372:	2001      	movs	r0, #1
 8001374:	f002 f97c 	bl	8003670 <HAL_Delay>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020400 	.word	0x40020400

08001380 <w25qxx_deselect>:

// Deselect flash chip
static void w25qxx_deselect(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
    FLASH_SELECT; // Set CS high
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	4809      	ldr	r0, [pc, #36]	@ (80013b0 <w25qxx_deselect+0x30>)
 800138c:	f003 ff36 	bl	80051fc <HAL_GPIO_WritePin>
    uint8_t dummy = DUMMY_BYTE;
 8001390:	23ff      	movs	r3, #255	@ 0xff
 8001392:	71fb      	strb	r3, [r7, #7]
    if (HAL_SPI_Transmit(w25qxx_config->hspi, &dummy, 1, W25QXX_TIMEOUT_MS) != HAL_OK) {
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <w25qxx_deselect+0x34>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	1df9      	adds	r1, r7, #7
 800139c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a0:	2201      	movs	r2, #1
 80013a2:	f005 fcb6 	bl	8006d12 <HAL_SPI_Transmit>
        // Ignore error for dummy byte
    }
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40020400 	.word	0x40020400
 80013b4:	20000208 	.word	0x20000208

080013b8 <w25qxx_send_command>:

// Send command with address and data (polling-based)
static w25qxx_status_t w25qxx_send_command(uint8_t cmd, uint32_t address, uint8_t *data, uint32_t length, bool is_write) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
    uint8_t command[4] = {cmd, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	753b      	strb	r3, [r7, #20]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	757b      	strb	r3, [r7, #21]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	75bb      	strb	r3, [r7, #22]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]
    w25qxx_select();
 80013e2:	f7ff ffbf 	bl	8001364 <w25qxx_select>

    // Send command and address
    if (HAL_SPI_Transmit(w25qxx_config->hspi, command, 4, W25QXX_TIMEOUT_MS) != HAL_OK) {
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <w25qxx_send_command+0xac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f107 0114 	add.w	r1, r7, #20
 80013f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f4:	2204      	movs	r2, #4
 80013f6:	f005 fc8c 	bl	8006d12 <HAL_SPI_Transmit>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <w25qxx_send_command+0x50>
        w25qxx_deselect();
 8001400:	f7ff ffbe 	bl	8001380 <w25qxx_deselect>
        return W25QXX_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e028      	b.n	800145a <w25qxx_send_command+0xa2>
    }

    // Perform data transfer
    if (is_write) {
 8001408:	f897 3020 	ldrb.w	r3, [r7, #32]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <w25qxx_send_command+0x7a>
        if (HAL_SPI_Transmit(w25qxx_config->hspi, data, length, W25QXX_TIMEOUT_MS) != HAL_OK) {
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <w25qxx_send_command+0xac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b29a      	uxth	r2, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f005 fc77 	bl	8006d12 <HAL_SPI_Transmit>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <w25qxx_send_command+0x9c>
            w25qxx_deselect();
 800142a:	f7ff ffa9 	bl	8001380 <w25qxx_deselect>
            return W25QXX_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e013      	b.n	800145a <w25qxx_send_command+0xa2>
        }
    } else {
        if (HAL_SPI_Receive(w25qxx_config->hspi, data, length, W25QXX_TIMEOUT_MS) != HAL_OK) {
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <w25qxx_send_command+0xac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	f005 fdaa 	bl	8006f9a <HAL_SPI_Receive>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <w25qxx_send_command+0x9c>
            w25qxx_deselect();
 800144c:	f7ff ff98 	bl	8001380 <w25qxx_deselect>
            return W25QXX_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e002      	b.n	800145a <w25qxx_send_command+0xa2>
        }
    }

    w25qxx_deselect();
 8001454:	f7ff ff94 	bl	8001380 <w25qxx_deselect>
    return W25QXX_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000208 	.word	0x20000208

08001468 <_write>:
void CAN_filter_config(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	b29a      	uxth	r2, r3
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <_write+0x28>)
 8001480:	f006 fd20 	bl	8007ec4 <HAL_UART_Transmit>
  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000032c 	.word	0x2000032c

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	f2ad 7d1c 	subw	sp, sp, #1820	@ 0x71c
 800149a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f002 f8a6 	bl	80035ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 fc64 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 fe10 	bl	80020c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a8:	f000 fdee 	bl	8002088 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014ac:	f000 fd98 	bl	8001fe0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014b0:	f000 fdc0 	bl	8002034 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80014b4:	f000 fd28 	bl	8001f08 <MX_SPI1_Init>
  MX_FATFS_Init();
 80014b8:	f007 ff64 	bl	8009384 <MX_FATFS_Init>
  MX_CAN1_Init();
 80014bc:	f000 fcc0 	bl	8001e40 <MX_CAN1_Init>
  MX_TIM7_Init();
 80014c0:	f000 fd58 	bl	8001f74 <MX_TIM7_Init>
  MX_I2C1_Init();
 80014c4:	f000 fcf2 	bl	8001eac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef TEST_ESP32_C6
  /* Step 1: Initialize the ESP32 Wi-Fi module */
  LogInfo(("Initializing Wi-Fi module..."));
 80014c8:	4aba      	ldr	r2, [pc, #744]	@ (80017b4 <main+0x320>)
 80014ca:	2391      	movs	r3, #145	@ 0x91
 80014cc:	49ba      	ldr	r1, [pc, #744]	@ (80017b8 <main+0x324>)
 80014ce:	48bb      	ldr	r0, [pc, #748]	@ (80017bc <main+0x328>)
 80014d0:	f00c fa40 	bl	800d954 <iprintf>
 80014d4:	48ba      	ldr	r0, [pc, #744]	@ (80017c0 <main+0x32c>)
 80014d6:	f00c fa3d 	bl	800d954 <iprintf>
 80014da:	48ba      	ldr	r0, [pc, #744]	@ (80017c4 <main+0x330>)
 80014dc:	f00c faa2 	bl	800da24 <puts>
  if (esp32_init() != ESP32_OK) {
 80014e0:	f007 ffc0 	bl	8009464 <esp32_init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00f      	beq.n	800150a <main+0x76>
    LogError(("Failed to initialize Wi-Fi module."));
 80014ea:	4ab2      	ldr	r2, [pc, #712]	@ (80017b4 <main+0x320>)
 80014ec:	2393      	movs	r3, #147	@ 0x93
 80014ee:	49b2      	ldr	r1, [pc, #712]	@ (80017b8 <main+0x324>)
 80014f0:	48b5      	ldr	r0, [pc, #724]	@ (80017c8 <main+0x334>)
 80014f2:	f00c fa2f 	bl	800d954 <iprintf>
 80014f6:	48b5      	ldr	r0, [pc, #724]	@ (80017cc <main+0x338>)
 80014f8:	f00c fa2c 	bl	800d954 <iprintf>
 80014fc:	48b1      	ldr	r0, [pc, #708]	@ (80017c4 <main+0x330>)
 80014fe:	f00c fa91 	bl	800da24 <puts>
    esp32_test_passed = false;
 8001502:	4bb3      	ldr	r3, [pc, #716]	@ (80017d0 <main+0x33c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e0a9      	b.n	800165e <main+0x1ca>
  } else {
    LogInfo(("Wi-Fi module initialized successfully.\n"));
 800150a:	4aaa      	ldr	r2, [pc, #680]	@ (80017b4 <main+0x320>)
 800150c:	2396      	movs	r3, #150	@ 0x96
 800150e:	49aa      	ldr	r1, [pc, #680]	@ (80017b8 <main+0x324>)
 8001510:	48aa      	ldr	r0, [pc, #680]	@ (80017bc <main+0x328>)
 8001512:	f00c fa1f 	bl	800d954 <iprintf>
 8001516:	48af      	ldr	r0, [pc, #700]	@ (80017d4 <main+0x340>)
 8001518:	f00c fa84 	bl	800da24 <puts>
 800151c:	48a9      	ldr	r0, [pc, #676]	@ (80017c4 <main+0x330>)
 800151e:	f00c fa81 	bl	800da24 <puts>

    /* Step 2: Connect to Wi-Fi network */
    LogInfo(("Joining Access Point: '%s' ...", WIFI_SSID));
 8001522:	4aa4      	ldr	r2, [pc, #656]	@ (80017b4 <main+0x320>)
 8001524:	2399      	movs	r3, #153	@ 0x99
 8001526:	49a4      	ldr	r1, [pc, #656]	@ (80017b8 <main+0x324>)
 8001528:	48a4      	ldr	r0, [pc, #656]	@ (80017bc <main+0x328>)
 800152a:	f00c fa13 	bl	800d954 <iprintf>
 800152e:	49aa      	ldr	r1, [pc, #680]	@ (80017d8 <main+0x344>)
 8001530:	48aa      	ldr	r0, [pc, #680]	@ (80017dc <main+0x348>)
 8001532:	f00c fa0f 	bl	800d954 <iprintf>
 8001536:	48a3      	ldr	r0, [pc, #652]	@ (80017c4 <main+0x330>)
 8001538:	f00c fa74 	bl	800da24 <puts>
    while (esp32_join_ap((uint8_t *)WIFI_SSID, (uint8_t *)WIFI_PASSWORD) != ESP32_OK) {
 800153c:	e00c      	b.n	8001558 <main+0xc4>
      LogInfo(("Retrying to join Access Point: %s", WIFI_SSID));
 800153e:	4a9d      	ldr	r2, [pc, #628]	@ (80017b4 <main+0x320>)
 8001540:	239b      	movs	r3, #155	@ 0x9b
 8001542:	499d      	ldr	r1, [pc, #628]	@ (80017b8 <main+0x324>)
 8001544:	489d      	ldr	r0, [pc, #628]	@ (80017bc <main+0x328>)
 8001546:	f00c fa05 	bl	800d954 <iprintf>
 800154a:	49a3      	ldr	r1, [pc, #652]	@ (80017d8 <main+0x344>)
 800154c:	48a4      	ldr	r0, [pc, #656]	@ (80017e0 <main+0x34c>)
 800154e:	f00c fa01 	bl	800d954 <iprintf>
 8001552:	489c      	ldr	r0, [pc, #624]	@ (80017c4 <main+0x330>)
 8001554:	f00c fa66 	bl	800da24 <puts>
    while (esp32_join_ap((uint8_t *)WIFI_SSID, (uint8_t *)WIFI_PASSWORD) != ESP32_OK) {
 8001558:	49a2      	ldr	r1, [pc, #648]	@ (80017e4 <main+0x350>)
 800155a:	489f      	ldr	r0, [pc, #636]	@ (80017d8 <main+0x344>)
 800155c:	f007 ffd0 	bl	8009500 <esp32_join_ap>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1eb      	bne.n	800153e <main+0xaa>
    }
    LogInfo(("Successfully joined Access Point: %s", WIFI_SSID));
 8001566:	4a93      	ldr	r2, [pc, #588]	@ (80017b4 <main+0x320>)
 8001568:	239d      	movs	r3, #157	@ 0x9d
 800156a:	4993      	ldr	r1, [pc, #588]	@ (80017b8 <main+0x324>)
 800156c:	4893      	ldr	r0, [pc, #588]	@ (80017bc <main+0x328>)
 800156e:	f00c f9f1 	bl	800d954 <iprintf>
 8001572:	4999      	ldr	r1, [pc, #612]	@ (80017d8 <main+0x344>)
 8001574:	489c      	ldr	r0, [pc, #624]	@ (80017e8 <main+0x354>)
 8001576:	f00c f9ed 	bl	800d954 <iprintf>
 800157a:	4892      	ldr	r0, [pc, #584]	@ (80017c4 <main+0x330>)
 800157c:	f00c fa52 	bl	800da24 <puts>

    /* Step 3: Configure SNTP for time synchronization */
    if (esp32_config_sntp(UTC_OFFSET) != ESP32_OK) {
 8001580:	f240 2012 	movw	r0, #530	@ 0x212
 8001584:	f007 ffe8 	bl	8009558 <esp32_config_sntp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00f      	beq.n	80015ae <main+0x11a>
      LogError(("Failed to configure SNTP."));
 800158e:	4a89      	ldr	r2, [pc, #548]	@ (80017b4 <main+0x320>)
 8001590:	23a1      	movs	r3, #161	@ 0xa1
 8001592:	4989      	ldr	r1, [pc, #548]	@ (80017b8 <main+0x324>)
 8001594:	488c      	ldr	r0, [pc, #560]	@ (80017c8 <main+0x334>)
 8001596:	f00c f9dd 	bl	800d954 <iprintf>
 800159a:	4894      	ldr	r0, [pc, #592]	@ (80017ec <main+0x358>)
 800159c:	f00c f9da 	bl	800d954 <iprintf>
 80015a0:	4888      	ldr	r0, [pc, #544]	@ (80017c4 <main+0x330>)
 80015a2:	f00c fa3f 	bl	800da24 <puts>
      esp32_test_passed = false;
 80015a6:	4b8a      	ldr	r3, [pc, #552]	@ (80017d0 <main+0x33c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	e057      	b.n	800165e <main+0x1ca>
    } else {
      LogInfo(("SNTP configured !"));
 80015ae:	4a81      	ldr	r2, [pc, #516]	@ (80017b4 <main+0x320>)
 80015b0:	23a4      	movs	r3, #164	@ 0xa4
 80015b2:	4981      	ldr	r1, [pc, #516]	@ (80017b8 <main+0x324>)
 80015b4:	4881      	ldr	r0, [pc, #516]	@ (80017bc <main+0x328>)
 80015b6:	f00c f9cd 	bl	800d954 <iprintf>
 80015ba:	488d      	ldr	r0, [pc, #564]	@ (80017f0 <main+0x35c>)
 80015bc:	f00c f9ca 	bl	800d954 <iprintf>
 80015c0:	4880      	ldr	r0, [pc, #512]	@ (80017c4 <main+0x330>)
 80015c2:	f00c fa2f 	bl	800da24 <puts>

      /* Retrieve the current time from SNTP */
      sntp_time_t sntp_time;
      if (esp32_get_sntp_time(&sntp_time) != ESP32_OK) {
 80015c6:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fff8 	bl	80095c0 <esp32_get_sntp_time>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00f      	beq.n	80015f6 <main+0x162>
        LogError(("Failed to retrieve current time from SNTP."));
 80015d6:	4a77      	ldr	r2, [pc, #476]	@ (80017b4 <main+0x320>)
 80015d8:	23a9      	movs	r3, #169	@ 0xa9
 80015da:	4977      	ldr	r1, [pc, #476]	@ (80017b8 <main+0x324>)
 80015dc:	487a      	ldr	r0, [pc, #488]	@ (80017c8 <main+0x334>)
 80015de:	f00c f9b9 	bl	800d954 <iprintf>
 80015e2:	4884      	ldr	r0, [pc, #528]	@ (80017f4 <main+0x360>)
 80015e4:	f00c f9b6 	bl	800d954 <iprintf>
 80015e8:	4876      	ldr	r0, [pc, #472]	@ (80017c4 <main+0x330>)
 80015ea:	f00c fa1b 	bl	800da24 <puts>
        esp32_test_passed = false;
 80015ee:	4b78      	ldr	r3, [pc, #480]	@ (80017d0 <main+0x33c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	e033      	b.n	800165e <main+0x1ca>
      } else {
        LogInfo(("SNTP time retrieved: %s, %02d %s %04d %02d:%02d:%02d",
 80015f6:	4a6f      	ldr	r2, [pc, #444]	@ (80017b4 <main+0x320>)
 80015f8:	23ac      	movs	r3, #172	@ 0xac
 80015fa:	496f      	ldr	r1, [pc, #444]	@ (80017b8 <main+0x324>)
 80015fc:	486f      	ldr	r0, [pc, #444]	@ (80017bc <main+0x328>)
 80015fe:	f00c f9a9 	bl	800d954 <iprintf>
 8001602:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8001606:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800160a:	689d      	ldr	r5, [r3, #8]
 800160c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8001610:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f507 62e1 	add.w	r2, r7, #1800	@ 0x708
 800161a:	f2a2 42fc 	subw	r2, r2, #1276	@ 0x4fc
 800161e:	6912      	ldr	r2, [r2, #16]
 8001620:	f507 61e1 	add.w	r1, r7, #1800	@ 0x708
 8001624:	f2a1 41fc 	subw	r1, r1, #1276	@ 0x4fc
 8001628:	6949      	ldr	r1, [r1, #20]
 800162a:	f507 60e1 	add.w	r0, r7, #1800	@ 0x708
 800162e:	f2a0 40fc 	subw	r0, r0, #1276	@ 0x4fc
 8001632:	6980      	ldr	r0, [r0, #24]
 8001634:	f507 7403 	add.w	r4, r7, #524	@ 0x20c
 8001638:	1d26      	adds	r6, r4, #4
 800163a:	f507 7403 	add.w	r4, r7, #524	@ 0x20c
 800163e:	9003      	str	r0, [sp, #12]
 8001640:	9102      	str	r1, [sp, #8]
 8001642:	9201      	str	r2, [sp, #4]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4633      	mov	r3, r6
 8001648:	462a      	mov	r2, r5
 800164a:	4621      	mov	r1, r4
 800164c:	486a      	ldr	r0, [pc, #424]	@ (80017f8 <main+0x364>)
 800164e:	f00c f981 	bl	800d954 <iprintf>
 8001652:	485c      	ldr	r0, [pc, #368]	@ (80017c4 <main+0x330>)
 8001654:	f00c f9e6 	bl	800da24 <puts>
                 sntp_time.day, sntp_time.date, sntp_time.month, sntp_time.year,
                 sntp_time.hour, sntp_time.min, sntp_time.sec));
        esp32_test_passed = true;
 8001658:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <main+0x33c>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  LogInfo(("\r\n"));
 800165e:	4a55      	ldr	r2, [pc, #340]	@ (80017b4 <main+0x320>)
 8001660:	23b3      	movs	r3, #179	@ 0xb3
 8001662:	4955      	ldr	r1, [pc, #340]	@ (80017b8 <main+0x324>)
 8001664:	4855      	ldr	r0, [pc, #340]	@ (80017bc <main+0x328>)
 8001666:	f00c f975 	bl	800d954 <iprintf>
 800166a:	4856      	ldr	r0, [pc, #344]	@ (80017c4 <main+0x330>)
 800166c:	f00c f9da 	bl	800da24 <puts>
 8001670:	4854      	ldr	r0, [pc, #336]	@ (80017c4 <main+0x330>)
 8001672:	f00c f9d7 	bl	800da24 <puts>
  HAL_Delay(1000);
 8001676:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800167a:	f001 fff9 	bl	8003670 <HAL_Delay>
#endif

#ifdef TEST_HDC1080
  uint8_t humidity = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 36fb 	strb.w	r3, [r7, #1787]	@ 0x6fb
  float temperature = 0.0;
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	f207 62f4 	addw	r2, r7, #1780	@ 0x6f4
 800168c:	6013      	str	r3, [r2, #0]

  get_temperature_reading(&temperature);
 800168e:	f207 63f4 	addw	r3, r7, #1780	@ 0x6f4
 8001692:	4618      	mov	r0, r3
 8001694:	f008 f9f8 	bl	8009a88 <get_temperature_reading>
  get_humidity_reading(&humidity);
 8001698:	f207 63fb 	addw	r3, r7, #1787	@ 0x6fb
 800169c:	4618      	mov	r0, r3
 800169e:	f008 fa31 	bl	8009b04 <get_humidity_reading>
  if (temperature == 0.0 && humidity == 0) {
 80016a2:	f207 63f4 	addw	r3, r7, #1780	@ 0x6f4
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d113      	bne.n	80016dc <main+0x248>
 80016b4:	f897 36fb 	ldrb.w	r3, [r7, #1787]	@ 0x6fb
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <main+0x248>
    LogError(("Failed to read HDC1080 sensor."));
 80016bc:	4a3d      	ldr	r2, [pc, #244]	@ (80017b4 <main+0x320>)
 80016be:	23be      	movs	r3, #190	@ 0xbe
 80016c0:	493d      	ldr	r1, [pc, #244]	@ (80017b8 <main+0x324>)
 80016c2:	4841      	ldr	r0, [pc, #260]	@ (80017c8 <main+0x334>)
 80016c4:	f00c f946 	bl	800d954 <iprintf>
 80016c8:	484c      	ldr	r0, [pc, #304]	@ (80017fc <main+0x368>)
 80016ca:	f00c f943 	bl	800d954 <iprintf>
 80016ce:	483d      	ldr	r0, [pc, #244]	@ (80017c4 <main+0x330>)
 80016d0:	f00c f9a8 	bl	800da24 <puts>
    hdc1080_test_passed = false;
 80016d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001800 <main+0x36c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e019      	b.n	8001710 <main+0x27c>
  } else {
    LogDebug(("Sensor readings: Temperature: %.2fC, Humidity: %d %", temperature, humidity));
 80016dc:	4a35      	ldr	r2, [pc, #212]	@ (80017b4 <main+0x320>)
 80016de:	23c1      	movs	r3, #193	@ 0xc1
 80016e0:	4935      	ldr	r1, [pc, #212]	@ (80017b8 <main+0x324>)
 80016e2:	4848      	ldr	r0, [pc, #288]	@ (8001804 <main+0x370>)
 80016e4:	f00c f936 	bl	800d954 <iprintf>
 80016e8:	f207 63f4 	addw	r3, r7, #1780	@ 0x6f4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff2a 	bl	8000548 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	f897 16fb 	ldrb.w	r1, [r7, #1787]	@ 0x6fb
 80016fc:	9100      	str	r1, [sp, #0]
 80016fe:	4842      	ldr	r0, [pc, #264]	@ (8001808 <main+0x374>)
 8001700:	f00c f928 	bl	800d954 <iprintf>
 8001704:	482f      	ldr	r0, [pc, #188]	@ (80017c4 <main+0x330>)
 8001706:	f00c f98d 	bl	800da24 <puts>
    hdc1080_test_passed = true;
 800170a:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <main+0x36c>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
  }
  LogInfo(("\r\n"));
 8001710:	4a28      	ldr	r2, [pc, #160]	@ (80017b4 <main+0x320>)
 8001712:	23c4      	movs	r3, #196	@ 0xc4
 8001714:	4928      	ldr	r1, [pc, #160]	@ (80017b8 <main+0x324>)
 8001716:	4829      	ldr	r0, [pc, #164]	@ (80017bc <main+0x328>)
 8001718:	f00c f91c 	bl	800d954 <iprintf>
 800171c:	4829      	ldr	r0, [pc, #164]	@ (80017c4 <main+0x330>)
 800171e:	f00c f981 	bl	800da24 <puts>
 8001722:	4828      	ldr	r0, [pc, #160]	@ (80017c4 <main+0x330>)
 8001724:	f00c f97e 	bl	800da24 <puts>
  HAL_Delay(1000);
 8001728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800172c:	f001 ffa0 	bl	8003670 <HAL_Delay>
#endif

#ifdef TEST_NOR_FLASH
  w25qxx_config_t w25qxx_config = {
 8001730:	4a36      	ldr	r2, [pc, #216]	@ (800180c <main+0x378>)
 8001732:	f207 63ec 	addw	r3, r7, #1772	@ 0x6ec
 8001736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173a:	e883 0003 	stmia.w	r3, {r0, r1}
      .hspi = &hspi1,
      .flash_size = 4 * 1024 * 1024
  };

  // Initialize W25QXX
  if (w25qxx_init(&w25qxx_config) != W25QXX_OK) {
 800173e:	f207 63ec 	addw	r3, r7, #1772	@ 0x6ec
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fc36 	bl	8000fb4 <w25qxx_init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <main+0x2da>
    LogError(("Failed to initialize W25QXX NOR flash."));
 800174e:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <main+0x320>)
 8001750:	23d0      	movs	r3, #208	@ 0xd0
 8001752:	4919      	ldr	r1, [pc, #100]	@ (80017b8 <main+0x324>)
 8001754:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <main+0x334>)
 8001756:	f00c f8fd 	bl	800d954 <iprintf>
 800175a:	482d      	ldr	r0, [pc, #180]	@ (8001810 <main+0x37c>)
 800175c:	f00c f8fa 	bl	800d954 <iprintf>
 8001760:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <main+0x330>)
 8001762:	f00c f95f 	bl	800da24 <puts>
    nor_flash_test_passed = false;
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <main+0x380>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e0c3      	b.n	80018f6 <main+0x462>
  } else {
    // Read ID
    uint8_t manufacturer_id;
    uint16_t device_id;
    if (w25qxx_read_id(&manufacturer_id, &device_id) != W25QXX_OK || manufacturer_id != 0xEF) {
 800176e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001772:	f207 230b 	addw	r3, r7, #523	@ 0x20b
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fc73 	bl	8001064 <w25qxx_read_id>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d106      	bne.n	8001792 <main+0x2fe>
 8001784:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8001788:	f2a3 43fd 	subw	r3, r3, #1277	@ 0x4fd
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2bef      	cmp	r3, #239	@ 0xef
 8001790:	d044      	beq.n	800181c <main+0x388>
      LogError(("Failed to read W25QXX ID."));
 8001792:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <main+0x320>)
 8001794:	23d7      	movs	r3, #215	@ 0xd7
 8001796:	4908      	ldr	r1, [pc, #32]	@ (80017b8 <main+0x324>)
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <main+0x334>)
 800179a:	f00c f8db 	bl	800d954 <iprintf>
 800179e:	481e      	ldr	r0, [pc, #120]	@ (8001818 <main+0x384>)
 80017a0:	f00c f8d8 	bl	800d954 <iprintf>
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <main+0x330>)
 80017a6:	f00c f93d 	bl	800da24 <puts>
      nor_flash_test_passed = false;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <main+0x380>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e0a1      	b.n	80018f6 <main+0x462>
 80017b2:	bf00      	nop
 80017b4:	0801002c 	.word	0x0801002c
 80017b8:	08010034 	.word	0x08010034
 80017bc:	08010040 	.word	0x08010040
 80017c0:	08010058 	.word	0x08010058
 80017c4:	08010078 	.word	0x08010078
 80017c8:	0801007c 	.word	0x0801007c
 80017cc:	08010094 	.word	0x08010094
 80017d0:	2000041c 	.word	0x2000041c
 80017d4:	080100b8 	.word	0x080100b8
 80017d8:	080100e0 	.word	0x080100e0
 80017dc:	080100f4 	.word	0x080100f4
 80017e0:	08010114 	.word	0x08010114
 80017e4:	08010138 	.word	0x08010138
 80017e8:	08010144 	.word	0x08010144
 80017ec:	0801016c 	.word	0x0801016c
 80017f0:	08010188 	.word	0x08010188
 80017f4:	0801019c 	.word	0x0801019c
 80017f8:	080101c8 	.word	0x080101c8
 80017fc:	08010200 	.word	0x08010200
 8001800:	2000041d 	.word	0x2000041d
 8001804:	08010220 	.word	0x08010220
 8001808:	08010238 	.word	0x08010238
 800180c:	080104ec 	.word	0x080104ec
 8001810:	0801026c 	.word	0x0801026c
 8001814:	2000041e 	.word	0x2000041e
 8001818:	08010294 	.word	0x08010294
    } else {
      // Write data to page 0
      uint8_t write_data[256] = {0x12, 0x34};
 800181c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8001820:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001824:	f243 4212 	movw	r2, #13330	@ 0x3412
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	22fc      	movs	r2, #252	@ 0xfc
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f00c fa87 	bl	800dd44 <memset>
      uint8_t read_data[256] = {0};
 8001836:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800183a:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 800183e:	4618      	mov	r0, r3
 8001840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001844:	461a      	mov	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f00c fa7c 	bl	800dd44 <memset>
      if (w25qxx_erase_sector(0) != W25QXX_OK || w25qxx_write_page(0, write_data, sizeof(write_data)) != W25QXX_OK) {
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fced 	bl	800122c <w25qxx_erase_sector>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <main+0x3d8>
 8001858:	463b      	mov	r3, r7
 800185a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185e:	4619      	mov	r1, r3
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fc6f 	bl	8001144 <w25qxx_write_page>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00f      	beq.n	800188c <main+0x3f8>
        LogError(("Failed to write to W25QXX."));
 800186c:	4a99      	ldr	r2, [pc, #612]	@ (8001ad4 <main+0x640>)
 800186e:	23de      	movs	r3, #222	@ 0xde
 8001870:	4999      	ldr	r1, [pc, #612]	@ (8001ad8 <main+0x644>)
 8001872:	489a      	ldr	r0, [pc, #616]	@ (8001adc <main+0x648>)
 8001874:	f00c f86e 	bl	800d954 <iprintf>
 8001878:	4899      	ldr	r0, [pc, #612]	@ (8001ae0 <main+0x64c>)
 800187a:	f00c f86b 	bl	800d954 <iprintf>
 800187e:	4899      	ldr	r0, [pc, #612]	@ (8001ae4 <main+0x650>)
 8001880:	f00c f8d0 	bl	800da24 <puts>
        nor_flash_test_passed = false;
 8001884:	4b98      	ldr	r3, [pc, #608]	@ (8001ae8 <main+0x654>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e034      	b.n	80018f6 <main+0x462>
      } else if (w25qxx_read_data(0, read_data, sizeof(read_data)) != W25QXX_OK ||
 800188c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001894:	4619      	mov	r1, r3
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff fc2a 	bl	80010f0 <w25qxx_read_data>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10a      	bne.n	80018b8 <main+0x424>
                 memcmp(write_data, read_data, sizeof(write_data)) != 0) {
 80018a2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80018a6:	463b      	mov	r3, r7
 80018a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00c fa1f 	bl	800dcf0 <memcmp>
 80018b2:	4603      	mov	r3, r0
      } else if (w25qxx_read_data(0, read_data, sizeof(read_data)) != W25QXX_OK ||
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00f      	beq.n	80018d8 <main+0x444>
        LogError(("Failed to verify W25QXX data."));
 80018b8:	4a86      	ldr	r2, [pc, #536]	@ (8001ad4 <main+0x640>)
 80018ba:	23e2      	movs	r3, #226	@ 0xe2
 80018bc:	4986      	ldr	r1, [pc, #536]	@ (8001ad8 <main+0x644>)
 80018be:	4887      	ldr	r0, [pc, #540]	@ (8001adc <main+0x648>)
 80018c0:	f00c f848 	bl	800d954 <iprintf>
 80018c4:	4889      	ldr	r0, [pc, #548]	@ (8001aec <main+0x658>)
 80018c6:	f00c f845 	bl	800d954 <iprintf>
 80018ca:	4886      	ldr	r0, [pc, #536]	@ (8001ae4 <main+0x650>)
 80018cc:	f00c f8aa 	bl	800da24 <puts>
        nor_flash_test_passed = false;
 80018d0:	4b85      	ldr	r3, [pc, #532]	@ (8001ae8 <main+0x654>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e00e      	b.n	80018f6 <main+0x462>
      } else {
        LogInfo(("W25QXX NOR flash test passed."));
 80018d8:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad4 <main+0x640>)
 80018da:	23e5      	movs	r3, #229	@ 0xe5
 80018dc:	497e      	ldr	r1, [pc, #504]	@ (8001ad8 <main+0x644>)
 80018de:	4884      	ldr	r0, [pc, #528]	@ (8001af0 <main+0x65c>)
 80018e0:	f00c f838 	bl	800d954 <iprintf>
 80018e4:	4883      	ldr	r0, [pc, #524]	@ (8001af4 <main+0x660>)
 80018e6:	f00c f835 	bl	800d954 <iprintf>
 80018ea:	487e      	ldr	r0, [pc, #504]	@ (8001ae4 <main+0x650>)
 80018ec:	f00c f89a 	bl	800da24 <puts>
        nor_flash_test_passed = true;
 80018f0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae8 <main+0x654>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  LogInfo(("\r\n"));
 80018f6:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <main+0x640>)
 80018f8:	23ea      	movs	r3, #234	@ 0xea
 80018fa:	4977      	ldr	r1, [pc, #476]	@ (8001ad8 <main+0x644>)
 80018fc:	487c      	ldr	r0, [pc, #496]	@ (8001af0 <main+0x65c>)
 80018fe:	f00c f829 	bl	800d954 <iprintf>
 8001902:	4878      	ldr	r0, [pc, #480]	@ (8001ae4 <main+0x650>)
 8001904:	f00c f88e 	bl	800da24 <puts>
 8001908:	4876      	ldr	r0, [pc, #472]	@ (8001ae4 <main+0x650>)
 800190a:	f00c f88b 	bl	800da24 <puts>
  HAL_Delay(1000);
 800190e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001912:	f001 fead 	bl	8003670 <HAL_Delay>
  FRESULT     fres;
  char        buf[100];
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001916:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 800191a:	2201      	movs	r2, #1
 800191c:	4976      	ldr	r1, [pc, #472]	@ (8001af8 <main+0x664>)
 800191e:	4618      	mov	r0, r3
 8001920:	f00a f86a 	bl	800b9f8 <f_mount>
 8001924:	4603      	mov	r3, r0
 8001926:	f887 3707 	strb.w	r3, [r7, #1799]	@ 0x707
    if (fres != FR_OK)
 800192a:	f897 3707 	ldrb.w	r3, [r7, #1799]	@ 0x707
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00f      	beq.n	8001952 <main+0x4be>
    {
      LogError(("No SD Card found : (%i)\r\n", fres));
 8001932:	4a68      	ldr	r2, [pc, #416]	@ (8001ad4 <main+0x640>)
 8001934:	23f9      	movs	r3, #249	@ 0xf9
 8001936:	4968      	ldr	r1, [pc, #416]	@ (8001ad8 <main+0x644>)
 8001938:	4868      	ldr	r0, [pc, #416]	@ (8001adc <main+0x648>)
 800193a:	f00c f80b 	bl	800d954 <iprintf>
 800193e:	f897 3707 	ldrb.w	r3, [r7, #1799]	@ 0x707
 8001942:	4619      	mov	r1, r3
 8001944:	486d      	ldr	r0, [pc, #436]	@ (8001afc <main+0x668>)
 8001946:	f00c f805 	bl	800d954 <iprintf>
 800194a:	4866      	ldr	r0, [pc, #408]	@ (8001ae4 <main+0x650>)
 800194c:	f00c f86a 	bl	800da24 <puts>
      break;
 8001950:	e115      	b.n	8001b7e <main+0x6ea>
    }
    LogInfo(("SD Card Mounted Successfully!!!\r\n"));
 8001952:	4a60      	ldr	r2, [pc, #384]	@ (8001ad4 <main+0x640>)
 8001954:	23fc      	movs	r3, #252	@ 0xfc
 8001956:	4960      	ldr	r1, [pc, #384]	@ (8001ad8 <main+0x644>)
 8001958:	4865      	ldr	r0, [pc, #404]	@ (8001af0 <main+0x65c>)
 800195a:	f00b fffb 	bl	800d954 <iprintf>
 800195e:	4868      	ldr	r0, [pc, #416]	@ (8001b00 <main+0x66c>)
 8001960:	f00c f860 	bl	800da24 <puts>
 8001964:	485f      	ldr	r0, [pc, #380]	@ (8001ae4 <main+0x650>)
 8001966:	f00c f85d 	bl	800da24 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 800196a:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 800196e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001972:	4619      	mov	r1, r3
 8001974:	4860      	ldr	r0, [pc, #384]	@ (8001af8 <main+0x664>)
 8001976:	f00a fd9b 	bl	800c4b0 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800197a:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 800197e:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	3b02      	subs	r3, #2
 8001988:	f507 62e1 	add.w	r2, r7, #1800	@ 0x708
 800198c:	f2a2 5204 	subw	r2, r2, #1284	@ 0x504
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	8952      	ldrh	r2, [r2, #10]
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdb3 	bl	8000504 <__aeabi_ui2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <main+0x670>)
 80019a4:	f7fe fe28 	bl	80005f8 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f8fa 	bl	8000ba8 <__aeabi_d2uiz>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f8c7 3700 	str.w	r3, [r7, #1792]	@ 0x700
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80019ba:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80019be:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	895b      	ldrh	r3, [r3, #10]
 80019c6:	461a      	mov	r2, r3
 80019c8:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80019cc:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd94 	bl	8000504 <__aeabi_ui2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <main+0x670>)
 80019e2:	f7fe fe09 	bl	80005f8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8db 	bl	8000ba8 <__aeabi_d2uiz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
    LogInfo(("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace));
 80019f8:	4a36      	ldr	r2, [pc, #216]	@ (8001ad4 <main+0x640>)
 80019fa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80019fe:	4936      	ldr	r1, [pc, #216]	@ (8001ad8 <main+0x644>)
 8001a00:	483b      	ldr	r0, [pc, #236]	@ (8001af0 <main+0x65c>)
 8001a02:	f00b ffa7 	bl	800d954 <iprintf>
 8001a06:	f8d7 26fc 	ldr.w	r2, [r7, #1788]	@ 0x6fc
 8001a0a:	f8d7 1700 	ldr.w	r1, [r7, #1792]	@ 0x700
 8001a0e:	483e      	ldr	r0, [pc, #248]	@ (8001b08 <main+0x674>)
 8001a10:	f00b ffa0 	bl	800d954 <iprintf>
 8001a14:	4833      	ldr	r0, [pc, #204]	@ (8001ae4 <main+0x650>)
 8001a16:	f00c f805 	bl	800da24 <puts>
    //Open the file
    fres = f_open(&fil, "TEST.TXT", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001a1a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001a1e:	220b      	movs	r2, #11
 8001a20:	493a      	ldr	r1, [pc, #232]	@ (8001b0c <main+0x678>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00a f82e 	bl	800ba84 <f_open>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 3707 	strb.w	r3, [r7, #1799]	@ 0x707
    if(fres != FR_OK)
 8001a2e:	f897 3707 	ldrb.w	r3, [r7, #1799]	@ 0x707
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d013      	beq.n	8001a5e <main+0x5ca>
    {
      LogError(("File creation/open Error : (%i)\r\n", fres));
 8001a36:	4a27      	ldr	r2, [pc, #156]	@ (8001ad4 <main+0x640>)
 8001a38:	f240 1309 	movw	r3, #265	@ 0x109
 8001a3c:	4926      	ldr	r1, [pc, #152]	@ (8001ad8 <main+0x644>)
 8001a3e:	4827      	ldr	r0, [pc, #156]	@ (8001adc <main+0x648>)
 8001a40:	f00b ff88 	bl	800d954 <iprintf>
 8001a44:	f897 3707 	ldrb.w	r3, [r7, #1799]	@ 0x707
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	@ (8001b10 <main+0x67c>)
 8001a4c:	f00b ff82 	bl	800d954 <iprintf>
 8001a50:	4824      	ldr	r0, [pc, #144]	@ (8001ae4 <main+0x650>)
 8001a52:	f00b ffe7 	bl	800da24 <puts>
      sdcard_test_passed = false;
 8001a56:	4b2f      	ldr	r3, [pc, #188]	@ (8001b14 <main+0x680>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
      break;
 8001a5c:	e08f      	b.n	8001b7e <main+0x6ea>
    }
    LogInfo(("Writing data!!!\r\n"));
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad4 <main+0x640>)
 8001a60:	f240 130d 	movw	r3, #269	@ 0x10d
 8001a64:	491c      	ldr	r1, [pc, #112]	@ (8001ad8 <main+0x644>)
 8001a66:	4822      	ldr	r0, [pc, #136]	@ (8001af0 <main+0x65c>)
 8001a68:	f00b ff74 	bl	800d954 <iprintf>
 8001a6c:	482a      	ldr	r0, [pc, #168]	@ (8001b18 <main+0x684>)
 8001a6e:	f00b ffd9 	bl	800da24 <puts>
 8001a72:	481c      	ldr	r0, [pc, #112]	@ (8001ae4 <main+0x650>)
 8001a74:	f00b ffd6 	bl	800da24 <puts>
    //write the data
    f_puts("Welcome to fastbit embedded", &fil);
 8001a78:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4827      	ldr	r0, [pc, #156]	@ (8001b1c <main+0x688>)
 8001a80:	f00a fe80 	bl	800c784 <f_puts>
    //close your file
    f_close(&fil);
 8001a84:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00a fce7 	bl	800c45c <f_close>
    //Open the file
    fres = f_open(&fil, "TEST.TXT", FA_READ);
 8001a8e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001a92:	2201      	movs	r2, #1
 8001a94:	491d      	ldr	r1, [pc, #116]	@ (8001b0c <main+0x678>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f009 fff4 	bl	800ba84 <f_open>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f887 3707 	strb.w	r3, [r7, #1799]	@ 0x707
    if(fres != FR_OK)
 8001aa2:	f897 3707 	ldrb.w	r3, [r7, #1799]	@ 0x707
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03c      	beq.n	8001b24 <main+0x690>
    {
      LogError(("File opening Error : (%i)\r\n", fres));
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <main+0x640>)
 8001aac:	f44f 738b 	mov.w	r3, #278	@ 0x116
 8001ab0:	4909      	ldr	r1, [pc, #36]	@ (8001ad8 <main+0x644>)
 8001ab2:	480a      	ldr	r0, [pc, #40]	@ (8001adc <main+0x648>)
 8001ab4:	f00b ff4e 	bl	800d954 <iprintf>
 8001ab8:	f897 3707 	ldrb.w	r3, [r7, #1799]	@ 0x707
 8001abc:	4619      	mov	r1, r3
 8001abe:	4818      	ldr	r0, [pc, #96]	@ (8001b20 <main+0x68c>)
 8001ac0:	f00b ff48 	bl	800d954 <iprintf>
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <main+0x650>)
 8001ac6:	f00b ffad 	bl	800da24 <puts>
      sdcard_test_passed = false;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <main+0x680>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
      break;
 8001ad0:	e055      	b.n	8001b7e <main+0x6ea>
 8001ad2:	bf00      	nop
 8001ad4:	0801002c 	.word	0x0801002c
 8001ad8:	08010034 	.word	0x08010034
 8001adc:	0801007c 	.word	0x0801007c
 8001ae0:	080102b0 	.word	0x080102b0
 8001ae4:	08010078 	.word	0x08010078
 8001ae8:	2000041e 	.word	0x2000041e
 8001aec:	080102cc 	.word	0x080102cc
 8001af0:	08010040 	.word	0x08010040
 8001af4:	080102ec 	.word	0x080102ec
 8001af8:	0801030c 	.word	0x0801030c
 8001afc:	08010310 	.word	0x08010310
 8001b00:	0801032c 	.word	0x0801032c
 8001b04:	3fe00000 	.word	0x3fe00000
 8001b08:	08010350 	.word	0x08010350
 8001b0c:	08010380 	.word	0x08010380
 8001b10:	0801038c 	.word	0x0801038c
 8001b14:	2000041f 	.word	0x2000041f
 8001b18:	080103b0 	.word	0x080103b0
 8001b1c:	080103c4 	.word	0x080103c4
 8001b20:	080103e0 	.word	0x080103e0
    }
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001b24:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001b28:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8001b2c:	2164      	movs	r1, #100	@ 0x64
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00a fd73 	bl	800c61a <f_gets>
    LogInfo(("Read Data : %s\n", buf));
 8001b34:	4a76      	ldr	r2, [pc, #472]	@ (8001d10 <main+0x87c>)
 8001b36:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 8001b3a:	4976      	ldr	r1, [pc, #472]	@ (8001d14 <main+0x880>)
 8001b3c:	4876      	ldr	r0, [pc, #472]	@ (8001d18 <main+0x884>)
 8001b3e:	f00b ff09 	bl	800d954 <iprintf>
 8001b42:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8001b46:	4619      	mov	r1, r3
 8001b48:	4874      	ldr	r0, [pc, #464]	@ (8001d1c <main+0x888>)
 8001b4a:	f00b ff03 	bl	800d954 <iprintf>
 8001b4e:	4874      	ldr	r0, [pc, #464]	@ (8001d20 <main+0x88c>)
 8001b50:	f00b ff68 	bl	800da24 <puts>
    //close your file
    f_close(&fil);
 8001b54:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00a fc7f 	bl	800c45c <f_close>
    LogInfo(("Closing File!!!\r\n"));
 8001b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d10 <main+0x87c>)
 8001b60:	f240 131f 	movw	r3, #287	@ 0x11f
 8001b64:	496b      	ldr	r1, [pc, #428]	@ (8001d14 <main+0x880>)
 8001b66:	486c      	ldr	r0, [pc, #432]	@ (8001d18 <main+0x884>)
 8001b68:	f00b fef4 	bl	800d954 <iprintf>
 8001b6c:	486d      	ldr	r0, [pc, #436]	@ (8001d24 <main+0x890>)
 8001b6e:	f00b ff59 	bl	800da24 <puts>
 8001b72:	486b      	ldr	r0, [pc, #428]	@ (8001d20 <main+0x88c>)
 8001b74:	f00b ff56 	bl	800da24 <puts>

    sdcard_test_passed = true;
 8001b78:	4b6b      	ldr	r3, [pc, #428]	@ (8001d28 <main+0x894>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
    } while( false );
    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	496a      	ldr	r1, [pc, #424]	@ (8001d2c <main+0x898>)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f009 ff38 	bl	800b9f8 <f_mount>
    LogInfo(("SD Card Unmounted Successfully!!!\r\n"));
 8001b88:	4a61      	ldr	r2, [pc, #388]	@ (8001d10 <main+0x87c>)
 8001b8a:	f240 1325 	movw	r3, #293	@ 0x125
 8001b8e:	4961      	ldr	r1, [pc, #388]	@ (8001d14 <main+0x880>)
 8001b90:	4861      	ldr	r0, [pc, #388]	@ (8001d18 <main+0x884>)
 8001b92:	f00b fedf 	bl	800d954 <iprintf>
 8001b96:	4866      	ldr	r0, [pc, #408]	@ (8001d30 <main+0x89c>)
 8001b98:	f00b ff44 	bl	800da24 <puts>
 8001b9c:	4860      	ldr	r0, [pc, #384]	@ (8001d20 <main+0x88c>)
 8001b9e:	f00b ff41 	bl	800da24 <puts>

    LogInfo(("\r\n"));
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d10 <main+0x87c>)
 8001ba4:	f240 1327 	movw	r3, #295	@ 0x127
 8001ba8:	495a      	ldr	r1, [pc, #360]	@ (8001d14 <main+0x880>)
 8001baa:	485b      	ldr	r0, [pc, #364]	@ (8001d18 <main+0x884>)
 8001bac:	f00b fed2 	bl	800d954 <iprintf>
 8001bb0:	485b      	ldr	r0, [pc, #364]	@ (8001d20 <main+0x88c>)
 8001bb2:	f00b ff37 	bl	800da24 <puts>
 8001bb6:	485a      	ldr	r0, [pc, #360]	@ (8001d20 <main+0x88c>)
 8001bb8:	f00b ff34 	bl	800da24 <puts>
    HAL_Delay(1000);
 8001bbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc0:	f001 fd56 	bl	8003670 <HAL_Delay>

  LogInfo(("\r\n"));
#endif

#ifdef TEST_CAN_MOD
  CAN_filter_config();
 8001bc4:	f000 fb3c 	bl	8002240 <CAN_filter_config>

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 8001bc8:	f240 4103 	movw	r1, #1027	@ 0x403
 8001bcc:	4859      	ldr	r0, [pc, #356]	@ (8001d34 <main+0x8a0>)
 8001bce:	f002 f8b3 	bl	8003d38 <HAL_CAN_ActivateNotification>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <main+0x748>
  {
    Error_Handler();
 8001bd8:	f000 fbf4 	bl	80023c4 <Error_Handler>
  }

  if( HAL_CAN_Start(&hcan1) != HAL_OK)
 8001bdc:	4855      	ldr	r0, [pc, #340]	@ (8001d34 <main+0x8a0>)
 8001bde:	f001 ff45 	bl	8003a6c <HAL_CAN_Start>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <main+0x758>
  {
    Error_Handler();
 8001be8:	f000 fbec 	bl	80023c4 <Error_Handler>
  }


  LogInfo(("\r\n"));
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <main+0x87c>)
 8001bee:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8001bf2:	4948      	ldr	r1, [pc, #288]	@ (8001d14 <main+0x880>)
 8001bf4:	4848      	ldr	r0, [pc, #288]	@ (8001d18 <main+0x884>)
 8001bf6:	f00b fead 	bl	800d954 <iprintf>
 8001bfa:	4849      	ldr	r0, [pc, #292]	@ (8001d20 <main+0x88c>)
 8001bfc:	f00b ff12 	bl	800da24 <puts>
 8001c00:	4847      	ldr	r0, [pc, #284]	@ (8001d20 <main+0x88c>)
 8001c02:	f00b ff0f 	bl	800da24 <puts>
#endif
  /* Print test results */
  LogInfo(("=== Test Results ===\n"));
 8001c06:	4a42      	ldr	r2, [pc, #264]	@ (8001d10 <main+0x87c>)
 8001c08:	f240 1345 	movw	r3, #325	@ 0x145
 8001c0c:	4941      	ldr	r1, [pc, #260]	@ (8001d14 <main+0x880>)
 8001c0e:	4842      	ldr	r0, [pc, #264]	@ (8001d18 <main+0x884>)
 8001c10:	f00b fea0 	bl	800d954 <iprintf>
 8001c14:	4848      	ldr	r0, [pc, #288]	@ (8001d38 <main+0x8a4>)
 8001c16:	f00b ff05 	bl	800da24 <puts>
 8001c1a:	4841      	ldr	r0, [pc, #260]	@ (8001d20 <main+0x88c>)
 8001c1c:	f00b ff02 	bl	800da24 <puts>
#ifdef TEST_ESP32_C6
  LogInfo(("ESP32 C6: %s\n", esp32_test_passed ? GREEN_TXT("Success") : RED_TXT("Failure")));
 8001c20:	4a3b      	ldr	r2, [pc, #236]	@ (8001d10 <main+0x87c>)
 8001c22:	f240 1347 	movw	r3, #327	@ 0x147
 8001c26:	493b      	ldr	r1, [pc, #236]	@ (8001d14 <main+0x880>)
 8001c28:	483b      	ldr	r0, [pc, #236]	@ (8001d18 <main+0x884>)
 8001c2a:	f00b fe93 	bl	800d954 <iprintf>
 8001c2e:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <main+0x8a8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <main+0x7a6>
 8001c36:	4b42      	ldr	r3, [pc, #264]	@ (8001d40 <main+0x8ac>)
 8001c38:	e000      	b.n	8001c3c <main+0x7a8>
 8001c3a:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <main+0x8b0>)
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4842      	ldr	r0, [pc, #264]	@ (8001d48 <main+0x8b4>)
 8001c40:	f00b fe88 	bl	800d954 <iprintf>
 8001c44:	4836      	ldr	r0, [pc, #216]	@ (8001d20 <main+0x88c>)
 8001c46:	f00b feed 	bl	800da24 <puts>
#endif
#ifdef TEST_HDC1080
  LogInfo(("HDC1080 Sensor: %s\n", hdc1080_test_passed ? GREEN_TXT("Success") : RED_TXT("Failure")));
 8001c4a:	4a31      	ldr	r2, [pc, #196]	@ (8001d10 <main+0x87c>)
 8001c4c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001c50:	4930      	ldr	r1, [pc, #192]	@ (8001d14 <main+0x880>)
 8001c52:	4831      	ldr	r0, [pc, #196]	@ (8001d18 <main+0x884>)
 8001c54:	f00b fe7e 	bl	800d954 <iprintf>
 8001c58:	4b3c      	ldr	r3, [pc, #240]	@ (8001d4c <main+0x8b8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <main+0x7d0>
 8001c60:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <main+0x8ac>)
 8001c62:	e000      	b.n	8001c66 <main+0x7d2>
 8001c64:	4b37      	ldr	r3, [pc, #220]	@ (8001d44 <main+0x8b0>)
 8001c66:	4619      	mov	r1, r3
 8001c68:	4839      	ldr	r0, [pc, #228]	@ (8001d50 <main+0x8bc>)
 8001c6a:	f00b fe73 	bl	800d954 <iprintf>
 8001c6e:	482c      	ldr	r0, [pc, #176]	@ (8001d20 <main+0x88c>)
 8001c70:	f00b fed8 	bl	800da24 <puts>
#endif
#ifdef TEST_NOR_FLASH
  LogInfo(("NOR Flash: %s\n", nor_flash_test_passed ? GREEN_TXT("Success") : RED_TXT("Failure")));
 8001c74:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <main+0x87c>)
 8001c76:	f240 134d 	movw	r3, #333	@ 0x14d
 8001c7a:	4926      	ldr	r1, [pc, #152]	@ (8001d14 <main+0x880>)
 8001c7c:	4826      	ldr	r0, [pc, #152]	@ (8001d18 <main+0x884>)
 8001c7e:	f00b fe69 	bl	800d954 <iprintf>
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <main+0x8c0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <main+0x7fa>
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <main+0x8ac>)
 8001c8c:	e000      	b.n	8001c90 <main+0x7fc>
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <main+0x8b0>)
 8001c90:	4619      	mov	r1, r3
 8001c92:	4831      	ldr	r0, [pc, #196]	@ (8001d58 <main+0x8c4>)
 8001c94:	f00b fe5e 	bl	800d954 <iprintf>
 8001c98:	4821      	ldr	r0, [pc, #132]	@ (8001d20 <main+0x88c>)
 8001c9a:	f00b fec3 	bl	800da24 <puts>
#endif
#ifdef TEST_SDCARD
  LogInfo(("SD Card: %s\n", sdcard_test_passed ? GREEN_TXT("Success") : RED_TXT("Failure")));
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <main+0x87c>)
 8001ca0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ca4:	491b      	ldr	r1, [pc, #108]	@ (8001d14 <main+0x880>)
 8001ca6:	481c      	ldr	r0, [pc, #112]	@ (8001d18 <main+0x884>)
 8001ca8:	f00b fe54 	bl	800d954 <iprintf>
 8001cac:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <main+0x894>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <main+0x824>
 8001cb4:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <main+0x8ac>)
 8001cb6:	e000      	b.n	8001cba <main+0x826>
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <main+0x8b0>)
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4827      	ldr	r0, [pc, #156]	@ (8001d5c <main+0x8c8>)
 8001cbe:	f00b fe49 	bl	800d954 <iprintf>
 8001cc2:	4817      	ldr	r0, [pc, #92]	@ (8001d20 <main+0x88c>)
 8001cc4:	f00b feae 	bl	800da24 <puts>
#endif
#ifdef TEST_TOUCH
  LogInfo(("Touch Controller: %s\n", touch_test_passed ? GREEN_TXT("Success") : RED_TXT("Failure")));
#endif
#ifdef TEST_CAN_MOD
  LogInfo(("CAN Module: %s\n", can_mod_test_passed ? GREEN_TXT("Success") : RED_TXT("Failure")));
 8001cc8:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <main+0x87c>)
 8001cca:	f240 1359 	movw	r3, #345	@ 0x159
 8001cce:	4911      	ldr	r1, [pc, #68]	@ (8001d14 <main+0x880>)
 8001cd0:	4811      	ldr	r0, [pc, #68]	@ (8001d18 <main+0x884>)
 8001cd2:	f00b fe3f 	bl	800d954 <iprintf>
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <main+0x8cc>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <main+0x84e>
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <main+0x8ac>)
 8001ce0:	e000      	b.n	8001ce4 <main+0x850>
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <main+0x8b0>)
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481f      	ldr	r0, [pc, #124]	@ (8001d64 <main+0x8d0>)
 8001ce8:	f00b fe34 	bl	800d954 <iprintf>
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <main+0x88c>)
 8001cee:	f00b fe99 	bl	800da24 <puts>
#endif
  LogInfo(("===================\n"));
 8001cf2:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <main+0x87c>)
 8001cf4:	f240 135b 	movw	r3, #347	@ 0x15b
 8001cf8:	4906      	ldr	r1, [pc, #24]	@ (8001d14 <main+0x880>)
 8001cfa:	4807      	ldr	r0, [pc, #28]	@ (8001d18 <main+0x884>)
 8001cfc:	f00b fe2a 	bl	800d954 <iprintf>
 8001d00:	4819      	ldr	r0, [pc, #100]	@ (8001d68 <main+0x8d4>)
 8001d02:	f00b fe8f 	bl	800da24 <puts>
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <main+0x88c>)
 8001d08:	f00b fe8c 	bl	800da24 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <main+0x878>
 8001d10:	0801002c 	.word	0x0801002c
 8001d14:	08010034 	.word	0x08010034
 8001d18:	08010040 	.word	0x08010040
 8001d1c:	080103fc 	.word	0x080103fc
 8001d20:	08010078 	.word	0x08010078
 8001d24:	0801040c 	.word	0x0801040c
 8001d28:	2000041f 	.word	0x2000041f
 8001d2c:	0801030c 	.word	0x0801030c
 8001d30:	08010420 	.word	0x08010420
 8001d34:	20000210 	.word	0x20000210
 8001d38:	08010444 	.word	0x08010444
 8001d3c:	2000041c 	.word	0x2000041c
 8001d40:	0801045c 	.word	0x0801045c
 8001d44:	08010470 	.word	0x08010470
 8001d48:	08010484 	.word	0x08010484
 8001d4c:	2000041d 	.word	0x2000041d
 8001d50:	08010494 	.word	0x08010494
 8001d54:	2000041e 	.word	0x2000041e
 8001d58:	080104a8 	.word	0x080104a8
 8001d5c:	080104b8 	.word	0x080104b8
 8001d60:	20000420 	.word	0x20000420
 8001d64:	080104c8 	.word	0x080104c8
 8001d68:	080104d8 	.word	0x080104d8

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	@ 0x50
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2230      	movs	r2, #48	@ 0x30
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00b ffe2 	bl	800dd44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <SystemClock_Config+0xcc>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <SystemClock_Config+0xcc>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <SystemClock_Config+0xcc>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <SystemClock_Config+0xd0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <SystemClock_Config+0xd0>)
 8001db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <SystemClock_Config+0xd0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001de0:	23a8      	movs	r3, #168	@ 0xa8
 8001de2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001de8:	2307      	movs	r3, #7
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 fa3b 	bl	800626c <HAL_RCC_OscConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dfc:	f000 fae2 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e00:	230f      	movs	r3, #15
 8001e02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fc9c 	bl	800675c <HAL_RCC_ClockConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e2a:	f000 facb 	bl	80023c4 <Error_Handler>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3750      	adds	r7, #80	@ 0x50
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000

08001e40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <MX_CAN1_Init+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e4c:	2205      	movs	r2, #5
 8001e4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e56:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e5e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001e62:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_CAN1_Init+0x64>)
 8001e90:	f001 fc12 	bl	80036b8 <HAL_CAN_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001e9a:	f000 fa93 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000210 	.word	0x20000210
 8001ea8:	40006400 	.word	0x40006400

08001eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001eb2:	4a13      	ldr	r2, [pc, #76]	@ (8001f00 <MX_I2C1_Init+0x54>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001eb8:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <MX_I2C1_Init+0x58>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <MX_I2C1_Init+0x50>)
 8001eea:	f003 f9c5 	bl	8005278 <HAL_I2C_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f000 fa66 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000238 	.word	0x20000238
 8001f00:	40005400 	.word	0x40005400
 8001f04:	000186a0 	.word	0x000186a0

08001f08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <MX_SPI1_Init+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f54:	220a      	movs	r2, #10
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_SPI1_Init+0x64>)
 8001f5a:	f004 fe51 	bl	8006c00 <HAL_SPI_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f64:	f000 fa2e 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000028c 	.word	0x2000028c
 8001f70:	40013000 	.word	0x40013000

08001f74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001f84:	4a15      	ldr	r2, [pc, #84]	@ (8001fdc <MX_TIM7_Init+0x68>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4999;
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001f8a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001f8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001f98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f9c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001fa6:	f005 fbfd 	bl	80077a4 <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001fb0:	f000 fa08 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_TIM7_Init+0x64>)
 8001fc2:	f005 fe6d 	bl	8007ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001fcc:	f000 f9fa 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200002e4 	.word	0x200002e4
 8001fdc:	40001400 	.word	0x40001400

08001fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <MX_USART2_UART_Init+0x50>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <MX_USART2_UART_Init+0x4c>)
 8002018:	f005 fed2 	bl	8007dc0 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002022:	f000 f9cf 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000032c 	.word	0x2000032c
 8002030:	40004400 	.word	0x40004400

08002034 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <MX_USART3_UART_Init+0x50>)
 800203c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_USART3_UART_Init+0x4c>)
 800206c:	f005 fea8 	bl	8007dc0 <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002076:	f000 f9a5 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000374 	.word	0x20000374
 8002084:	40004800 	.word	0x40004800

08002088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <MX_DMA_Init+0x3c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a0b      	ldr	r2, [pc, #44]	@ (80020c4 <MX_DMA_Init+0x3c>)
 8002098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <MX_DMA_Init+0x3c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	200c      	movs	r0, #12
 80020b0:	f002 f974 	bl	800439c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020b4:	200c      	movs	r0, #12
 80020b6:	f002 f98d 	bl	80043d4 <HAL_NVIC_EnableIRQ>

}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b52      	ldr	r3, [pc, #328]	@ (800222c <MX_GPIO_Init+0x164>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a51      	ldr	r2, [pc, #324]	@ (800222c <MX_GPIO_Init+0x164>)
 80020e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b4f      	ldr	r3, [pc, #316]	@ (800222c <MX_GPIO_Init+0x164>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <MX_GPIO_Init+0x164>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <MX_GPIO_Init+0x164>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b48      	ldr	r3, [pc, #288]	@ (800222c <MX_GPIO_Init+0x164>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b44      	ldr	r3, [pc, #272]	@ (800222c <MX_GPIO_Init+0x164>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a43      	ldr	r2, [pc, #268]	@ (800222c <MX_GPIO_Init+0x164>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b41      	ldr	r3, [pc, #260]	@ (800222c <MX_GPIO_Init+0x164>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b3d      	ldr	r3, [pc, #244]	@ (800222c <MX_GPIO_Init+0x164>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <MX_GPIO_Init+0x164>)
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <MX_GPIO_Init+0x164>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4b36      	ldr	r3, [pc, #216]	@ (800222c <MX_GPIO_Init+0x164>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a35      	ldr	r2, [pc, #212]	@ (800222c <MX_GPIO_Init+0x164>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b33      	ldr	r3, [pc, #204]	@ (800222c <MX_GPIO_Init+0x164>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2102      	movs	r1, #2
 800216e:	4830      	ldr	r0, [pc, #192]	@ (8002230 <MX_GPIO_Init+0x168>)
 8002170:	f003 f844 	bl	80051fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	2180      	movs	r1, #128	@ 0x80
 8002178:	482e      	ldr	r0, [pc, #184]	@ (8002234 <MX_GPIO_Init+0x16c>)
 800217a:	f003 f83f 	bl	80051fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002184:	482c      	ldr	r0, [pc, #176]	@ (8002238 <MX_GPIO_Init+0x170>)
 8002186:	f003 f839 	bl	80051fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800218e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4827      	ldr	r0, [pc, #156]	@ (800223c <MX_GPIO_Init+0x174>)
 80021a0:	f002 fd94 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021a4:	2302      	movs	r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	481d      	ldr	r0, [pc, #116]	@ (8002230 <MX_GPIO_Init+0x168>)
 80021bc:	f002 fd86 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4817      	ldr	r0, [pc, #92]	@ (8002234 <MX_GPIO_Init+0x16c>)
 80021d8:	f002 fd78 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4810      	ldr	r0, [pc, #64]	@ (8002234 <MX_GPIO_Init+0x16c>)
 80021f2:	f002 fd6b 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80021f6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80021fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	480a      	ldr	r0, [pc, #40]	@ (8002238 <MX_GPIO_Init+0x170>)
 8002210:	f002 fd5c 	bl	8004ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2006      	movs	r0, #6
 800221a:	f002 f8bf 	bl	800439c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800221e:	2006      	movs	r0, #6
 8002220:	f002 f8d8 	bl	80043d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	@ 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400
 8002234:	40021000 	.word	0x40021000
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40020000 	.word	0x40020000

08002240 <CAN_filter_config>:

/* USER CODE BEGIN 4 */
void CAN_filter_config(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;
  can1_filter_init.FilterActivation = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  can1_filter_init.FilterIdHigh = 0x65D << 5; // Standard ID 0x65D
 8002252:	f64c 33a0 	movw	r3, #52128	@ 0xcba0
 8002256:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0x7FF << 5; // Match 0x65D exactly
 800225c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002260:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_16BIT;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  if (HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	@ (8002290 <CAN_filter_config+0x50>)
 8002274:	f001 fb1c 	bl	80038b0 <HAL_CAN_ConfigFilter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <CAN_filter_config+0x48>
  {
    printf("Node 2: HAL_CAN_ConfigFilter failed.\n");
 800227e:	4805      	ldr	r0, [pc, #20]	@ (8002294 <CAN_filter_config+0x54>)
 8002280:	f00b fbd0 	bl	800da24 <puts>
    Error_Handler();
 8002284:	f000 f89e 	bl	80023c4 <Error_Handler>
  }
}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	@ 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000210 	.word	0x20000210
 8002294:	080104f4 	.word	0x080104f4

08002298 <LED_Manage_Output>:

void LED_Manage_Output(uint8_t led_no)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin | ORANGE_LED_Pin | RED_LED_Pin | BLUE_LED_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80022a8:	481c      	ldr	r0, [pc, #112]	@ (800231c <LED_Manage_Output+0x84>)
 80022aa:	f002 ffa7 	bl	80051fc <HAL_GPIO_WritePin>
  switch (led_no)
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d827      	bhi.n	8002304 <LED_Manage_Output+0x6c>
 80022b4:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <LED_Manage_Output+0x24>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022db 	.word	0x080022db
 80022c4:	080022e9 	.word	0x080022e9
 80022c8:	080022f7 	.word	0x080022f7
  {
    case 0:
      HAL_GPIO_WritePin(GPIOD, BLUE_LED_Pin, GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022d2:	4812      	ldr	r0, [pc, #72]	@ (800231c <LED_Manage_Output+0x84>)
 80022d4:	f002 ff92 	bl	80051fc <HAL_GPIO_WritePin>
      break;
 80022d8:	e01b      	b.n	8002312 <LED_Manage_Output+0x7a>
    case 1:
      HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022e0:	480e      	ldr	r0, [pc, #56]	@ (800231c <LED_Manage_Output+0x84>)
 80022e2:	f002 ff8b 	bl	80051fc <HAL_GPIO_WritePin>
      break;
 80022e6:	e014      	b.n	8002312 <LED_Manage_Output+0x7a>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ORANGE_LED_Pin, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ee:	480b      	ldr	r0, [pc, #44]	@ (800231c <LED_Manage_Output+0x84>)
 80022f0:	f002 ff84 	bl	80051fc <HAL_GPIO_WritePin>
      break;
 80022f4:	e00d      	b.n	8002312 <LED_Manage_Output+0x7a>
    case 3:
      HAL_GPIO_WritePin(GPIOD, RED_LED_Pin, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022fc:	4807      	ldr	r0, [pc, #28]	@ (800231c <LED_Manage_Output+0x84>)
 80022fe:	f002 ff7d 	bl	80051fc <HAL_GPIO_WritePin>
      break;
 8002302:	e006      	b.n	8002312 <LED_Manage_Output+0x7a>
    default:
      HAL_GPIO_WritePin(GPIOD, RED_LED_Pin, GPIO_PIN_SET); // Error indication
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800230a:	4804      	ldr	r0, [pc, #16]	@ (800231c <LED_Manage_Output+0x84>)
 800230c:	f002 ff76 	bl	80051fc <HAL_GPIO_WritePin>
      break;
 8002310:	bf00      	nop
  }
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020c00 	.word	0x40020c00

08002320 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint8_t rcvd_msg[8];
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcvd_msg) == HAL_OK)
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	4a18      	ldr	r2, [pc, #96]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800232e:	2100      	movs	r1, #0
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f001 fbdf 	bl	8003af4 <HAL_CAN_GetRxMessage>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d121      	bne.n	8002380 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
  {
    if (RxHeader.StdId == 0x65D && RxHeader.RTR == CAN_RTR_DATA && RxHeader.DLC == 1)
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f240 625d 	movw	r2, #1629	@ 0x65d
 8002344:	4293      	cmp	r3, r2
 8002346:	d111      	bne.n	800236c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d109      	bne.n	800236c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
    {
      printf("Node 2: Received data frame ID: 0x65D, LED No: %d\n", rcvd_msg[0]);
 8002358:	7a3b      	ldrb	r3, [r7, #8]
 800235a:	4619      	mov	r1, r3
 800235c:	480d      	ldr	r0, [pc, #52]	@ (8002394 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800235e:	f00b faf9 	bl	800d954 <iprintf>
      LED_Manage_Output(rcvd_msg[0]);
 8002362:	7a3b      	ldrb	r3, [r7, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff97 	bl	8002298 <LED_Manage_Output>
  }
  else
  {
    printf("Node 2: HAL_CAN_GetRxMessage failed.\n");
  }
}
 800236a:	e00c      	b.n	8002386 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
      printf("Node 2: Unexpected frame ID: 0x%X, RTR: %d, DLC: %d\n",
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4807      	ldr	r0, [pc, #28]	@ (8002398 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800237a:	f00b faeb 	bl	800d954 <iprintf>
}
 800237e:	e002      	b.n	8002386 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
    printf("Node 2: HAL_CAN_GetRxMessage failed.\n");
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8002382:	f00b fb4f 	bl	800da24 <puts>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000424 	.word	0x20000424
 8002394:	0801051c 	.word	0x0801051c
 8002398:	08010550 	.word	0x08010550
 800239c:	08010588 	.word	0x08010588

080023a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80023b2:	f001 f93d 	bl	8003630 <HAL_IncTick>
  if (htim->Instance == TIM7)
  {

  }
  /* USER CODE END Callback 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40001000 	.word	0x40001000

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
   while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <Error_Handler+0x8>

080023d0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <SELECT+0x18>)
 80023da:	f002 ff0f 	bl	80051fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f001 f946 	bl	8003670 <HAL_Delay>
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	4803      	ldr	r0, [pc, #12]	@ (8002404 <DESELECT+0x18>)
 80023f6:	f002 ff01 	bl	80051fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f001 f938 	bl	8003670 <HAL_Delay>
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002412:	bf00      	nop
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <SPI_TxByte+0x30>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d1f8      	bne.n	8002414 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002422:	1df9      	adds	r1, r7, #7
 8002424:	2364      	movs	r3, #100	@ 0x64
 8002426:	2201      	movs	r2, #1
 8002428:	4803      	ldr	r0, [pc, #12]	@ (8002438 <SPI_TxByte+0x30>)
 800242a:	f004 fc72 	bl	8006d12 <HAL_SPI_Transmit>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000028c 	.word	0x2000028c

0800243c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002448:	bf00      	nop
 800244a:	4b08      	ldr	r3, [pc, #32]	@ (800246c <SPI_TxBuffer+0x30>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d1f8      	bne.n	800244a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	2364      	movs	r3, #100	@ 0x64
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4803      	ldr	r0, [pc, #12]	@ (800246c <SPI_TxBuffer+0x30>)
 8002460:	f004 fc57 	bl	8006d12 <HAL_SPI_Transmit>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	2000028c 	.word	0x2000028c

08002470 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002476:	23ff      	movs	r3, #255	@ 0xff
 8002478:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800247a:	bf00      	nop
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <SPI_RxByte+0x34>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d1f8      	bne.n	800247c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800248a:	1dba      	adds	r2, r7, #6
 800248c:	1df9      	adds	r1, r7, #7
 800248e:	2364      	movs	r3, #100	@ 0x64
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	4803      	ldr	r0, [pc, #12]	@ (80024a4 <SPI_RxByte+0x34>)
 8002496:	f004 fe99 	bl	80071cc <HAL_SPI_TransmitReceive>

  return data;
 800249a:	79bb      	ldrb	r3, [r7, #6]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000028c 	.word	0x2000028c

080024a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80024b0:	f7ff ffde 	bl	8002470 <SPI_RxByte>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	701a      	strb	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <SD_ReadyWait+0x30>)
 80024cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024d0:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80024d2:	f7ff ffcd 	bl	8002470 <SPI_RxByte>
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2bff      	cmp	r3, #255	@ 0xff
 80024de:	d003      	beq.n	80024e8 <SD_ReadyWait+0x24>
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <SD_ReadyWait+0x30>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f4      	bne.n	80024d2 <SD_ReadyWait+0xe>

  return res;
 80024e8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000442 	.word	0x20000442

080024f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80024fe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8002502:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8002504:	f7ff ff72 	bl	80023ec <DESELECT>
  for(int i = 0; i < 10; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	e005      	b.n	800251a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800250e:	20ff      	movs	r0, #255	@ 0xff
 8002510:	f7ff ff7a 	bl	8002408 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	3301      	adds	r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b09      	cmp	r3, #9
 800251e:	ddf6      	ble.n	800250e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8002520:	f7ff ff56 	bl	80023d0 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002524:	2340      	movs	r3, #64	@ 0x40
 8002526:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8002538:	2395      	movs	r3, #149	@ 0x95
 800253a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800253c:	463b      	mov	r3, r7
 800253e:	2106      	movs	r1, #6
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff7b 	bl	800243c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002546:	e002      	b.n	800254e <SD_PowerOn+0x56>
  {
    cnt--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3b01      	subs	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800254e:	f7ff ff8f 	bl	8002470 <SPI_RxByte>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d002      	beq.n	800255e <SD_PowerOn+0x66>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f4      	bne.n	8002548 <SD_PowerOn+0x50>
  }

  DESELECT();
 800255e:	f7ff ff45 	bl	80023ec <DESELECT>
  SPI_TxByte(0XFF);
 8002562:	20ff      	movs	r0, #255	@ 0xff
 8002564:	f7ff ff50 	bl	8002408 <SPI_TxByte>

  PowerFlag = 1;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <SD_PowerOn+0x80>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000445 	.word	0x20000445

0800257c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <SD_PowerOff+0x14>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	20000445 	.word	0x20000445

08002594 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002598:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <SD_CheckPower+0x14>)
 800259a:	781b      	ldrb	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000445 	.word	0x20000445

080025ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80025b6:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <SD_RxDataBlock+0x58>)
 80025b8:	22c8      	movs	r2, #200	@ 0xc8
 80025ba:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80025bc:	f7ff ff58 	bl	8002470 <SPI_RxByte>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2bff      	cmp	r3, #255	@ 0xff
 80025c8:	d103      	bne.n	80025d2 <SD_RxDataBlock+0x26>
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <SD_RxDataBlock+0x58>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f4      	bne.n	80025bc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80025d6:	d001      	beq.n	80025dc <SD_RxDataBlock+0x30>
 80025d8:	2300      	movs	r3, #0
 80025da:	e00f      	b.n	80025fc <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff60 	bl	80024a8 <SPI_RxBytePtr>
  } while(len--);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	603a      	str	r2, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f4      	bne.n	80025dc <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80025f2:	f7ff ff3d 	bl	8002470 <SPI_RxByte>
  SPI_RxByte();
 80025f6:	f7ff ff3b 	bl	8002470 <SPI_RxByte>

  return TRUE;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000440 	.word	0x20000440

08002608 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002618:	f7ff ff54 	bl	80024c4 <SD_ReadyWait>
 800261c:	4603      	mov	r3, r0
 800261e:	2bff      	cmp	r3, #255	@ 0xff
 8002620:	d001      	beq.n	8002626 <SD_TxDataBlock+0x1e>
 8002622:	2300      	movs	r3, #0
 8002624:	e02f      	b.n	8002686 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff feed 	bl	8002408 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	2bfd      	cmp	r3, #253	@ 0xfd
 8002632:	d020      	beq.n	8002676 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff feff 	bl	800243c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800263e:	f7ff ff17 	bl	8002470 <SPI_RxByte>
    SPI_RxByte();
 8002642:	f7ff ff15 	bl	8002470 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8002646:	e00b      	b.n	8002660 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8002648:	f7ff ff12 	bl	8002470 <SPI_RxByte>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2b05      	cmp	r3, #5
 8002658:	d006      	beq.n	8002668 <SD_TxDataBlock+0x60>
      i++;
 800265a:	7bbb      	ldrb	r3, [r7, #14]
 800265c:	3301      	adds	r3, #1
 800265e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	d9f0      	bls.n	8002648 <SD_TxDataBlock+0x40>
 8002666:	e000      	b.n	800266a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8002668:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800266a:	bf00      	nop
 800266c:	f7ff ff00 	bl	8002470 <SPI_RxByte>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0fa      	beq.n	800266c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2b05      	cmp	r3, #5
 800267e:	d101      	bne.n	8002684 <SD_TxDataBlock+0x7c>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <SD_TxDataBlock+0x7e>

  return FALSE;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	6039      	str	r1, [r7, #0]
 8002698:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800269a:	f7ff ff13 	bl	80024c4 <SD_ReadyWait>
 800269e:	4603      	mov	r3, r0
 80026a0:	2bff      	cmp	r3, #255	@ 0xff
 80026a2:	d001      	beq.n	80026a8 <SD_SendCmd+0x1a>
 80026a4:	23ff      	movs	r3, #255	@ 0xff
 80026a6:	e042      	b.n	800272e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff feac 	bl	8002408 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	0e1b      	lsrs	r3, r3, #24
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fea6 	bl	8002408 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fea0 	bl	8002408 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fe9a 	bl	8002408 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fe95 	bl	8002408 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d102      	bne.n	80026ea <SD_SendCmd+0x5c>
 80026e4:	2395      	movs	r3, #149	@ 0x95
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e007      	b.n	80026fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b48      	cmp	r3, #72	@ 0x48
 80026ee:	d102      	bne.n	80026f6 <SD_SendCmd+0x68>
 80026f0:	2387      	movs	r3, #135	@ 0x87
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e001      	b.n	80026fa <SD_SendCmd+0x6c>
  else crc = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe83 	bl	8002408 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b4c      	cmp	r3, #76	@ 0x4c
 8002706:	d101      	bne.n	800270c <SD_SendCmd+0x7e>
 8002708:	f7ff feb2 	bl	8002470 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800270c:	230a      	movs	r3, #10
 800270e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8002710:	f7ff feae 	bl	8002470 <SPI_RxByte>
 8002714:	4603      	mov	r3, r0
 8002716:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002718:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da05      	bge.n	800272c <SD_SendCmd+0x9e>
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	3b01      	subs	r3, #1
 8002724:	73bb      	strb	r3, [r7, #14]
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f1      	bne.n	8002710 <SD_SendCmd+0x82>

  return res;
 800272c:	7b7b      	ldrb	r3, [r7, #13]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SD_disk_initialize+0x14>
 8002748:	2301      	movs	r3, #1
 800274a:	e0d1      	b.n	80028f0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800274c:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <SD_disk_initialize+0x1c0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <SD_disk_initialize+0x2a>
 800275a:	4b67      	ldr	r3, [pc, #412]	@ (80028f8 <SD_disk_initialize+0x1c0>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	e0c6      	b.n	80028f0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8002762:	f7ff fec9 	bl	80024f8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8002766:	f7ff fe33 	bl	80023d0 <SELECT>

  /* check disk type */
  type = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800276e:	2100      	movs	r1, #0
 8002770:	2040      	movs	r0, #64	@ 0x40
 8002772:	f7ff ff8c 	bl	800268e <SD_SendCmd>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	f040 80a1 	bne.w	80028c0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800277e:	4b5f      	ldr	r3, [pc, #380]	@ (80028fc <SD_disk_initialize+0x1c4>)
 8002780:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002784:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002786:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800278a:	2048      	movs	r0, #72	@ 0x48
 800278c:	f7ff ff7f 	bl	800268e <SD_SendCmd>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d155      	bne.n	8002842 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	e00c      	b.n	80027b6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800279c:	7bfc      	ldrb	r4, [r7, #15]
 800279e:	f7ff fe67 	bl	8002470 <SPI_RxByte>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	f104 0310 	add.w	r3, r4, #16
 80027aa:	443b      	add	r3, r7
 80027ac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d9ef      	bls.n	800279c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80027bc:	7abb      	ldrb	r3, [r7, #10]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d17e      	bne.n	80028c0 <SD_disk_initialize+0x188>
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	2baa      	cmp	r3, #170	@ 0xaa
 80027c6:	d17b      	bne.n	80028c0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80027c8:	2100      	movs	r1, #0
 80027ca:	2077      	movs	r0, #119	@ 0x77
 80027cc:	f7ff ff5f 	bl	800268e <SD_SendCmd>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d807      	bhi.n	80027e6 <SD_disk_initialize+0xae>
 80027d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80027da:	2069      	movs	r0, #105	@ 0x69
 80027dc:	f7ff ff57 	bl	800268e <SD_SendCmd>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80027e6:	4b45      	ldr	r3, [pc, #276]	@ (80028fc <SD_disk_initialize+0x1c4>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ec      	bne.n	80027c8 <SD_disk_initialize+0x90>
 80027ee:	e000      	b.n	80027f2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80027f0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80027f2:	4b42      	ldr	r3, [pc, #264]	@ (80028fc <SD_disk_initialize+0x1c4>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d062      	beq.n	80028c0 <SD_disk_initialize+0x188>
 80027fa:	2100      	movs	r1, #0
 80027fc:	207a      	movs	r0, #122	@ 0x7a
 80027fe:	f7ff ff46 	bl	800268e <SD_SendCmd>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d15b      	bne.n	80028c0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e00c      	b.n	8002828 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800280e:	7bfc      	ldrb	r4, [r7, #15]
 8002810:	f7ff fe2e 	bl	8002470 <SPI_RxByte>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	f104 0310 	add.w	r3, r4, #16
 800281c:	443b      	add	r3, r7
 800281e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	3301      	adds	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d9ef      	bls.n	800280e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800282e:	7a3b      	ldrb	r3, [r7, #8]
 8002830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <SD_disk_initialize+0x104>
 8002838:	230c      	movs	r3, #12
 800283a:	e000      	b.n	800283e <SD_disk_initialize+0x106>
 800283c:	2304      	movs	r3, #4
 800283e:	73bb      	strb	r3, [r7, #14]
 8002840:	e03e      	b.n	80028c0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002842:	2100      	movs	r1, #0
 8002844:	2077      	movs	r0, #119	@ 0x77
 8002846:	f7ff ff22 	bl	800268e <SD_SendCmd>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d808      	bhi.n	8002862 <SD_disk_initialize+0x12a>
 8002850:	2100      	movs	r1, #0
 8002852:	2069      	movs	r0, #105	@ 0x69
 8002854:	f7ff ff1b 	bl	800268e <SD_SendCmd>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d801      	bhi.n	8002862 <SD_disk_initialize+0x12a>
 800285e:	2302      	movs	r3, #2
 8002860:	e000      	b.n	8002864 <SD_disk_initialize+0x12c>
 8002862:	2301      	movs	r3, #1
 8002864:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8002866:	7bbb      	ldrb	r3, [r7, #14]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d10e      	bne.n	800288a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800286c:	2100      	movs	r1, #0
 800286e:	2077      	movs	r0, #119	@ 0x77
 8002870:	f7ff ff0d 	bl	800268e <SD_SendCmd>
 8002874:	4603      	mov	r3, r0
 8002876:	2b01      	cmp	r3, #1
 8002878:	d80e      	bhi.n	8002898 <SD_disk_initialize+0x160>
 800287a:	2100      	movs	r1, #0
 800287c:	2069      	movs	r0, #105	@ 0x69
 800287e:	f7ff ff06 	bl	800268e <SD_SendCmd>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <SD_disk_initialize+0x160>
 8002888:	e00c      	b.n	80028a4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800288a:	2100      	movs	r1, #0
 800288c:	2041      	movs	r0, #65	@ 0x41
 800288e:	f7ff fefe 	bl	800268e <SD_SendCmd>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8002898:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <SD_disk_initialize+0x1c4>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e2      	bne.n	8002866 <SD_disk_initialize+0x12e>
 80028a0:	e000      	b.n	80028a4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80028a2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <SD_disk_initialize+0x1c4>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <SD_disk_initialize+0x184>
 80028ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028b0:	2050      	movs	r0, #80	@ 0x50
 80028b2:	f7ff feec 	bl	800268e <SD_SendCmd>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <SD_disk_initialize+0x188>
 80028bc:	2300      	movs	r3, #0
 80028be:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80028c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002900 <SD_disk_initialize+0x1c8>)
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80028c6:	f7ff fd91 	bl	80023ec <DESELECT>
  SPI_RxByte();
 80028ca:	f7ff fdd1 	bl	8002470 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <SD_disk_initialize+0x1c0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <SD_disk_initialize+0x1c0>)
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e001      	b.n	80028ea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80028e6:	f7ff fe49 	bl	800257c <SD_PowerOff>
  }

  return Stat;
 80028ea:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <SD_disk_initialize+0x1c0>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000440 	.word	0x20000440
 8002900:	20000444 	.word	0x20000444

08002904 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <SD_disk_status+0x14>
 8002914:	2301      	movs	r3, #1
 8002916:	e002      	b.n	800291e <SD_disk_status+0x1a>
  return Stat;
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <SD_disk_status+0x28>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <SD_disk_read+0x1c>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <SD_disk_read+0x20>
 800294c:	2304      	movs	r3, #4
 800294e:	e051      	b.n	80029f4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <SD_disk_read+0xcc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <SD_disk_read+0x32>
 800295e:	2303      	movs	r3, #3
 8002960:	e048      	b.n	80029f4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8002962:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <SD_disk_read+0xd0>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <SD_disk_read+0x44>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	025b      	lsls	r3, r3, #9
 8002972:	607b      	str	r3, [r7, #4]

  SELECT();
 8002974:	f7ff fd2c 	bl	80023d0 <SELECT>

  if (count == 1)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d111      	bne.n	80029a2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	2051      	movs	r0, #81	@ 0x51
 8002982:	f7ff fe84 	bl	800268e <SD_SendCmd>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d129      	bne.n	80029e0 <SD_disk_read+0xb0>
 800298c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002990:	68b8      	ldr	r0, [r7, #8]
 8002992:	f7ff fe0b 	bl	80025ac <SD_RxDataBlock>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d021      	beq.n	80029e0 <SD_disk_read+0xb0>
 800299c:	2300      	movs	r3, #0
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	e01e      	b.n	80029e0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	2052      	movs	r0, #82	@ 0x52
 80029a6:	f7ff fe72 	bl	800268e <SD_SendCmd>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d117      	bne.n	80029e0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80029b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029b4:	68b8      	ldr	r0, [r7, #8]
 80029b6:	f7ff fdf9 	bl	80025ac <SD_RxDataBlock>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <SD_disk_read+0xa6>
        buff += 512;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80029c6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ed      	bne.n	80029b0 <SD_disk_read+0x80>
 80029d4:	e000      	b.n	80029d8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80029d6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80029d8:	2100      	movs	r1, #0
 80029da:	204c      	movs	r0, #76	@ 0x4c
 80029dc:	f7ff fe57 	bl	800268e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80029e0:	f7ff fd04 	bl	80023ec <DESELECT>
  SPI_RxByte();
 80029e4:	f7ff fd44 	bl	8002470 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf14      	ite	ne
 80029ee:	2301      	movne	r3, #1
 80029f0:	2300      	moveq	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000444 	.word	0x20000444

08002a04 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4603      	mov	r3, r0
 8002a12:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <SD_disk_write+0x1c>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <SD_disk_write+0x20>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e06b      	b.n	8002afc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a24:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <SD_disk_write+0x100>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SD_disk_write+0x32>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e062      	b.n	8002afc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8002a36:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <SD_disk_write+0x100>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <SD_disk_write+0x44>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e059      	b.n	8002afc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8002a48:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <SD_disk_write+0x104>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <SD_disk_write+0x56>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	607b      	str	r3, [r7, #4]

  SELECT();
 8002a5a:	f7ff fcb9 	bl	80023d0 <SELECT>

  if (count == 1)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d110      	bne.n	8002a86 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	2058      	movs	r0, #88	@ 0x58
 8002a68:	f7ff fe11 	bl	800268e <SD_SendCmd>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d13a      	bne.n	8002ae8 <SD_disk_write+0xe4>
 8002a72:	21fe      	movs	r1, #254	@ 0xfe
 8002a74:	68b8      	ldr	r0, [r7, #8]
 8002a76:	f7ff fdc7 	bl	8002608 <SD_TxDataBlock>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d033      	beq.n	8002ae8 <SD_disk_write+0xe4>
      count = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	e030      	b.n	8002ae8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <SD_disk_write+0x104>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002a92:	2100      	movs	r1, #0
 8002a94:	2077      	movs	r0, #119	@ 0x77
 8002a96:	f7ff fdfa 	bl	800268e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	2057      	movs	r0, #87	@ 0x57
 8002a9e:	f7ff fdf6 	bl	800268e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	2059      	movs	r0, #89	@ 0x59
 8002aa6:	f7ff fdf2 	bl	800268e <SD_SendCmd>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11b      	bne.n	8002ae8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002ab0:	21fc      	movs	r1, #252	@ 0xfc
 8002ab2:	68b8      	ldr	r0, [r7, #8]
 8002ab4:	f7ff fda8 	bl	8002608 <SD_TxDataBlock>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <SD_disk_write+0xd0>
        buff += 512;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ac4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ee      	bne.n	8002ab0 <SD_disk_write+0xac>
 8002ad2:	e000      	b.n	8002ad6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002ad4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8002ad6:	21fd      	movs	r1, #253	@ 0xfd
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7ff fd95 	bl	8002608 <SD_TxDataBlock>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <SD_disk_write+0xe4>
      {
        count = 1;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8002ae8:	f7ff fc80 	bl	80023ec <DESELECT>
  SPI_RxByte();
 8002aec:	f7ff fcc0 	bl	8002470 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000444 	.word	0x20000444

08002b0c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b08b      	sub	sp, #44	@ 0x2c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	603a      	str	r2, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <SD_disk_ioctl+0x1e>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e113      	b.n	8002d52 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d124      	bne.n	8002b80 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d012      	beq.n	8002b64 <SD_disk_ioctl+0x58>
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	dc1a      	bgt.n	8002b78 <SD_disk_ioctl+0x6c>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <SD_disk_ioctl+0x40>
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d006      	beq.n	8002b58 <SD_disk_ioctl+0x4c>
 8002b4a:	e015      	b.n	8002b78 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8002b4c:	f7ff fd16 	bl	800257c <SD_PowerOff>
      res = RES_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b56:	e0fa      	b.n	8002d4e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8002b58:	f7ff fcce 	bl	80024f8 <SD_PowerOn>
      res = RES_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b62:	e0f4      	b.n	8002d4e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	1c5c      	adds	r4, r3, #1
 8002b68:	f7ff fd14 	bl	8002594 <SD_CheckPower>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002b76:	e0ea      	b.n	8002d4e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002b7e:	e0e6      	b.n	8002d4e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b80:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <SD_disk_ioctl+0x250>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SD_disk_ioctl+0x86>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0df      	b.n	8002d52 <SD_disk_ioctl+0x246>

    SELECT();
 8002b92:	f7ff fc1d 	bl	80023d0 <SELECT>

    switch (ctrl)
 8002b96:	79bb      	ldrb	r3, [r7, #6]
 8002b98:	2b0d      	cmp	r3, #13
 8002b9a:	f200 80c9 	bhi.w	8002d30 <SD_disk_ioctl+0x224>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <SD_disk_ioctl+0x98>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c9b 	.word	0x08002c9b
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002c8b 	.word	0x08002c8b
 8002bb0:	08002d31 	.word	0x08002d31
 8002bb4:	08002d31 	.word	0x08002d31
 8002bb8:	08002d31 	.word	0x08002d31
 8002bbc:	08002d31 	.word	0x08002d31
 8002bc0:	08002d31 	.word	0x08002d31
 8002bc4:	08002d31 	.word	0x08002d31
 8002bc8:	08002d31 	.word	0x08002d31
 8002bcc:	08002d31 	.word	0x08002d31
 8002bd0:	08002cad 	.word	0x08002cad
 8002bd4:	08002cd1 	.word	0x08002cd1
 8002bd8:	08002cf5 	.word	0x08002cf5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2049      	movs	r0, #73	@ 0x49
 8002be0:	f7ff fd55 	bl	800268e <SD_SendCmd>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 80a6 	bne.w	8002d38 <SD_disk_ioctl+0x22c>
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fcda 	bl	80025ac <SD_RxDataBlock>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 809c 	beq.w	8002d38 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8002c00:	7b3b      	ldrb	r3, [r7, #12]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10d      	bne.n	8002c26 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002c0a:	7d7b      	ldrb	r3, [r7, #21]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	7d3b      	ldrb	r3, [r7, #20]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002c1c:	8bfb      	ldrh	r3, [r7, #30]
 8002c1e:	029a      	lsls	r2, r3, #10
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e02d      	b.n	8002c82 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c26:	7c7b      	ldrb	r3, [r7, #17]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	7dbb      	ldrb	r3, [r7, #22]
 8002c30:	09db      	lsrs	r3, r3, #7
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	7d7b      	ldrb	r3, [r7, #21]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0306 	and.w	r3, r3, #6
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3302      	adds	r3, #2
 8002c4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002c4e:	7d3b      	ldrb	r3, [r7, #20]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	7cbb      	ldrb	r3, [r7, #18]
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002c74:	8bfa      	ldrh	r2, [r7, #30]
 8002c76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c7a:	3b09      	subs	r3, #9
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002c88:	e056      	b.n	8002d38 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c90:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002c98:	e055      	b.n	8002d46 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002c9a:	f7ff fc13 	bl	80024c4 <SD_ReadyWait>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2bff      	cmp	r3, #255	@ 0xff
 8002ca2:	d14b      	bne.n	8002d3c <SD_disk_ioctl+0x230>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002caa:	e047      	b.n	8002d3c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002cac:	2100      	movs	r1, #0
 8002cae:	2049      	movs	r0, #73	@ 0x49
 8002cb0:	f7ff fced 	bl	800268e <SD_SendCmd>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d142      	bne.n	8002d40 <SD_disk_ioctl+0x234>
 8002cba:	2110      	movs	r1, #16
 8002cbc:	6a38      	ldr	r0, [r7, #32]
 8002cbe:	f7ff fc75 	bl	80025ac <SD_RxDataBlock>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03b      	beq.n	8002d40 <SD_disk_ioctl+0x234>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002cce:	e037      	b.n	8002d40 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	204a      	movs	r0, #74	@ 0x4a
 8002cd4:	f7ff fcdb 	bl	800268e <SD_SendCmd>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d132      	bne.n	8002d44 <SD_disk_ioctl+0x238>
 8002cde:	2110      	movs	r1, #16
 8002ce0:	6a38      	ldr	r0, [r7, #32]
 8002ce2:	f7ff fc63 	bl	80025ac <SD_RxDataBlock>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02b      	beq.n	8002d44 <SD_disk_ioctl+0x238>
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002cf2:	e027      	b.n	8002d44 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	207a      	movs	r0, #122	@ 0x7a
 8002cf8:	f7ff fcc9 	bl	800268e <SD_SendCmd>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002d08:	e00b      	b.n	8002d22 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8002d0a:	6a3c      	ldr	r4, [r7, #32]
 8002d0c:	1c63      	adds	r3, r4, #1
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	f7ff fbae 	bl	8002470 <SPI_RxByte>
 8002d14:	4603      	mov	r3, r0
 8002d16:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002d18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d9ef      	bls.n	8002d0a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8002d30:	2304      	movs	r3, #4
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d36:	e006      	b.n	8002d46 <SD_disk_ioctl+0x23a>
      break;
 8002d38:	bf00      	nop
 8002d3a:	e004      	b.n	8002d46 <SD_disk_ioctl+0x23a>
      break;
 8002d3c:	bf00      	nop
 8002d3e:	e002      	b.n	8002d46 <SD_disk_ioctl+0x23a>
      break;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <SD_disk_ioctl+0x23a>
      break;
 8002d44:	bf00      	nop
    }

    DESELECT();
 8002d46:	f7ff fb51 	bl	80023ec <DESELECT>
    SPI_RxByte();
 8002d4a:	f7ff fb91 	bl	8002470 <SPI_RxByte>
  }

  return res;
 8002d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	372c      	adds	r7, #44	@ 0x2c
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d9e:	2007      	movs	r0, #7
 8002da0:	f001 faf1 	bl	8004386 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	@ 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	@ (8002e64 <HAL_CAN_MspInit+0xb4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d143      	bne.n	8002e5a <HAL_CAN_MspInit+0xaa>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_CAN_MspInit+0xb8>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a23      	ldr	r2, [pc, #140]	@ (8002e68 <HAL_CAN_MspInit+0xb8>)
 8002ddc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <HAL_CAN_MspInit+0xb8>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_CAN_MspInit+0xb8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e68 <HAL_CAN_MspInit+0xb8>)
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_CAN_MspInit+0xb8>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e1a:	2309      	movs	r3, #9
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4811      	ldr	r0, [pc, #68]	@ (8002e6c <HAL_CAN_MspInit+0xbc>)
 8002e26:	f001 ff51 	bl	8004ccc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2013      	movs	r0, #19
 8002e30:	f001 fab4 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002e34:	2013      	movs	r0, #19
 8002e36:	f001 facd 	bl	80043d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2014      	movs	r0, #20
 8002e40:	f001 faac 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002e44:	2014      	movs	r0, #20
 8002e46:	f001 fac5 	bl	80043d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2016      	movs	r0, #22
 8002e50:	f001 faa4 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002e54:	2016      	movs	r0, #22
 8002e56:	f001 fabd 	bl	80043d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	@ 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40006400 	.word	0x40006400
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020c00 	.word	0x40020c00

08002e70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_I2C_MspInit+0x84>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12c      	bne.n	8002eec <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_I2C_MspInit+0x88>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <HAL_I2C_MspInit+0x88>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_I2C_MspInit+0x88>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002eae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb4:	2312      	movs	r3, #18
 8002eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480c      	ldr	r0, [pc, #48]	@ (8002efc <HAL_I2C_MspInit+0x8c>)
 8002ecc:	f001 fefe 	bl	8004ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_I2C_MspInit+0x88>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	4a07      	ldr	r2, [pc, #28]	@ (8002ef8 <HAL_I2C_MspInit+0x88>)
 8002eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_I2C_MspInit+0x88>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40005400 	.word	0x40005400
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020400 	.word	0x40020400

08002f00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	@ (8002f84 <HAL_SPI_MspInit+0x84>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d12b      	bne.n	8002f7a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	4b18      	ldr	r3, [pc, #96]	@ (8002f88 <HAL_SPI_MspInit+0x88>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_SPI_MspInit+0x88>)
 8002f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f32:	4b15      	ldr	r3, [pc, #84]	@ (8002f88 <HAL_SPI_MspInit+0x88>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_SPI_MspInit+0x88>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <HAL_SPI_MspInit+0x88>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <HAL_SPI_MspInit+0x88>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f5a:	23e0      	movs	r3, #224	@ 0xe0
 8002f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	4619      	mov	r1, r3
 8002f74:	4805      	ldr	r0, [pc, #20]	@ (8002f8c <HAL_SPI_MspInit+0x8c>)
 8002f76:	f001 fea9 	bl	8004ccc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f7a:	bf00      	nop
 8002f7c:	3728      	adds	r7, #40	@ 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40013000 	.word	0x40013000
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40020000 	.word	0x40020000

08002f90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fd8 <HAL_TIM_Base_MspInit+0x48>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d115      	bne.n	8002fce <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <HAL_TIM_Base_MspInit+0x4c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	4a0c      	ldr	r2, [pc, #48]	@ (8002fdc <HAL_TIM_Base_MspInit+0x4c>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <HAL_TIM_Base_MspInit+0x4c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2037      	movs	r0, #55	@ 0x37
 8002fc4:	f001 f9ea 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fc8:	2037      	movs	r0, #55	@ 0x37
 8002fca:	f001 fa03 	bl	80043d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40001400 	.word	0x40001400
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	@ 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8003178 <HAL_UART_MspInit+0x198>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12c      	bne.n	800305c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	4b5d      	ldr	r3, [pc, #372]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	4a5c      	ldr	r2, [pc, #368]	@ (800317c <HAL_UART_MspInit+0x19c>)
 800300c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003010:	6413      	str	r3, [r2, #64]	@ 0x40
 8003012:	4b5a      	ldr	r3, [pc, #360]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	4b56      	ldr	r3, [pc, #344]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	4a55      	ldr	r2, [pc, #340]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6313      	str	r3, [r2, #48]	@ 0x30
 800302e:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800303a:	230c      	movs	r3, #12
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003046:	2303      	movs	r3, #3
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800304a:	2307      	movs	r3, #7
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 031c 	add.w	r3, r7, #28
 8003052:	4619      	mov	r1, r3
 8003054:	484a      	ldr	r0, [pc, #296]	@ (8003180 <HAL_UART_MspInit+0x1a0>)
 8003056:	f001 fe39 	bl	8004ccc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800305a:	e088      	b.n	800316e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a48      	ldr	r2, [pc, #288]	@ (8003184 <HAL_UART_MspInit+0x1a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	f040 8083 	bne.w	800316e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	4b43      	ldr	r3, [pc, #268]	@ (800317c <HAL_UART_MspInit+0x19c>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	4a42      	ldr	r2, [pc, #264]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003076:	6413      	str	r3, [r2, #64]	@ 0x40
 8003078:	4b40      	ldr	r3, [pc, #256]	@ (800317c <HAL_UART_MspInit+0x19c>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	4b3c      	ldr	r3, [pc, #240]	@ (800317c <HAL_UART_MspInit+0x19c>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	4a3b      	ldr	r2, [pc, #236]	@ (800317c <HAL_UART_MspInit+0x19c>)
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	6313      	str	r3, [r2, #48]	@ 0x30
 8003094:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_UART_MspInit+0x19c>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	4b35      	ldr	r3, [pc, #212]	@ (800317c <HAL_UART_MspInit+0x19c>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	4a34      	ldr	r2, [pc, #208]	@ (800317c <HAL_UART_MspInit+0x19c>)
 80030aa:	f043 0308 	orr.w	r3, r3, #8
 80030ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b0:	4b32      	ldr	r3, [pc, #200]	@ (800317c <HAL_UART_MspInit+0x19c>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030ce:	2307      	movs	r3, #7
 80030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	4619      	mov	r1, r3
 80030d8:	482b      	ldr	r0, [pc, #172]	@ (8003188 <HAL_UART_MspInit+0x1a8>)
 80030da:	f001 fdf7 	bl	8004ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030f0:	2307      	movs	r3, #7
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	4619      	mov	r1, r3
 80030fa:	4824      	ldr	r0, [pc, #144]	@ (800318c <HAL_UART_MspInit+0x1ac>)
 80030fc:	f001 fde6 	bl	8004ccc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003100:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003102:	4a24      	ldr	r2, [pc, #144]	@ (8003194 <HAL_UART_MspInit+0x1b4>)
 8003104:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003106:	4b22      	ldr	r3, [pc, #136]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003108:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800310c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003114:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 800311c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003120:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003124:	2200      	movs	r2, #0
 8003126:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003128:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800312e:	4b18      	ldr	r3, [pc, #96]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003134:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003136:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003138:	2200      	movs	r2, #0
 800313a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800313c:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 800313e:	2200      	movs	r2, #0
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003142:	4813      	ldr	r0, [pc, #76]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003144:	f001 f962 	bl	800440c <HAL_DMA_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_UART_MspInit+0x172>
      Error_Handler();
 800314e:	f7ff f939 	bl	80023c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a0e      	ldr	r2, [pc, #56]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 8003156:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <HAL_UART_MspInit+0x1b0>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	2027      	movs	r0, #39	@ 0x27
 8003164:	f001 f91a 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003168:	2027      	movs	r0, #39	@ 0x27
 800316a:	f001 f933 	bl	80043d4 <HAL_NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3730      	adds	r7, #48	@ 0x30
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40004400 	.word	0x40004400
 800317c:	40023800 	.word	0x40023800
 8003180:	40020000 	.word	0x40020000
 8003184:	40004800 	.word	0x40004800
 8003188:	40020400 	.word	0x40020400
 800318c:	40020c00 	.word	0x40020c00
 8003190:	200003bc 	.word	0x200003bc
 8003194:	40026028 	.word	0x40026028

08003198 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <HAL_UART_MspDeInit+0x6c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10a      	bne.n	80031c0 <HAL_UART_MspDeInit+0x28>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80031aa:	4b17      	ldr	r3, [pc, #92]	@ (8003208 <HAL_UART_MspDeInit+0x70>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	4a16      	ldr	r2, [pc, #88]	@ (8003208 <HAL_UART_MspDeInit+0x70>)
 80031b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80031b4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80031b6:	210c      	movs	r1, #12
 80031b8:	4814      	ldr	r0, [pc, #80]	@ (800320c <HAL_UART_MspDeInit+0x74>)
 80031ba:	f001 ff23 	bl	8005004 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80031be:	e01c      	b.n	80031fa <HAL_UART_MspDeInit+0x62>
  else if(huart->Instance==USART3)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <HAL_UART_MspDeInit+0x78>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d117      	bne.n	80031fa <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART3_CLK_DISABLE();
 80031ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <HAL_UART_MspDeInit+0x70>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003208 <HAL_UART_MspDeInit+0x70>)
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80031d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031da:	480e      	ldr	r0, [pc, #56]	@ (8003214 <HAL_UART_MspDeInit+0x7c>)
 80031dc:	f001 ff12 	bl	8005004 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 80031e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031e4:	480c      	ldr	r0, [pc, #48]	@ (8003218 <HAL_UART_MspDeInit+0x80>)
 80031e6:	f001 ff0d 	bl	8005004 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 f9ba 	bl	8004568 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80031f4:	2027      	movs	r0, #39	@ 0x27
 80031f6:	f001 f8fb 	bl	80043f0 <HAL_NVIC_DisableIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40004400 	.word	0x40004400
 8003208:	40023800 	.word	0x40023800
 800320c:	40020000 	.word	0x40020000
 8003210:	40004800 	.word	0x40004800
 8003214:	40020400 	.word	0x40020400
 8003218:	40020c00 	.word	0x40020c00

0800321c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	@ 0x38
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	4b33      	ldr	r3, [pc, #204]	@ (8003300 <HAL_InitTick+0xe4>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	4a32      	ldr	r2, [pc, #200]	@ (8003300 <HAL_InitTick+0xe4>)
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	6413      	str	r3, [r2, #64]	@ 0x40
 800323c:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <HAL_InitTick+0xe4>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003248:	f107 0210 	add.w	r2, r7, #16
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f003 fca2 	bl	8006b9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003262:	f003 fc73 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 8003266:	6378      	str	r0, [r7, #52]	@ 0x34
 8003268:	e004      	b.n	8003274 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800326a:	f003 fc6f 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 800326e:	4603      	mov	r3, r0
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	4a23      	ldr	r2, [pc, #140]	@ (8003304 <HAL_InitTick+0xe8>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	0c9b      	lsrs	r3, r3, #18
 800327e:	3b01      	subs	r3, #1
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003282:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <HAL_InitTick+0xec>)
 8003284:	4a21      	ldr	r2, [pc, #132]	@ (800330c <HAL_InitTick+0xf0>)
 8003286:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <HAL_InitTick+0xec>)
 800328a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800328e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003290:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <HAL_InitTick+0xec>)
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003296:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <HAL_InitTick+0xec>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <HAL_InitTick+0xec>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_InitTick+0xec>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032a8:	4817      	ldr	r0, [pc, #92]	@ (8003308 <HAL_InitTick+0xec>)
 80032aa:	f004 fa7b 	bl	80077a4 <HAL_TIM_Base_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80032b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11b      	bne.n	80032f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80032bc:	4812      	ldr	r0, [pc, #72]	@ (8003308 <HAL_InitTick+0xec>)
 80032be:	f004 fac1 	bl	8007844 <HAL_TIM_Base_Start_IT>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80032c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032d0:	2036      	movs	r0, #54	@ 0x36
 80032d2:	f001 f87f 	bl	80043d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d808      	bhi.n	80032ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032dc:	2200      	movs	r2, #0
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	2036      	movs	r0, #54	@ 0x36
 80032e2:	f001 f85b 	bl	800439c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <HAL_InitTick+0xf4>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e002      	b.n	80032f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3738      	adds	r7, #56	@ 0x38
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	431bde83 	.word	0x431bde83
 8003308:	20000448 	.word	0x20000448
 800330c:	40001000 	.word	0x40001000
 8003310:	20000008 	.word	0x20000008

08003314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <NMI_Handler+0x4>

0800331c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <HardFault_Handler+0x4>

08003324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <MemManage_Handler+0x4>

0800332c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <BusFault_Handler+0x4>

08003334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <UsageFault_Handler+0x4>

0800333c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  HAL_TIM_Base_Start_IT(&htim7);
 8003350:	4803      	ldr	r0, [pc, #12]	@ (8003360 <EXTI0_IRQHandler+0x14>)
 8003352:	f004 fa77 	bl	8007844 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003356:	2001      	movs	r0, #1
 8003358:	f001 ff6a 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200002e4 	.word	0x200002e4

08003364 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003368:	4802      	ldr	r0, [pc, #8]	@ (8003374 <DMA1_Stream1_IRQHandler+0x10>)
 800336a:	f001 fa45 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200003bc 	.word	0x200003bc

08003378 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800337c:	4802      	ldr	r0, [pc, #8]	@ (8003388 <CAN1_TX_IRQHandler+0x10>)
 800337e:	f000 fd01 	bl	8003d84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000210 	.word	0x20000210

0800338c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003390:	4802      	ldr	r0, [pc, #8]	@ (800339c <CAN1_RX0_IRQHandler+0x10>)
 8003392:	f000 fcf7 	bl	8003d84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000210 	.word	0x20000210

080033a0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033a4:	4802      	ldr	r0, [pc, #8]	@ (80033b0 <CAN1_SCE_IRQHandler+0x10>)
 80033a6:	f000 fced 	bl	8003d84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000210 	.word	0x20000210

080033b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033b8:	4802      	ldr	r0, [pc, #8]	@ (80033c4 <USART3_IRQHandler+0x10>)
 80033ba:	f004 fee7 	bl	800818c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000374 	.word	0x20000374

080033c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  if(Timer1 > 0)
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <TIM6_DAC_IRQHandler+0x38>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <TIM6_DAC_IRQHandler+0x18>
    Timer1--;
 80033d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <TIM6_DAC_IRQHandler+0x38>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <TIM6_DAC_IRQHandler+0x38>)
 80033de:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <TIM6_DAC_IRQHandler+0x3c>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <TIM6_DAC_IRQHandler+0x2c>
    Timer2--;
 80033e8:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <TIM6_DAC_IRQHandler+0x3c>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <TIM6_DAC_IRQHandler+0x3c>)
 80033f2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033f4:	4804      	ldr	r0, [pc, #16]	@ (8003408 <TIM6_DAC_IRQHandler+0x40>)
 80033f6:	f004 fa95 	bl	8007924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000440 	.word	0x20000440
 8003404:	20000442 	.word	0x20000442
 8003408:	20000448 	.word	0x20000448

0800340c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003410:	4802      	ldr	r0, [pc, #8]	@ (800341c <TIM7_IRQHandler+0x10>)
 8003412:	f004 fa87 	bl	8007924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200002e4 	.word	0x200002e4

08003420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return 1;
 8003424:	2301      	movs	r3, #1
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_kill>:

int _kill(int pid, int sig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800343a:	f00a fcfb 	bl	800de34 <__errno>
 800343e:	4603      	mov	r3, r0
 8003440:	2216      	movs	r2, #22
 8003442:	601a      	str	r2, [r3, #0]
  return -1;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_exit>:

void _exit (int status)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003458:	f04f 31ff 	mov.w	r1, #4294967295
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffe7 	bl	8003430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003462:	bf00      	nop
 8003464:	e7fd      	b.n	8003462 <_exit+0x12>

08003466 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e00a      	b.n	800348e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003478:	f3af 8000 	nop.w
 800347c:	4601      	mov	r1, r0
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	60ba      	str	r2, [r7, #8]
 8003484:	b2ca      	uxtb	r2, r1
 8003486:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3301      	adds	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	dbf0      	blt.n	8003478 <_read+0x12>
  }

  return len;
 8003496:	687b      	ldr	r3, [r7, #4]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034c8:	605a      	str	r2, [r3, #4]
  return 0;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <_isatty>:

int _isatty(int file)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034e0:	2301      	movs	r3, #1
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003510:	4a14      	ldr	r2, [pc, #80]	@ (8003564 <_sbrk+0x5c>)
 8003512:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <_sbrk+0x60>)
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800351c:	4b13      	ldr	r3, [pc, #76]	@ (800356c <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003524:	4b11      	ldr	r3, [pc, #68]	@ (800356c <_sbrk+0x64>)
 8003526:	4a12      	ldr	r2, [pc, #72]	@ (8003570 <_sbrk+0x68>)
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003538:	f00a fc7c 	bl	800de34 <__errno>
 800353c:	4603      	mov	r3, r0
 800353e:	220c      	movs	r2, #12
 8003540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	e009      	b.n	800355c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003548:	4b08      	ldr	r3, [pc, #32]	@ (800356c <_sbrk+0x64>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <_sbrk+0x64>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	4a05      	ldr	r2, [pc, #20]	@ (800356c <_sbrk+0x64>)
 8003558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20020000 	.word	0x20020000
 8003568:	00000400 	.word	0x00000400
 800356c:	20000490 	.word	0x20000490
 8003570:	20003dd0 	.word	0x20003dd0

08003574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <SystemInit+0x20>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357e:	4a05      	ldr	r2, [pc, #20]	@ (8003594 <SystemInit+0x20>)
 8003580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800359c:	f7ff ffea 	bl	8003574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a0:	480c      	ldr	r0, [pc, #48]	@ (80035d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035a2:	490d      	ldr	r1, [pc, #52]	@ (80035d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035a4:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a8:	e002      	b.n	80035b0 <LoopCopyDataInit>

080035aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ae:	3304      	adds	r3, #4

080035b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b4:	d3f9      	bcc.n	80035aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035b6:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035b8:	4c0a      	ldr	r4, [pc, #40]	@ (80035e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035bc:	e001      	b.n	80035c2 <LoopFillZerobss>

080035be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c0:	3204      	adds	r2, #4

080035c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c4:	d3fb      	bcc.n	80035be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035c6:	f00a fc3b 	bl	800de40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ca:	f7fd ff63 	bl	8001494 <main>
  bx  lr    
 80035ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80035dc:	08010e70 	.word	0x08010e70
  ldr r2, =_sbss
 80035e0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80035e4:	20003dd0 	.word	0x20003dd0

080035e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e8:	e7fe      	b.n	80035e8 <ADC_IRQHandler>
	...

080035ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f0:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <HAL_Init+0x40>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <HAL_Init+0x40>)
 80035f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <HAL_Init+0x40>)
 8003602:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	@ (800362c <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a07      	ldr	r2, [pc, #28]	@ (800362c <HAL_Init+0x40>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 feb6 	bl	8004386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	2000      	movs	r0, #0
 800361c:	f7ff fdfe 	bl	800321c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003620:	f7ff fb9e 	bl	8002d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00

08003630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_IncTick+0x20>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <HAL_IncTick+0x24>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4413      	add	r3, r2
 8003640:	4a04      	ldr	r2, [pc, #16]	@ (8003654 <HAL_IncTick+0x24>)
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	2000000c 	.word	0x2000000c
 8003654:	20000494 	.word	0x20000494

08003658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return uwTick;
 800365c:	4b03      	ldr	r3, [pc, #12]	@ (800366c <HAL_GetTick+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000494 	.word	0x20000494

08003670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff ffee 	bl	8003658 <HAL_GetTick>
 800367c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d005      	beq.n	8003696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <HAL_Delay+0x44>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003696:	bf00      	nop
 8003698:	f7ff ffde 	bl	8003658 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d8f7      	bhi.n	8003698 <HAL_Delay+0x28>
  {
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c

080036b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0ed      	b.n	80038a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fb6a 	bl	8002db0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ec:	f7ff ffb4 	bl	8003658 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036f2:	e012      	b.n	800371a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036f4:	f7ff ffb0 	bl	8003658 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b0a      	cmp	r3, #10
 8003700:	d90b      	bls.n	800371a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0c5      	b.n	80038a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0e5      	beq.n	80036f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0202 	bic.w	r2, r2, #2
 8003736:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003738:	f7ff ff8e 	bl	8003658 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800373e:	e012      	b.n	8003766 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003740:	f7ff ff8a 	bl	8003658 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b0a      	cmp	r3, #10
 800374c:	d90b      	bls.n	8003766 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2205      	movs	r2, #5
 800375e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e09f      	b.n	80038a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7e1b      	ldrb	r3, [r3, #24]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d108      	bne.n	800378e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e007      	b.n	800379e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7e5b      	ldrb	r3, [r3, #25]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e007      	b.n	80037c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e9b      	ldrb	r3, [r3, #26]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e007      	b.n	80037f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0220 	bic.w	r2, r2, #32
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7edb      	ldrb	r3, [r3, #27]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0210 	bic.w	r2, r2, #16
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e007      	b.n	800381c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0210 	orr.w	r2, r2, #16
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7f1b      	ldrb	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d108      	bne.n	8003836 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0208 	orr.w	r2, r2, #8
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e007      	b.n	8003846 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7f5b      	ldrb	r3, [r3, #29]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d108      	bne.n	8003860 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0204 	orr.w	r2, r2, #4
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e007      	b.n	8003870 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d003      	beq.n	80038d0 <HAL_CAN_ConfigFilter+0x20>
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f040 80be 	bne.w	8003a4c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80038d0:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <HAL_CAN_ConfigFilter+0x1b8>)
 80038d2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038ea:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	431a      	orrs	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2201      	movs	r2, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d123      	bne.n	800397a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	401a      	ands	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003954:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3248      	adds	r2, #72	@ 0x48
 800395a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800396e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003970:	6939      	ldr	r1, [r7, #16]
 8003972:	3348      	adds	r3, #72	@ 0x48
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d122      	bne.n	80039c8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	431a      	orrs	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	3248      	adds	r2, #72	@ 0x48
 80039a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	3348      	adds	r3, #72	@ 0x48
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80039e2:	e007      	b.n	80039f4 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003a0e:	e007      	b.n	8003a20 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e006      	b.n	8003a5a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40006400 	.word	0x40006400

08003a6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d12e      	bne.n	8003ade <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a98:	f7ff fdde 	bl	8003658 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a9e:	e012      	b.n	8003ac6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003aa0:	f7ff fdda 	bl	8003658 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b0a      	cmp	r3, #10
 8003aac:	d90b      	bls.n	8003ac6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2205      	movs	r2, #5
 8003abe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e012      	b.n	8003aec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e006      	b.n	8003aec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b08:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d003      	beq.n	8003b18 <HAL_CAN_GetRxMessage+0x24>
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	f040 8103 	bne.w	8003d1e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d116      	bne.n	8003b5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0f7      	b.n	8003d2c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0e8      	b.n	8003d2c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	331b      	adds	r3, #27
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	4413      	add	r3, r2
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0204 	and.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10c      	bne.n	8003b92 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	331b      	adds	r3, #27
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	4413      	add	r3, r2
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	0d5b      	lsrs	r3, r3, #21
 8003b88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e00b      	b.n	8003baa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	331b      	adds	r3, #27
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	4413      	add	r3, r2
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	331b      	adds	r3, #27
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4413      	add	r3, r2
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0202 	and.w	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	331b      	adds	r3, #27
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	4413      	add	r3, r2
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e00b      	b.n	8003bf8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	331b      	adds	r3, #27
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4413      	add	r3, r2
 8003bec:	3304      	adds	r3, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	331b      	adds	r3, #27
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	331b      	adds	r3, #27
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0a1a      	lsrs	r2, r3, #8
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0c1a      	lsrs	r2, r3, #16
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	0e1a      	lsrs	r2, r3, #24
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	3303      	adds	r3, #3
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	0a1a      	lsrs	r2, r3, #8
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3305      	adds	r3, #5
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0c1a      	lsrs	r2, r3, #16
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	3306      	adds	r3, #6
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0e1a      	lsrs	r2, r3, #24
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3307      	adds	r3, #7
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d108      	bne.n	8003d0a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0220 	orr.w	r2, r2, #32
 8003d06:	60da      	str	r2, [r3, #12]
 8003d08:	e007      	b.n	8003d1a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0220 	orr.w	r2, r2, #32
 8003d18:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e006      	b.n	8003d2c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d48:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d002      	beq.n	8003d56 <HAL_CAN_ActivateNotification+0x1e>
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d109      	bne.n	8003d6a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6959      	ldr	r1, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e006      	b.n	8003d78 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	@ 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d07c      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d023      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f983 	bl	80040f2 <HAL_CAN_TxMailbox0CompleteCallback>
 8003dec:	e016      	b.n	8003e1c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	e00c      	b.n	8003e1c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e14:	e002      	b.n	8003e1c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f989 	bl	800412e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d024      	beq.n	8003e70 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f963 	bl	8004106 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e40:	e016      	b.n	8003e70 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e54:	e00c      	b.n	8003e70 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e68:	e002      	b.n	8003e70 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f969 	bl	8004142 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d024      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f943 	bl	800411a <HAL_CAN_TxMailbox2CompleteCallback>
 8003e94:	e016      	b.n	8003ec4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea8:	e00c      	b.n	8003ec4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebc:	e002      	b.n	8003ec4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f949 	bl	8004156 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f930 	bl	800416a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe f9fc 	bl	8002320 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f912 	bl	8004192 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8f9 	bl	800417e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d006      	beq.n	8003fae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8fc 	bl	80041a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8f5 	bl	80041ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d07b      	beq.n	80040d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d072      	beq.n	80040ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403e:	2b00      	cmp	r3, #0
 8004040:	d043      	beq.n	80040ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004048:	2b00      	cmp	r3, #0
 800404a:	d03e      	beq.n	80040ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004052:	2b60      	cmp	r3, #96	@ 0x60
 8004054:	d02b      	beq.n	80040ae <HAL_CAN_IRQHandler+0x32a>
 8004056:	2b60      	cmp	r3, #96	@ 0x60
 8004058:	d82e      	bhi.n	80040b8 <HAL_CAN_IRQHandler+0x334>
 800405a:	2b50      	cmp	r3, #80	@ 0x50
 800405c:	d022      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x320>
 800405e:	2b50      	cmp	r3, #80	@ 0x50
 8004060:	d82a      	bhi.n	80040b8 <HAL_CAN_IRQHandler+0x334>
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d019      	beq.n	800409a <HAL_CAN_IRQHandler+0x316>
 8004066:	2b40      	cmp	r3, #64	@ 0x40
 8004068:	d826      	bhi.n	80040b8 <HAL_CAN_IRQHandler+0x334>
 800406a:	2b30      	cmp	r3, #48	@ 0x30
 800406c:	d010      	beq.n	8004090 <HAL_CAN_IRQHandler+0x30c>
 800406e:	2b30      	cmp	r3, #48	@ 0x30
 8004070:	d822      	bhi.n	80040b8 <HAL_CAN_IRQHandler+0x334>
 8004072:	2b10      	cmp	r3, #16
 8004074:	d002      	beq.n	800407c <HAL_CAN_IRQHandler+0x2f8>
 8004076:	2b20      	cmp	r3, #32
 8004078:	d005      	beq.n	8004086 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800407a:	e01d      	b.n	80040b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	f043 0308 	orr.w	r3, r3, #8
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004084:	e019      	b.n	80040ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800408e:	e014      	b.n	80040ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004098:	e00f      	b.n	80040ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80040a2:	e00a      	b.n	80040ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80040ac:	e005      	b.n	80040ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80040b6:	e000      	b.n	80040ba <HAL_CAN_IRQHandler+0x336>
            break;
 80040b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80040c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2204      	movs	r2, #4
 80040d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f872 	bl	80041ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040ea:	bf00      	nop
 80040ec:	3728      	adds	r7, #40	@ 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <__NVIC_SetPriorityGrouping+0x44>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004200:	4013      	ands	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800420c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004216:	4a04      	ldr	r2, [pc, #16]	@ (8004228 <__NVIC_SetPriorityGrouping+0x44>)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	60d3      	str	r3, [r2, #12]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <__NVIC_GetPriorityGrouping+0x18>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 0307 	and.w	r3, r3, #7
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004256:	2b00      	cmp	r3, #0
 8004258:	db0b      	blt.n	8004272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4907      	ldr	r1, [pc, #28]	@ (8004280 <__NVIC_EnableIRQ+0x38>)
 8004262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	2001      	movs	r0, #1
 800426a:	fa00 f202 	lsl.w	r2, r0, r2
 800426e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e100 	.word	0xe000e100

08004284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db12      	blt.n	80042bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	490a      	ldr	r1, [pc, #40]	@ (80042c8 <__NVIC_DisableIRQ+0x44>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	3320      	adds	r3, #32
 80042ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042b0:	f3bf 8f4f 	dsb	sy
}
 80042b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042b6:	f3bf 8f6f 	isb	sy
}
 80042ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	@ (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	@ (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
         );
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	@ 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff28 	bl	80041e4 <__NVIC_SetPriorityGrouping>
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043ae:	f7ff ff3d 	bl	800422c <__NVIC_GetPriorityGrouping>
 80043b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	6978      	ldr	r0, [r7, #20]
 80043ba:	f7ff ffb1 	bl	8004320 <NVIC_EncodePriority>
 80043be:	4602      	mov	r2, r0
 80043c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ff80 	bl	80042cc <__NVIC_SetPriority>
}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff ff30 	bl	8004248 <__NVIC_EnableIRQ>
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ff40 	bl	8004284 <__NVIC_DisableIRQ>
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7ff f91e 	bl	8003658 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e099      	b.n	800455c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004448:	e00f      	b.n	800446a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800444a:	f7ff f905 	bl	8003658 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b05      	cmp	r3, #5
 8004456:	d908      	bls.n	800446a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2203      	movs	r2, #3
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e078      	b.n	800455c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e8      	bne.n	800444a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4b38      	ldr	r3, [pc, #224]	@ (8004564 <HAL_DMA_Init+0x158>)
 8004484:	4013      	ands	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d107      	bne.n	80044d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	4313      	orrs	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0307 	bic.w	r3, r3, #7
 80044ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d117      	bne.n	800452e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00e      	beq.n	800452e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fb5f 	bl	8004bd4 <DMA_CheckFifoParam>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2240      	movs	r2, #64	@ 0x40
 8004520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800452a:	2301      	movs	r3, #1
 800452c:	e016      	b.n	800455c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fb16 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 800453c:	4603      	mov	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	223f      	movs	r2, #63	@ 0x3f
 8004546:	409a      	lsls	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	f010803f 	.word	0xf010803f

08004568 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e050      	b.n	800461c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d101      	bne.n	800458a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
 8004588:	e048      	b.n	800461c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2221      	movs	r2, #33	@ 0x21
 80045c8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 facc 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 80045d0:	4603      	mov	r3, r0
 80045d2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	223f      	movs	r2, #63	@ 0x3f
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_DMA_Start_IT+0x26>
 8004646:	2302      	movs	r3, #2
 8004648:	e040      	b.n	80046cc <HAL_DMA_Start_IT+0xa8>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d12f      	bne.n	80046be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fa4a 	bl	8004b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467c:	223f      	movs	r2, #63	@ 0x3f
 800467e:	409a      	lsls	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0216 	orr.w	r2, r2, #22
 8004692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e005      	b.n	80046ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046e2:	f7fe ffb9 	bl	8003658 <HAL_GetTick>
 80046e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d008      	beq.n	8004706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2280      	movs	r2, #128	@ 0x80
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e052      	b.n	80047ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0216 	bic.w	r2, r2, #22
 8004714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <HAL_DMA_Abort+0x62>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0208 	bic.w	r2, r2, #8
 8004744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004756:	e013      	b.n	8004780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004758:	f7fe ff7e 	bl	8003658 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b05      	cmp	r3, #5
 8004764:	d90c      	bls.n	8004780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2203      	movs	r2, #3
 8004770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e015      	b.n	80047ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e4      	bne.n	8004758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	223f      	movs	r2, #63	@ 0x3f
 8004794:	409a      	lsls	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d004      	beq.n	80047d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2280      	movs	r2, #128	@ 0x80
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00c      	b.n	80047ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2205      	movs	r2, #5
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004804:	4b8e      	ldr	r3, [pc, #568]	@ (8004a40 <HAL_DMA_IRQHandler+0x248>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a8e      	ldr	r2, [pc, #568]	@ (8004a44 <HAL_DMA_IRQHandler+0x24c>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	2208      	movs	r2, #8
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	2208      	movs	r2, #8
 8004852:	409a      	lsls	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	2201      	movs	r2, #1
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	2204      	movs	r2, #4
 80048a0:	409a      	lsls	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048bc:	2204      	movs	r2, #4
 80048be:	409a      	lsls	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	2210      	movs	r2, #16
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d043      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03c      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	2210      	movs	r2, #16
 80048f4:	409a      	lsls	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d018      	beq.n	800493a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e01f      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e016      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0208 	bic.w	r2, r2, #8
 8004956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496c:	2220      	movs	r2, #32
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 808f 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8087 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498e:	2220      	movs	r2, #32
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d136      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0216 	bic.w	r2, r2, #22
 80049b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x1da>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0208 	bic.w	r2, r2, #8
 80049e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	223f      	movs	r2, #63	@ 0x3f
 80049e8:	409a      	lsls	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d07e      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
        }
        return;
 8004a0e:	e079      	b.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01d      	beq.n	8004a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e02c      	b.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
 8004a3e:	bf00      	nop
 8004a40:	20000004 	.word	0x20000004
 8004a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d023      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4798      	blx	r3
 8004a58:	e01e      	b.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10f      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0210 	bic.w	r2, r2, #16
 8004a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d032      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2205      	movs	r2, #5
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d307      	bcc.n	8004ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f2      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x2cc>
 8004ade:	e000      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
 8004b02:	e000      	b.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b04:	bf00      	nop
    }
  }
}
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b40      	cmp	r3, #64	@ 0x40
 8004b38:	d108      	bne.n	8004b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b4a:	e007      	b.n	8004b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	3b10      	subs	r3, #16
 8004b78:	4a14      	ldr	r2, [pc, #80]	@ (8004bcc <DMA_CalcBaseAndBitshift+0x64>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b82:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d909      	bls.n	8004baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ba8:	e007      	b.n	8004bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	aaaaaaab 	.word	0xaaaaaaab
 8004bd0:	08010a4c 	.word	0x08010a4c

08004bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11f      	bne.n	8004c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d856      	bhi.n	8004ca2 <DMA_CheckFifoParam+0xce>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <DMA_CheckFifoParam+0x28>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1f 	.word	0x08004c1f
 8004c04:	08004c0d 	.word	0x08004c0d
 8004c08:	08004ca3 	.word	0x08004ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d046      	beq.n	8004ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1c:	e043      	b.n	8004ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c26:	d140      	bne.n	8004caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e03d      	b.n	8004caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c36:	d121      	bne.n	8004c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d837      	bhi.n	8004cae <DMA_CheckFifoParam+0xda>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <DMA_CheckFifoParam+0x70>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c5b 	.word	0x08004c5b
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004c6d 	.word	0x08004c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e030      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d025      	beq.n	8004cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e022      	b.n	8004cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c74:	d11f      	bne.n	8004cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c7a:	e01c      	b.n	8004cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d903      	bls.n	8004c8a <DMA_CheckFifoParam+0xb6>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d003      	beq.n	8004c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c88:	e018      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8e:	e015      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e00b      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e00a      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e008      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004caa:	bf00      	nop
 8004cac:	e006      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e004      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e002      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
    }
  } 
  
  return status; 
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	@ 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e16b      	b.n	8004fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ce8:	2201      	movs	r2, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	f040 815a 	bne.w	8004fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d005      	beq.n	8004d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d130      	bne.n	8004d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2203      	movs	r2, #3
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4013      	ands	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d54:	2201      	movs	r2, #1
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 0201 	and.w	r2, r3, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d017      	beq.n	8004dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	2203      	movs	r2, #3
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d123      	bne.n	8004e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	08da      	lsrs	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3208      	adds	r2, #8
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80b4 	beq.w	8004fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	4b60      	ldr	r3, [pc, #384]	@ (8004fd8 <HAL_GPIO_Init+0x30c>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd8 <HAL_GPIO_Init+0x30c>)
 8004e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e62:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd8 <HAL_GPIO_Init+0x30c>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8004fdc <HAL_GPIO_Init+0x310>)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	3302      	adds	r3, #2
 8004e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_GPIO_Init+0x314>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02b      	beq.n	8004ef2 <HAL_GPIO_Init+0x226>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a51      	ldr	r2, [pc, #324]	@ (8004fe4 <HAL_GPIO_Init+0x318>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d025      	beq.n	8004eee <HAL_GPIO_Init+0x222>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a50      	ldr	r2, [pc, #320]	@ (8004fe8 <HAL_GPIO_Init+0x31c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <HAL_GPIO_Init+0x21e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a4f      	ldr	r2, [pc, #316]	@ (8004fec <HAL_GPIO_Init+0x320>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d019      	beq.n	8004ee6 <HAL_GPIO_Init+0x21a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff0 <HAL_GPIO_Init+0x324>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x216>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff4 <HAL_GPIO_Init+0x328>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x212>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8004ff8 <HAL_GPIO_Init+0x32c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x20e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8004ffc <HAL_GPIO_Init+0x330>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x20a>
 8004ed2:	2307      	movs	r3, #7
 8004ed4:	e00e      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	e00c      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004eda:	2306      	movs	r3, #6
 8004edc:	e00a      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004ede:	2305      	movs	r3, #5
 8004ee0:	e008      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	e006      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e004      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e002      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_GPIO_Init+0x228>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	f002 0203 	and.w	r2, r2, #3
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	4093      	lsls	r3, r2
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f04:	4935      	ldr	r1, [pc, #212]	@ (8004fdc <HAL_GPIO_Init+0x310>)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f12:	4b3b      	ldr	r3, [pc, #236]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f36:	4a32      	ldr	r2, [pc, #200]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f3c:	4b30      	ldr	r3, [pc, #192]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43db      	mvns	r3, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f60:	4a27      	ldr	r2, [pc, #156]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f66:	4b26      	ldr	r3, [pc, #152]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f90:	4b1b      	ldr	r3, [pc, #108]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fb4:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <HAL_GPIO_Init+0x334>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	f67f ae90 	bls.w	8004ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	@ 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40020000 	.word	0x40020000
 8004fe4:	40020400 	.word	0x40020400
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40020c00 	.word	0x40020c00
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40021400 	.word	0x40021400
 8004ff8:	40021800 	.word	0x40021800
 8004ffc:	40021c00 	.word	0x40021c00
 8005000:	40013c00 	.word	0x40013c00

08005004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e0cd      	b.n	80051bc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005020:	2201      	movs	r2, #1
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	f040 80bd 	bne.w	80051b6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800503c:	4a65      	ldr	r2, [pc, #404]	@ (80051d4 <HAL_GPIO_DeInit+0x1d0>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005048:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a5d      	ldr	r2, [pc, #372]	@ (80051d8 <HAL_GPIO_DeInit+0x1d4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02b      	beq.n	80050be <HAL_GPIO_DeInit+0xba>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a5c      	ldr	r2, [pc, #368]	@ (80051dc <HAL_GPIO_DeInit+0x1d8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d025      	beq.n	80050ba <HAL_GPIO_DeInit+0xb6>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a5b      	ldr	r2, [pc, #364]	@ (80051e0 <HAL_GPIO_DeInit+0x1dc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01f      	beq.n	80050b6 <HAL_GPIO_DeInit+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a5a      	ldr	r2, [pc, #360]	@ (80051e4 <HAL_GPIO_DeInit+0x1e0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d019      	beq.n	80050b2 <HAL_GPIO_DeInit+0xae>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a59      	ldr	r2, [pc, #356]	@ (80051e8 <HAL_GPIO_DeInit+0x1e4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_GPIO_DeInit+0xaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a58      	ldr	r2, [pc, #352]	@ (80051ec <HAL_GPIO_DeInit+0x1e8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00d      	beq.n	80050aa <HAL_GPIO_DeInit+0xa6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a57      	ldr	r2, [pc, #348]	@ (80051f0 <HAL_GPIO_DeInit+0x1ec>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <HAL_GPIO_DeInit+0xa2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a56      	ldr	r2, [pc, #344]	@ (80051f4 <HAL_GPIO_DeInit+0x1f0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <HAL_GPIO_DeInit+0x9e>
 800509e:	2307      	movs	r3, #7
 80050a0:	e00e      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050a2:	2308      	movs	r3, #8
 80050a4:	e00c      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050a6:	2306      	movs	r3, #6
 80050a8:	e00a      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050aa:	2305      	movs	r3, #5
 80050ac:	e008      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050ae:	2304      	movs	r3, #4
 80050b0:	e006      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050b2:	2303      	movs	r3, #3
 80050b4:	e004      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e002      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_GPIO_DeInit+0xbc>
 80050be:	2300      	movs	r3, #0
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	f002 0203 	and.w	r2, r2, #3
 80050c6:	0092      	lsls	r2, r2, #2
 80050c8:	4093      	lsls	r3, r2
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d132      	bne.n	8005136 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050d0:	4b49      	ldr	r3, [pc, #292]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	4947      	ldr	r1, [pc, #284]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050da:	4013      	ands	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050de:	4b46      	ldr	r3, [pc, #280]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	4944      	ldr	r1, [pc, #272]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050ec:	4b42      	ldr	r3, [pc, #264]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	4940      	ldr	r1, [pc, #256]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050fa:	4b3f      	ldr	r3, [pc, #252]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	43db      	mvns	r3, r3
 8005102:	493d      	ldr	r1, [pc, #244]	@ (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 8005104:	4013      	ands	r3, r2
 8005106:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	220f      	movs	r2, #15
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005118:	4a2e      	ldr	r2, [pc, #184]	@ (80051d4 <HAL_GPIO_DeInit+0x1d0>)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	3302      	adds	r3, #2
 8005120:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	43da      	mvns	r2, r3
 8005128:	482a      	ldr	r0, [pc, #168]	@ (80051d4 <HAL_GPIO_DeInit+0x1d0>)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	400a      	ands	r2, r1
 8005130:	3302      	adds	r3, #2
 8005132:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	2103      	movs	r1, #3
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	08da      	lsrs	r2, r3, #3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3208      	adds	r2, #8
 8005154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	08d2      	lsrs	r2, r2, #3
 800516c:	4019      	ands	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3208      	adds	r2, #8
 8005172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	2103      	movs	r1, #3
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	401a      	ands	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	2101      	movs	r1, #1
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	fa01 f303 	lsl.w	r3, r1, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	401a      	ands	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2103      	movs	r1, #3
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	401a      	ands	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3301      	adds	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b0f      	cmp	r3, #15
 80051c0:	f67f af2e 	bls.w	8005020 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40013800 	.word	0x40013800
 80051d8:	40020000 	.word	0x40020000
 80051dc:	40020400 	.word	0x40020400
 80051e0:	40020800 	.word	0x40020800
 80051e4:	40020c00 	.word	0x40020c00
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40021400 	.word	0x40021400
 80051f0:	40021800 	.word	0x40021800
 80051f4:	40021c00 	.word	0x40021c00
 80051f8:	40013c00 	.word	0x40013c00

080051fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	807b      	strh	r3, [r7, #2]
 8005208:	4613      	mov	r3, r2
 800520a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800520c:	787b      	ldrb	r3, [r7, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005212:	887a      	ldrh	r2, [r7, #2]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005218:	e003      	b.n	8005222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800521a:	887b      	ldrh	r3, [r7, #2]
 800521c:	041a      	lsls	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	619a      	str	r2, [r3, #24]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800523a:	4b08      	ldr	r3, [pc, #32]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005246:	4a05      	ldr	r2, [pc, #20]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f806 	bl	8005260 <HAL_GPIO_EXTI_Callback>
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40013c00 	.word	0x40013c00

08005260 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e12b      	b.n	80054e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fd fde6 	bl	8002e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2224      	movs	r2, #36	@ 0x24
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0201 	bic.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052dc:	f001 fc36 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 80052e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4a81      	ldr	r2, [pc, #516]	@ (80054ec <HAL_I2C_Init+0x274>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d807      	bhi.n	80052fc <HAL_I2C_Init+0x84>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a80      	ldr	r2, [pc, #512]	@ (80054f0 <HAL_I2C_Init+0x278>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bf94      	ite	ls
 80052f4:	2301      	movls	r3, #1
 80052f6:	2300      	movhi	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e006      	b.n	800530a <HAL_I2C_Init+0x92>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a7d      	ldr	r2, [pc, #500]	@ (80054f4 <HAL_I2C_Init+0x27c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	bf94      	ite	ls
 8005304:	2301      	movls	r3, #1
 8005306:	2300      	movhi	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e0e7      	b.n	80054e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a78      	ldr	r2, [pc, #480]	@ (80054f8 <HAL_I2C_Init+0x280>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	0c9b      	lsrs	r3, r3, #18
 800531c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4a6a      	ldr	r2, [pc, #424]	@ (80054ec <HAL_I2C_Init+0x274>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d802      	bhi.n	800534c <HAL_I2C_Init+0xd4>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3301      	adds	r3, #1
 800534a:	e009      	b.n	8005360 <HAL_I2C_Init+0xe8>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	4a69      	ldr	r2, [pc, #420]	@ (80054fc <HAL_I2C_Init+0x284>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	099b      	lsrs	r3, r3, #6
 800535e:	3301      	adds	r3, #1
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	430b      	orrs	r3, r1
 8005366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005372:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	495c      	ldr	r1, [pc, #368]	@ (80054ec <HAL_I2C_Init+0x274>)
 800537c:	428b      	cmp	r3, r1
 800537e:	d819      	bhi.n	80053b4 <HAL_I2C_Init+0x13c>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1e59      	subs	r1, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fbb1 f3f3 	udiv	r3, r1, r3
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005394:	400b      	ands	r3, r1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_I2C_Init+0x138>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1e59      	subs	r1, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a8:	3301      	adds	r3, #1
 80053aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ae:	e051      	b.n	8005454 <HAL_I2C_Init+0x1dc>
 80053b0:	2304      	movs	r3, #4
 80053b2:	e04f      	b.n	8005454 <HAL_I2C_Init+0x1dc>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d111      	bne.n	80053e0 <HAL_I2C_Init+0x168>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1e58      	subs	r0, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	440b      	add	r3, r1
 80053ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e012      	b.n	8005406 <HAL_I2C_Init+0x18e>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1e58      	subs	r0, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6859      	ldr	r1, [r3, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	0099      	lsls	r1, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053f6:	3301      	adds	r3, #1
 80053f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_Init+0x196>
 800540a:	2301      	movs	r3, #1
 800540c:	e022      	b.n	8005454 <HAL_I2C_Init+0x1dc>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <HAL_I2C_Init+0x1bc>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1e58      	subs	r0, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	440b      	add	r3, r1
 8005424:	fbb0 f3f3 	udiv	r3, r0, r3
 8005428:	3301      	adds	r3, #1
 800542a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005432:	e00f      	b.n	8005454 <HAL_I2C_Init+0x1dc>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1e58      	subs	r0, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6859      	ldr	r1, [r3, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	0099      	lsls	r1, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	fbb0 f3f3 	udiv	r3, r0, r3
 800544a:	3301      	adds	r3, #1
 800544c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	6809      	ldr	r1, [r1, #0]
 8005458:	4313      	orrs	r3, r2
 800545a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6911      	ldr	r1, [r2, #16]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68d2      	ldr	r2, [r2, #12]
 800548e:	4311      	orrs	r1, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	000186a0 	.word	0x000186a0
 80054f0:	001e847f 	.word	0x001e847f
 80054f4:	003d08ff 	.word	0x003d08ff
 80054f8:	431bde83 	.word	0x431bde83
 80054fc:	10624dd3 	.word	0x10624dd3

08005500 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	461a      	mov	r2, r3
 800550c:	460b      	mov	r3, r1
 800550e:	817b      	strh	r3, [r7, #10]
 8005510:	4613      	mov	r3, r2
 8005512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005514:	f7fe f8a0 	bl	8003658 <HAL_GetTick>
 8005518:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b20      	cmp	r3, #32
 8005524:	f040 80e0 	bne.w	80056e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	2319      	movs	r3, #25
 800552e:	2201      	movs	r2, #1
 8005530:	4970      	ldr	r1, [pc, #448]	@ (80056f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fc64 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
 8005540:	e0d3      	b.n	80056ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_I2C_Master_Transmit+0x50>
 800554c:	2302      	movs	r3, #2
 800554e:	e0cc      	b.n	80056ea <HAL_I2C_Master_Transmit+0x1ea>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d007      	beq.n	8005576 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2221      	movs	r2, #33	@ 0x21
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2210      	movs	r2, #16
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	893a      	ldrh	r2, [r7, #8]
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a50      	ldr	r2, [pc, #320]	@ (80056f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055b8:	8979      	ldrh	r1, [r7, #10]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a3a      	ldr	r2, [r7, #32]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 face 	bl	8005b60 <I2C_MasterRequestWrite>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e08d      	b.n	80056ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055e4:	e066      	b.n	80056b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	6a39      	ldr	r1, [r7, #32]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fd22 	bl	8006034 <I2C_WaitOnTXEFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00d      	beq.n	8005612 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d107      	bne.n	800560e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800560c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06b      	b.n	80056ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b04      	cmp	r3, #4
 800564e:	d11b      	bne.n	8005688 <HAL_I2C_Master_Transmit+0x188>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	6a39      	ldr	r1, [r7, #32]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fd19 	bl	80060c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	2b04      	cmp	r3, #4
 800569e:	d107      	bne.n	80056b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e01a      	b.n	80056ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d194      	bne.n	80055e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	00100002 	.word	0x00100002
 80056f8:	ffff0000 	.word	0xffff0000

080056fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	@ 0x30
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	461a      	mov	r2, r3
 8005708:	460b      	mov	r3, r1
 800570a:	817b      	strh	r3, [r7, #10]
 800570c:	4613      	mov	r3, r2
 800570e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005710:	f7fd ffa2 	bl	8003658 <HAL_GetTick>
 8005714:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b20      	cmp	r3, #32
 8005720:	f040 8217 	bne.w	8005b52 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	2319      	movs	r3, #25
 800572a:	2201      	movs	r2, #1
 800572c:	497c      	ldr	r1, [pc, #496]	@ (8005920 <HAL_I2C_Master_Receive+0x224>)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fb66 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	e20a      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_I2C_Master_Receive+0x50>
 8005748:	2302      	movs	r3, #2
 800574a:	e203      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d007      	beq.n	8005772 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2222      	movs	r2, #34	@ 0x22
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2210      	movs	r2, #16
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	893a      	ldrh	r2, [r7, #8]
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005924 <HAL_I2C_Master_Receive+0x228>)
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057b4:	8979      	ldrh	r1, [r7, #10]
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fa52 	bl	8005c64 <I2C_MasterRequestRead>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e1c4      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	623b      	str	r3, [r7, #32]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e198      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d11b      	bne.n	800583a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e178      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583e:	2b02      	cmp	r3, #2
 8005840:	d11b      	bne.n	800587a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	e158      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058a0:	e144      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	f200 80f1 	bhi.w	8005a8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d123      	bne.n	80058fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fc4b 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e145      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058fa:	e117      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005900:	2b02      	cmp	r3, #2
 8005902:	d14e      	bne.n	80059a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	2200      	movs	r2, #0
 800590c:	4906      	ldr	r1, [pc, #24]	@ (8005928 <HAL_I2C_Master_Receive+0x22c>)
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fa76 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e11a      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
 800591e:	bf00      	nop
 8005920:	00100002 	.word	0x00100002
 8005924:	ffff0000 	.word	0xffff0000
 8005928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059a0:	e0c4      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	2200      	movs	r2, #0
 80059aa:	496c      	ldr	r1, [pc, #432]	@ (8005b5c <HAL_I2C_Master_Receive+0x460>)
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fa27 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0cb      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	2200      	movs	r2, #0
 8005a06:	4955      	ldr	r1, [pc, #340]	@ (8005b5c <HAL_I2C_Master_Receive+0x460>)
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f9f9 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e09d      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a8c:	e04e      	b.n	8005b2c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fb5e 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e058      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d124      	bne.n	8005b2c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d107      	bne.n	8005afa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f aeb6 	bne.w	80058a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e000      	b.n	8005b54 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
  }
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	@ 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	00010004 	.word	0x00010004

08005b60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d006      	beq.n	8005b8a <I2C_MasterRequestWrite+0x2a>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d003      	beq.n	8005b8a <I2C_MasterRequestWrite+0x2a>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b88:	d108      	bne.n	8005b9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e00b      	b.n	8005bb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba0:	2b12      	cmp	r3, #18
 8005ba2:	d107      	bne.n	8005bb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f91d 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bda:	d103      	bne.n	8005be4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e035      	b.n	8005c54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bf0:	d108      	bne.n	8005c04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bf2:	897b      	ldrh	r3, [r7, #10]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	e01b      	b.n	8005c3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c04:	897b      	ldrh	r3, [r7, #10]
 8005c06:	11db      	asrs	r3, r3, #7
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0306 	and.w	r3, r3, #6
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f063 030f 	orn	r3, r3, #15
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	490e      	ldr	r1, [pc, #56]	@ (8005c5c <I2C_MasterRequestWrite+0xfc>)
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f966 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e010      	b.n	8005c54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c32:	897b      	ldrh	r3, [r7, #10]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4907      	ldr	r1, [pc, #28]	@ (8005c60 <I2C_MasterRequestWrite+0x100>)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f956 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	00010008 	.word	0x00010008
 8005c60:	00010002 	.word	0x00010002

08005c64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	460b      	mov	r3, r1
 8005c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d006      	beq.n	8005c9e <I2C_MasterRequestRead+0x3a>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d003      	beq.n	8005c9e <I2C_MasterRequestRead+0x3a>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c9c:	d108      	bne.n	8005cb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e00b      	b.n	8005cc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb4:	2b11      	cmp	r3, #17
 8005cb6:	d107      	bne.n	8005cc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f893 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cee:	d103      	bne.n	8005cf8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e079      	b.n	8005df0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d04:	d108      	bne.n	8005d18 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e05f      	b.n	8005dd8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d18:	897b      	ldrh	r3, [r7, #10]
 8005d1a:	11db      	asrs	r3, r3, #7
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0306 	and.w	r3, r3, #6
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f063 030f 	orn	r3, r3, #15
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4930      	ldr	r1, [pc, #192]	@ (8005df8 <I2C_MasterRequestRead+0x194>)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f8dc 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e054      	b.n	8005df0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d46:	897b      	ldrh	r3, [r7, #10]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4929      	ldr	r1, [pc, #164]	@ (8005dfc <I2C_MasterRequestRead+0x198>)
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f8cc 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e044      	b.n	8005df0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d8a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f831 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db2:	d103      	bne.n	8005dbc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e017      	b.n	8005df0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005dc0:	897b      	ldrh	r3, [r7, #10]
 8005dc2:	11db      	asrs	r3, r3, #7
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0306 	and.w	r3, r3, #6
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f063 030e 	orn	r3, r3, #14
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4907      	ldr	r1, [pc, #28]	@ (8005dfc <I2C_MasterRequestRead+0x198>)
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f888 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	00010008 	.word	0x00010008
 8005dfc:	00010002 	.word	0x00010002

08005e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e10:	e048      	b.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d044      	beq.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1a:	f7fd fc1d 	bl	8003658 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d139      	bne.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d10d      	bne.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	43da      	mvns	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	e00c      	b.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	43da      	mvns	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d116      	bne.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e023      	b.n	8005eec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10d      	bne.n	8005eca <I2C_WaitOnFlagUntilTimeout+0xca>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	e00c      	b.n	8005ee4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d093      	beq.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f02:	e071      	b.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f12:	d123      	bne.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	f043 0204 	orr.w	r2, r3, #4
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e067      	b.n	800602c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d041      	beq.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f64:	f7fd fb78 	bl	8003658 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d302      	bcc.n	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d136      	bne.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d10c      	bne.n	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	e00b      	b.n	8005fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	43da      	mvns	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e021      	b.n	800602c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d10c      	bne.n	800600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	43da      	mvns	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	e00b      	b.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f af6d 	bne.w	8005f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006040:	e034      	b.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f8e3 	bl	800620e <I2C_IsAcknowledgeFailed>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e034      	b.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d028      	beq.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fd fafd 	bl	8003658 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11d      	bne.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b80      	cmp	r3, #128	@ 0x80
 800607c:	d016      	beq.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e007      	b.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d1c3      	bne.n	8006042 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060d0:	e034      	b.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f89b 	bl	800620e <I2C_IsAcknowledgeFailed>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e034      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d028      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fd fab5 	bl	8003658 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11d      	bne.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b04      	cmp	r3, #4
 800610c:	d016      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e007      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d1c3      	bne.n	80060d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006160:	e049      	b.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b10      	cmp	r3, #16
 800616e:	d119      	bne.n	80061a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0210 	mvn.w	r2, #16
 8006178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e030      	b.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a4:	f7fd fa58 	bl	8003658 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11d      	bne.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	d016      	beq.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e007      	b.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d1ae      	bne.n	8006162 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006224:	d11b      	bne.n	800625e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800622e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	f043 0204 	orr.w	r2, r3, #4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e267      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d075      	beq.n	8006376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800628a:	4b88      	ldr	r3, [pc, #544]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	2b04      	cmp	r3, #4
 8006294:	d00c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006296:	4b85      	ldr	r3, [pc, #532]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d112      	bne.n	80062c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062a2:	4b82      	ldr	r3, [pc, #520]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ae:	d10b      	bne.n	80062c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	4b7e      	ldr	r3, [pc, #504]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05b      	beq.n	8006374 <HAL_RCC_OscConfig+0x108>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d157      	bne.n	8006374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e242      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d0:	d106      	bne.n	80062e0 <HAL_RCC_OscConfig+0x74>
 80062d2:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a75      	ldr	r2, [pc, #468]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e01d      	b.n	800631c <HAL_RCC_OscConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCC_OscConfig+0x98>
 80062ea:	4b70      	ldr	r3, [pc, #448]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a6f      	ldr	r2, [pc, #444]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	4b6d      	ldr	r3, [pc, #436]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6c      	ldr	r2, [pc, #432]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0xb0>
 8006304:	4b69      	ldr	r3, [pc, #420]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a68      	ldr	r2, [pc, #416]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800630a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b66      	ldr	r3, [pc, #408]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a65      	ldr	r2, [pc, #404]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800631a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006324:	f7fd f998 	bl	8003658 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800632c:	f7fd f994 	bl	8003658 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b64      	cmp	r3, #100	@ 0x64
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e207      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0xc0>
 800634a:	e014      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634c:	f7fd f984 	bl	8003658 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006354:	f7fd f980 	bl	8003658 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	@ 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e1f3      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006366:	4b51      	ldr	r3, [pc, #324]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0xe8>
 8006372:	e000      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d063      	beq.n	800644a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006382:	4b4a      	ldr	r3, [pc, #296]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638e:	4b47      	ldr	r3, [pc, #284]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006396:	2b08      	cmp	r3, #8
 8006398:	d11c      	bne.n	80063d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639a:	4b44      	ldr	r3, [pc, #272]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d116      	bne.n	80063d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a6:	4b41      	ldr	r3, [pc, #260]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_RCC_OscConfig+0x152>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d001      	beq.n	80063be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e1c7      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063be:	4b3b      	ldr	r3, [pc, #236]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4937      	ldr	r1, [pc, #220]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d2:	e03a      	b.n	800644a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d020      	beq.n	800641e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063dc:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x244>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e2:	f7fd f939 	bl	8003658 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ea:	f7fd f935 	bl	8003658 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e1a8      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fc:	4b2b      	ldr	r3, [pc, #172]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006408:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4925      	ldr	r1, [pc, #148]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006418:	4313      	orrs	r3, r2
 800641a:	600b      	str	r3, [r1, #0]
 800641c:	e015      	b.n	800644a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641e:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <HAL_RCC_OscConfig+0x244>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fd f918 	bl	8003658 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642c:	f7fd f914 	bl	8003658 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e187      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643e:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d036      	beq.n	80064c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d016      	beq.n	800648c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645e:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <HAL_RCC_OscConfig+0x248>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006464:	f7fd f8f8 	bl	8003658 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800646c:	f7fd f8f4 	bl	8003658 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e167      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647e:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x200>
 800648a:	e01b      	b.n	80064c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800648c:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <HAL_RCC_OscConfig+0x248>)
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006492:	f7fd f8e1 	bl	8003658 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006498:	e00e      	b.n	80064b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649a:	f7fd f8dd 	bl	8003658 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d907      	bls.n	80064b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e150      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
 80064ac:	40023800 	.word	0x40023800
 80064b0:	42470000 	.word	0x42470000
 80064b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	4b88      	ldr	r3, [pc, #544]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1ea      	bne.n	800649a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8097 	beq.w	8006600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d6:	4b81      	ldr	r3, [pc, #516]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10f      	bne.n	8006502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	4b7d      	ldr	r3, [pc, #500]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ea:	4a7c      	ldr	r2, [pc, #496]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064f2:	4b7a      	ldr	r3, [pc, #488]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006502:	4b77      	ldr	r3, [pc, #476]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d118      	bne.n	8006540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650e:	4b74      	ldr	r3, [pc, #464]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a73      	ldr	r2, [pc, #460]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800651a:	f7fd f89d 	bl	8003658 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006522:	f7fd f899 	bl	8003658 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e10c      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d106      	bne.n	8006556 <HAL_RCC_OscConfig+0x2ea>
 8006548:	4b64      	ldr	r3, [pc, #400]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654c:	4a63      	ldr	r2, [pc, #396]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	6713      	str	r3, [r2, #112]	@ 0x70
 8006554:	e01c      	b.n	8006590 <HAL_RCC_OscConfig+0x324>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b05      	cmp	r3, #5
 800655c:	d10c      	bne.n	8006578 <HAL_RCC_OscConfig+0x30c>
 800655e:	4b5f      	ldr	r3, [pc, #380]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006562:	4a5e      	ldr	r2, [pc, #376]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006564:	f043 0304 	orr.w	r3, r3, #4
 8006568:	6713      	str	r3, [r2, #112]	@ 0x70
 800656a:	4b5c      	ldr	r3, [pc, #368]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	4a5b      	ldr	r2, [pc, #364]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70
 8006576:	e00b      	b.n	8006590 <HAL_RCC_OscConfig+0x324>
 8006578:	4b58      	ldr	r3, [pc, #352]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800657a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657c:	4a57      	ldr	r2, [pc, #348]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	6713      	str	r3, [r2, #112]	@ 0x70
 8006584:	4b55      	ldr	r3, [pc, #340]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006588:	4a54      	ldr	r2, [pc, #336]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800658a:	f023 0304 	bic.w	r3, r3, #4
 800658e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d015      	beq.n	80065c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006598:	f7fd f85e 	bl	8003658 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a0:	f7fd f85a 	bl	8003658 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0cb      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b6:	4b49      	ldr	r3, [pc, #292]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0ee      	beq.n	80065a0 <HAL_RCC_OscConfig+0x334>
 80065c2:	e014      	b.n	80065ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c4:	f7fd f848 	bl	8003658 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065cc:	f7fd f844 	bl	8003658 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0b5      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065e2:	4b3e      	ldr	r3, [pc, #248]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1ee      	bne.n	80065cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d105      	bne.n	8006600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f4:	4b39      	ldr	r3, [pc, #228]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	4a38      	ldr	r2, [pc, #224]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80a1 	beq.w	800674c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800660a:	4b34      	ldr	r3, [pc, #208]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b08      	cmp	r3, #8
 8006614:	d05c      	beq.n	80066d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d141      	bne.n	80066a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661e:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <HAL_RCC_OscConfig+0x478>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fd f818 	bl	8003658 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662c:	f7fd f814 	bl	8003658 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e087      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663e:	4b27      	ldr	r3, [pc, #156]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	019b      	lsls	r3, r3, #6
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	3b01      	subs	r3, #1
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	491b      	ldr	r1, [pc, #108]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006674:	4b1b      	ldr	r3, [pc, #108]	@ (80066e4 <HAL_RCC_OscConfig+0x478>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667a:	f7fc ffed 	bl	8003658 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006682:	f7fc ffe9 	bl	8003658 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e05c      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006694:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x416>
 80066a0:	e054      	b.n	800674c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a2:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <HAL_RCC_OscConfig+0x478>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a8:	f7fc ffd6 	bl	8003658 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066b0:	f7fc ffd2 	bl	8003658 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e045      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c2:	4b06      	ldr	r3, [pc, #24]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x444>
 80066ce:	e03d      	b.n	800674c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e038      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40007000 	.word	0x40007000
 80066e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006758 <HAL_RCC_OscConfig+0x4ec>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d028      	beq.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d121      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d11a      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006718:	4013      	ands	r3, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800671e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006720:	4293      	cmp	r3, r2
 8006722:	d111      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	3b01      	subs	r3, #1
 8006732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40023800 	.word	0x40023800

0800675c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0cc      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006770:	4b68      	ldr	r3, [pc, #416]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d90c      	bls.n	8006798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677e:	4b65      	ldr	r3, [pc, #404]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b63      	ldr	r3, [pc, #396]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0b8      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d020      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067b0:	4b59      	ldr	r3, [pc, #356]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	4a58      	ldr	r2, [pc, #352]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c8:	4b53      	ldr	r3, [pc, #332]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a52      	ldr	r2, [pc, #328]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d4:	4b50      	ldr	r3, [pc, #320]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	494d      	ldr	r1, [pc, #308]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d044      	beq.n	800687c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d107      	bne.n	800680a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b47      	ldr	r3, [pc, #284]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d119      	bne.n	800683a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e07f      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d003      	beq.n	800681a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006816:	2b03      	cmp	r3, #3
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681a:	4b3f      	ldr	r3, [pc, #252]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e06f      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800682a:	4b3b      	ldr	r3, [pc, #236]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e067      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800683a:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 0203 	bic.w	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4934      	ldr	r1, [pc, #208]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	4313      	orrs	r3, r2
 800684a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800684c:	f7fc ff04 	bl	8003658 <HAL_GetTick>
 8006850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006852:	e00a      	b.n	800686a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006854:	f7fc ff00 	bl	8003658 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e04f      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 020c 	and.w	r2, r3, #12
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	429a      	cmp	r2, r3
 800687a:	d1eb      	bne.n	8006854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800687c:	4b25      	ldr	r3, [pc, #148]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d20c      	bcs.n	80068a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b22      	ldr	r3, [pc, #136]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b20      	ldr	r3, [pc, #128]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e032      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068b0:	4b19      	ldr	r3, [pc, #100]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4916      	ldr	r1, [pc, #88]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ce:	4b12      	ldr	r3, [pc, #72]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	490e      	ldr	r1, [pc, #56]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068e2:	f000 f821 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	490a      	ldr	r1, [pc, #40]	@ (800691c <HAL_RCC_ClockConfig+0x1c0>)
 80068f4:	5ccb      	ldrb	r3, [r1, r3]
 80068f6:	fa22 f303 	lsr.w	r3, r2, r3
 80068fa:	4a09      	ldr	r2, [pc, #36]	@ (8006920 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068fe:	4b09      	ldr	r3, [pc, #36]	@ (8006924 <HAL_RCC_ClockConfig+0x1c8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc fc8a 	bl	800321c <HAL_InitTick>

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40023c00 	.word	0x40023c00
 8006918:	40023800 	.word	0x40023800
 800691c:	08010a34 	.word	0x08010a34
 8006920:	20000004 	.word	0x20000004
 8006924:	20000008 	.word	0x20000008

08006928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800692c:	b094      	sub	sp, #80	@ 0x50
 800692e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006940:	4b79      	ldr	r3, [pc, #484]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	2b08      	cmp	r3, #8
 800694a:	d00d      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x40>
 800694c:	2b08      	cmp	r3, #8
 800694e:	f200 80e1 	bhi.w	8006b14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_RCC_GetSysClockFreq+0x34>
 8006956:	2b04      	cmp	r3, #4
 8006958:	d003      	beq.n	8006962 <HAL_RCC_GetSysClockFreq+0x3a>
 800695a:	e0db      	b.n	8006b14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800695c:	4b73      	ldr	r3, [pc, #460]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x204>)
 800695e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006960:	e0db      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006962:	4b73      	ldr	r3, [pc, #460]	@ (8006b30 <HAL_RCC_GetSysClockFreq+0x208>)
 8006964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006966:	e0d8      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006968:	4b6f      	ldr	r3, [pc, #444]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x200>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006970:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006972:	4b6d      	ldr	r3, [pc, #436]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d063      	beq.n	8006a46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	099b      	lsrs	r3, r3, #6
 8006984:	2200      	movs	r2, #0
 8006986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006988:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	2300      	movs	r3, #0
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
 8006996:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800699a:	4622      	mov	r2, r4
 800699c:	462b      	mov	r3, r5
 800699e:	f04f 0000 	mov.w	r0, #0
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	0159      	lsls	r1, r3, #5
 80069a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ac:	0150      	lsls	r0, r2, #5
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4621      	mov	r1, r4
 80069b4:	1a51      	subs	r1, r2, r1
 80069b6:	6139      	str	r1, [r7, #16]
 80069b8:	4629      	mov	r1, r5
 80069ba:	eb63 0301 	sbc.w	r3, r3, r1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069cc:	4659      	mov	r1, fp
 80069ce:	018b      	lsls	r3, r1, #6
 80069d0:	4651      	mov	r1, sl
 80069d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069d6:	4651      	mov	r1, sl
 80069d8:	018a      	lsls	r2, r1, #6
 80069da:	4651      	mov	r1, sl
 80069dc:	ebb2 0801 	subs.w	r8, r2, r1
 80069e0:	4659      	mov	r1, fp
 80069e2:	eb63 0901 	sbc.w	r9, r3, r1
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069fa:	4690      	mov	r8, r2
 80069fc:	4699      	mov	r9, r3
 80069fe:	4623      	mov	r3, r4
 8006a00:	eb18 0303 	adds.w	r3, r8, r3
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	462b      	mov	r3, r5
 8006a08:	eb49 0303 	adc.w	r3, r9, r3
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	024b      	lsls	r3, r1, #9
 8006a1e:	4621      	mov	r1, r4
 8006a20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a24:	4621      	mov	r1, r4
 8006a26:	024a      	lsls	r2, r1, #9
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2e:	2200      	movs	r2, #0
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a38:	f7fa f926 	bl	8000c88 <__aeabi_uldivmod>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4613      	mov	r3, r2
 8006a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a44:	e058      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a46:	4b38      	ldr	r3, [pc, #224]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	099b      	lsrs	r3, r3, #6
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	4611      	mov	r1, r2
 8006a52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a56:	623b      	str	r3, [r7, #32]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a60:	4642      	mov	r2, r8
 8006a62:	464b      	mov	r3, r9
 8006a64:	f04f 0000 	mov.w	r0, #0
 8006a68:	f04f 0100 	mov.w	r1, #0
 8006a6c:	0159      	lsls	r1, r3, #5
 8006a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a72:	0150      	lsls	r0, r2, #5
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4641      	mov	r1, r8
 8006a7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a7e:	4649      	mov	r1, r9
 8006a80:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a98:	ebb2 040a 	subs.w	r4, r2, sl
 8006a9c:	eb63 050b 	sbc.w	r5, r3, fp
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	00eb      	lsls	r3, r5, #3
 8006aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aae:	00e2      	lsls	r2, r4, #3
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	4643      	mov	r3, r8
 8006ab6:	18e3      	adds	r3, r4, r3
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	464b      	mov	r3, r9
 8006abc:	eb45 0303 	adc.w	r3, r5, r3
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ace:	4629      	mov	r1, r5
 8006ad0:	028b      	lsls	r3, r1, #10
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad8:	4621      	mov	r1, r4
 8006ada:	028a      	lsls	r2, r1, #10
 8006adc:	4610      	mov	r0, r2
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	61fa      	str	r2, [r7, #28]
 8006ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aec:	f7fa f8cc 	bl	8000c88 <__aeabi_uldivmod>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4613      	mov	r3, r2
 8006af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006af8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	3301      	adds	r3, #1
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b12:	e002      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b14:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3750      	adds	r7, #80	@ 0x50
 8006b20:	46bd      	mov	sp, r7
 8006b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b26:	bf00      	nop
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	00f42400 	.word	0x00f42400
 8006b30:	007a1200 	.word	0x007a1200

08006b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b38:	4b03      	ldr	r3, [pc, #12]	@ (8006b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	20000004 	.word	0x20000004

08006b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b50:	f7ff fff0 	bl	8006b34 <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	0a9b      	lsrs	r3, r3, #10
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	@ (8006b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	08010a44 	.word	0x08010a44

08006b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b78:	f7ff ffdc 	bl	8006b34 <HAL_RCC_GetHCLKFreq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4b05      	ldr	r3, [pc, #20]	@ (8006b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	0b5b      	lsrs	r3, r3, #13
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	4903      	ldr	r1, [pc, #12]	@ (8006b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b8a:	5ccb      	ldrb	r3, [r1, r3]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40023800 	.word	0x40023800
 8006b98:	08010a44 	.word	0x08010a44

08006b9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	220f      	movs	r2, #15
 8006baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bac:	4b12      	ldr	r3, [pc, #72]	@ (8006bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0203 	and.w	r2, r3, #3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006bd0:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	08db      	lsrs	r3, r3, #3
 8006bd6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bde:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <HAL_RCC_GetClockConfig+0x60>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0207 	and.w	r2, r3, #7
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	601a      	str	r2, [r3, #0]
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	40023c00 	.word	0x40023c00

08006c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e07b      	b.n	8006d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d108      	bne.n	8006c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c22:	d009      	beq.n	8006c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	61da      	str	r2, [r3, #28]
 8006c2a:	e005      	b.n	8006c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fc f954 	bl	8002f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbc:	ea42 0103 	orr.w	r1, r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	f003 0104 	and.w	r1, r3, #4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cde:	f003 0210 	and.w	r2, r3, #16
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	603b      	str	r3, [r7, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d22:	f7fc fc99 	bl	8003658 <HAL_GetTick>
 8006d26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d001      	beq.n	8006d3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e12a      	b.n	8006f92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <HAL_SPI_Transmit+0x36>
 8006d42:	88fb      	ldrh	r3, [r7, #6]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e122      	b.n	8006f92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_SPI_Transmit+0x48>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e11b      	b.n	8006f92 <HAL_SPI_Transmit+0x280>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2203      	movs	r2, #3
 8006d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da8:	d10f      	bne.n	8006dca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d007      	beq.n	8006de8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df0:	d152      	bne.n	8006e98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_SPI_Transmit+0xee>
 8006dfa:	8b7b      	ldrh	r3, [r7, #26]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d145      	bne.n	8006e8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	1c9a      	adds	r2, r3, #2
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e24:	e032      	b.n	8006e8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d112      	bne.n	8006e5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	881a      	ldrh	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e58:	e018      	b.n	8006e8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5a:	f7fc fbfd 	bl	8003658 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <HAL_SPI_Transmit+0x160>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d102      	bne.n	8006e78 <HAL_SPI_Transmit+0x166>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e082      	b.n	8006f92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1c7      	bne.n	8006e26 <HAL_SPI_Transmit+0x114>
 8006e96:	e053      	b.n	8006f40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SPI_Transmit+0x194>
 8006ea0:	8b7b      	ldrh	r3, [r7, #26]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d147      	bne.n	8006f36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	330c      	adds	r3, #12
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ecc:	e033      	b.n	8006f36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d113      	bne.n	8006f04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f02:	e018      	b.n	8006f36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f04:	f7fc fba8 	bl	8003658 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d803      	bhi.n	8006f1c <HAL_SPI_Transmit+0x20a>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d102      	bne.n	8006f22 <HAL_SPI_Transmit+0x210>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e02d      	b.n	8006f92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1c6      	bne.n	8006ece <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fbd9 	bl	80076fc <SPI_EndRxTxTransaction>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2220      	movs	r2, #32
 8006f54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3720      	adds	r7, #32
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b088      	sub	sp, #32
 8006f9e:	af02      	add	r7, sp, #8
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d001      	beq.n	8006fba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e104      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Receive+0x2c>
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e0fc      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fd2:	d112      	bne.n	8006ffa <HAL_SPI_Receive+0x60>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10e      	bne.n	8006ffa <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f8eb 	bl	80071cc <HAL_SPI_TransmitReceive>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	e0e4      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ffa:	f7fc fb2d 	bl	8003658 <HAL_GetTick>
 8006ffe:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_SPI_Receive+0x74>
 800700a:	2302      	movs	r3, #2
 800700c:	e0da      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2204      	movs	r2, #4
 800701a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	88fa      	ldrh	r2, [r7, #6]
 800702e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800705c:	d10f      	bne.n	800707e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800706c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800707c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007088:	2b40      	cmp	r3, #64	@ 0x40
 800708a:	d007      	beq.n	800709c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800709a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d170      	bne.n	8007186 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070a4:	e035      	b.n	8007112 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d115      	bne.n	80070e0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f103 020c 	add.w	r2, r3, #12
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070de:	e018      	b.n	8007112 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070e0:	f7fc faba 	bl	8003658 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d803      	bhi.n	80070f8 <HAL_SPI_Receive+0x15e>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f6:	d102      	bne.n	80070fe <HAL_SPI_Receive+0x164>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e058      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1c4      	bne.n	80070a6 <HAL_SPI_Receive+0x10c>
 800711c:	e038      	b.n	8007190 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b01      	cmp	r3, #1
 800712a:	d113      	bne.n	8007154 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	b292      	uxth	r2, r2
 8007138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	1c9a      	adds	r2, r3, #2
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007152:	e018      	b.n	8007186 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007154:	f7fc fa80 	bl	8003658 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d803      	bhi.n	800716c <HAL_SPI_Receive+0x1d2>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d102      	bne.n	8007172 <HAL_SPI_Receive+0x1d8>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e01e      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1c6      	bne.n	800711e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fa4b 	bl	8007630 <SPI_EndRxTransaction>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80071c2:	2300      	movs	r3, #0
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	@ 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071da:	2301      	movs	r3, #1
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071de:	f7fc fa3b 	bl	8003658 <HAL_GetTick>
 80071e2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071ea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071f2:	887b      	ldrh	r3, [r7, #2]
 80071f4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d00c      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x4a>
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007202:	d106      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x46>
 800720c:	7ffb      	ldrb	r3, [r7, #31]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d001      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
 8007214:	e17f      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_SPI_TransmitReceive+0x5c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <HAL_SPI_TransmitReceive+0x5c>
 8007222:	887b      	ldrh	r3, [r7, #2]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e174      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_SPI_TransmitReceive+0x6e>
 8007236:	2302      	movs	r3, #2
 8007238:	e16d      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b04      	cmp	r3, #4
 800724c:	d003      	beq.n	8007256 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2205      	movs	r2, #5
 8007252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	887a      	ldrh	r2, [r7, #2]
 8007266:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	887a      	ldrh	r2, [r7, #2]
 800726c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	887a      	ldrh	r2, [r7, #2]
 8007278:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	887a      	ldrh	r2, [r7, #2]
 800727e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007296:	2b40      	cmp	r3, #64	@ 0x40
 8007298:	d007      	beq.n	80072aa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b2:	d17e      	bne.n	80073b2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <HAL_SPI_TransmitReceive+0xf6>
 80072bc:	8afb      	ldrh	r3, [r7, #22]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d16c      	bne.n	800739c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072e6:	e059      	b.n	800739c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d11b      	bne.n	800732e <HAL_SPI_TransmitReceive+0x162>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d016      	beq.n	800732e <HAL_SPI_TransmitReceive+0x162>
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	2b01      	cmp	r3, #1
 8007304:	d113      	bne.n	800732e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	881a      	ldrh	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d119      	bne.n	8007370 <HAL_SPI_TransmitReceive+0x1a4>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d014      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007350:	b292      	uxth	r2, r2
 8007352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	1c9a      	adds	r2, r3, #2
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800736c:	2301      	movs	r3, #1
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007370:	f7fc f972 	bl	8003658 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800737c:	429a      	cmp	r2, r3
 800737e:	d80d      	bhi.n	800739c <HAL_SPI_TransmitReceive+0x1d0>
 8007380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	d009      	beq.n	800739c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e0bc      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1a0      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x11c>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d19b      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x11c>
 80073b0:	e082      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_TransmitReceive+0x1f4>
 80073ba:	8afb      	ldrh	r3, [r7, #22]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d171      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073e6:	e05d      	b.n	80074a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d11c      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x264>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d017      	beq.n	8007430 <HAL_SPI_TransmitReceive+0x264>
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	2b01      	cmp	r3, #1
 8007404:	d114      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d119      	bne.n	8007472 <HAL_SPI_TransmitReceive+0x2a6>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d014      	beq.n	8007472 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800746e:	2301      	movs	r3, #1
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007472:	f7fc f8f1 	bl	8003658 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800747e:	429a      	cmp	r2, r3
 8007480:	d803      	bhi.n	800748a <HAL_SPI_TransmitReceive+0x2be>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d102      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x2c4>
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e038      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d19c      	bne.n	80073e8 <HAL_SPI_TransmitReceive+0x21c>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d197      	bne.n	80073e8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f91d 	bl	80076fc <SPI_EndRxTxTransaction>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d008      	beq.n	80074da <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e01d      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007514:	2300      	movs	r3, #0
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	3728      	adds	r7, #40	@ 0x28
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007530:	f7fc f892 	bl	8003658 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4413      	add	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007540:	f7fc f88a 	bl	8003658 <HAL_GetTick>
 8007544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007546:	4b39      	ldr	r3, [pc, #228]	@ (800762c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	015b      	lsls	r3, r3, #5
 800754c:	0d1b      	lsrs	r3, r3, #20
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	fb02 f303 	mul.w	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007556:	e055      	b.n	8007604 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d051      	beq.n	8007604 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007560:	f7fc f87a 	bl	8003658 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	429a      	cmp	r2, r3
 800756e:	d902      	bls.n	8007576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d13d      	bne.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800758e:	d111      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007598:	d004      	beq.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a2:	d107      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075bc:	d10f      	bne.n	80075de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e018      	b.n	8007624 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d102      	bne.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	e002      	b.n	8007604 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	3b01      	subs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4013      	ands	r3, r2
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	429a      	cmp	r2, r3
 8007612:	bf0c      	ite	eq
 8007614:	2301      	moveq	r3, #1
 8007616:	2300      	movne	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	429a      	cmp	r2, r3
 8007620:	d19a      	bne.n	8007558 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000004 	.word	0x20000004

08007630 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007644:	d111      	bne.n	800766a <SPI_EndRxTransaction+0x3a>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800764e:	d004      	beq.n	800765a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007658:	d107      	bne.n	800766a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007668:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007672:	d12a      	bne.n	80076ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767c:	d012      	beq.n	80076a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff ff49 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d02d      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007698:	f043 0220 	orr.w	r2, r3, #32
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e026      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2101      	movs	r1, #1
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff ff36 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01a      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e013      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2101      	movs	r1, #1
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff23 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e000      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2201      	movs	r2, #1
 8007710:	2102      	movs	r1, #2
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff ff04 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f043 0220 	orr.w	r2, r3, #32
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e032      	b.n	8007794 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800772e:	4b1b      	ldr	r3, [pc, #108]	@ (800779c <SPI_EndRxTxTransaction+0xa0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <SPI_EndRxTxTransaction+0xa4>)
 8007734:	fba2 2303 	umull	r2, r3, r2, r3
 8007738:	0d5b      	lsrs	r3, r3, #21
 800773a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800774c:	d112      	bne.n	8007774 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fee1 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007768:	f043 0220 	orr.w	r2, r3, #32
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e00f      	b.n	8007794 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	3b01      	subs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778a:	2b80      	cmp	r3, #128	@ 0x80
 800778c:	d0f2      	beq.n	8007774 <SPI_EndRxTxTransaction+0x78>
 800778e:	e000      	b.n	8007792 <SPI_EndRxTxTransaction+0x96>
        break;
 8007790:	bf00      	nop
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000004 	.word	0x20000004
 80077a0:	165e9f81 	.word	0x165e9f81

080077a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e041      	b.n	800783a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fb fbe0 	bl	8002f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f000 f9b6 	bl	8007b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e04e      	b.n	80078fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a23      	ldr	r2, [pc, #140]	@ (8007908 <HAL_TIM_Base_Start_IT+0xc4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d022      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007886:	d01d      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1f      	ldr	r2, [pc, #124]	@ (800790c <HAL_TIM_Base_Start_IT+0xc8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1e      	ldr	r2, [pc, #120]	@ (8007910 <HAL_TIM_Base_Start_IT+0xcc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007914 <HAL_TIM_Base_Start_IT+0xd0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007918 <HAL_TIM_Base_Start_IT+0xd4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a19      	ldr	r2, [pc, #100]	@ (800791c <HAL_TIM_Base_Start_IT+0xd8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	@ (8007920 <HAL_TIM_Base_Start_IT+0xdc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d111      	bne.n	80078e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b06      	cmp	r3, #6
 80078d4:	d010      	beq.n	80078f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e6:	e007      	b.n	80078f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40010000 	.word	0x40010000
 800790c:	40000400 	.word	0x40000400
 8007910:	40000800 	.word	0x40000800
 8007914:	40000c00 	.word	0x40000c00
 8007918:	40010400 	.word	0x40010400
 800791c:	40014000 	.word	0x40014000
 8007920:	40001800 	.word	0x40001800

08007924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d020      	beq.n	8007988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0202 	mvn.w	r2, #2
 8007958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f8d2 	bl	8007b18 <HAL_TIM_IC_CaptureCallback>
 8007974:	e005      	b.n	8007982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8c4 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f8d5 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	d020      	beq.n	80079d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01b      	beq.n	80079d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0204 	mvn.w	r2, #4
 80079a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8ac 	bl	8007b18 <HAL_TIM_IC_CaptureCallback>
 80079c0:	e005      	b.n	80079ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f89e 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f8af 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d020      	beq.n	8007a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01b      	beq.n	8007a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0208 	mvn.w	r2, #8
 80079f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2204      	movs	r2, #4
 80079f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f886 	bl	8007b18 <HAL_TIM_IC_CaptureCallback>
 8007a0c:	e005      	b.n	8007a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f878 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f889 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d020      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01b      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0210 	mvn.w	r2, #16
 8007a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2208      	movs	r2, #8
 8007a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f860 	bl	8007b18 <HAL_TIM_IC_CaptureCallback>
 8007a58:	e005      	b.n	8007a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f852 	bl	8007b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f863 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00c      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0201 	mvn.w	r2, #1
 8007a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fa fc88 	bl	80023a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f97c 	bl	8007dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f834 	bl	8007b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0320 	and.w	r3, r3, #32
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0220 	mvn.w	r2, #32
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f94e 	bl	8007d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a43      	ldr	r2, [pc, #268]	@ (8007c74 <TIM_Base_SetConfig+0x120>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d013      	beq.n	8007b94 <TIM_Base_SetConfig+0x40>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b72:	d00f      	beq.n	8007b94 <TIM_Base_SetConfig+0x40>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a40      	ldr	r2, [pc, #256]	@ (8007c78 <TIM_Base_SetConfig+0x124>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00b      	beq.n	8007b94 <TIM_Base_SetConfig+0x40>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8007c7c <TIM_Base_SetConfig+0x128>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d007      	beq.n	8007b94 <TIM_Base_SetConfig+0x40>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a3e      	ldr	r2, [pc, #248]	@ (8007c80 <TIM_Base_SetConfig+0x12c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d003      	beq.n	8007b94 <TIM_Base_SetConfig+0x40>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8007c84 <TIM_Base_SetConfig+0x130>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d108      	bne.n	8007ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a32      	ldr	r2, [pc, #200]	@ (8007c74 <TIM_Base_SetConfig+0x120>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d02b      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb4:	d027      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8007c78 <TIM_Base_SetConfig+0x124>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d023      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8007c7c <TIM_Base_SetConfig+0x128>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d01f      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8007c80 <TIM_Base_SetConfig+0x12c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01b      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8007c84 <TIM_Base_SetConfig+0x130>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d017      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8007c88 <TIM_Base_SetConfig+0x134>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2a      	ldr	r2, [pc, #168]	@ (8007c8c <TIM_Base_SetConfig+0x138>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00f      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a29      	ldr	r2, [pc, #164]	@ (8007c90 <TIM_Base_SetConfig+0x13c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00b      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a28      	ldr	r2, [pc, #160]	@ (8007c94 <TIM_Base_SetConfig+0x140>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a27      	ldr	r2, [pc, #156]	@ (8007c98 <TIM_Base_SetConfig+0x144>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d003      	beq.n	8007c06 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a26      	ldr	r2, [pc, #152]	@ (8007c9c <TIM_Base_SetConfig+0x148>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d108      	bne.n	8007c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a0e      	ldr	r2, [pc, #56]	@ (8007c74 <TIM_Base_SetConfig+0x120>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_Base_SetConfig+0xf2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a10      	ldr	r2, [pc, #64]	@ (8007c84 <TIM_Base_SetConfig+0x130>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d103      	bne.n	8007c4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	691a      	ldr	r2, [r3, #16]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f043 0204 	orr.w	r2, r3, #4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	601a      	str	r2, [r3, #0]
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40010000 	.word	0x40010000
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	40000c00 	.word	0x40000c00
 8007c84:	40010400 	.word	0x40010400
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400
 8007c90:	40014800 	.word	0x40014800
 8007c94:	40001800 	.word	0x40001800
 8007c98:	40001c00 	.word	0x40001c00
 8007c9c:	40002000 	.word	0x40002000

08007ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e05a      	b.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a21      	ldr	r2, [pc, #132]	@ (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d022      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d04:	d01d      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d018      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1b      	ldr	r2, [pc, #108]	@ (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00e      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a18      	ldr	r2, [pc, #96]	@ (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d009      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a17      	ldr	r2, [pc, #92]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d004      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a15      	ldr	r2, [pc, #84]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d10c      	bne.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40010000 	.word	0x40010000
 8007d80:	40000400 	.word	0x40000400
 8007d84:	40000800 	.word	0x40000800
 8007d88:	40000c00 	.word	0x40000c00
 8007d8c:	40010400 	.word	0x40010400
 8007d90:	40014000 	.word	0x40014000
 8007d94:	40001800 	.word	0x40001800

08007d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e042      	b.n	8007e58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fb f8fa 	bl	8002fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2224      	movs	r2, #36	@ 0x24
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f849 	bl	8008e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695a      	ldr	r2, [r3, #20]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e024      	b.n	8007ebc <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2224      	movs	r2, #36	@ 0x24
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e88:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fb f984 	bl	8003198 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	@ 0x28
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d175      	bne.n	8007fd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_UART_Transmit+0x2c>
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e06e      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2221      	movs	r2, #33	@ 0x21
 8007efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f02:	f7fb fba9 	bl	8003658 <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1c:	d108      	bne.n	8007f30 <HAL_UART_Transmit+0x6c>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e003      	b.n	8007f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f38:	e02e      	b.n	8007f98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2180      	movs	r1, #128	@ 0x80
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fce7 	bl	8008918 <UART_WaitOnFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e03a      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	3302      	adds	r3, #2
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e007      	b.n	8007f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3301      	adds	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1cb      	bne.n	8007f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2140      	movs	r1, #64	@ 0x40
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fcb3 	bl	8008918 <UART_WaitOnFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b090      	sub	sp, #64	@ 0x40
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff0:	2b80      	cmp	r3, #128	@ 0x80
 8007ff2:	bf0c      	ite	eq
 8007ff4:	2301      	moveq	r3, #1
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b21      	cmp	r3, #33	@ 0x21
 8008006:	d128      	bne.n	800805a <HAL_UART_DMAStop+0x80>
 8008008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d025      	beq.n	800805a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3314      	adds	r3, #20
 8008014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	623b      	str	r3, [r7, #32]
   return(result);
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008024:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3314      	adds	r3, #20
 800802c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800802e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1e5      	bne.n	800800e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804e:	4618      	mov	r0, r3
 8008050:	f7fc fb40 	bl	80046d4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fd5f 	bl	8008b18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008064:	2b40      	cmp	r3, #64	@ 0x40
 8008066:	bf0c      	ite	eq
 8008068:	2301      	moveq	r3, #1
 800806a:	2300      	movne	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b22      	cmp	r3, #34	@ 0x22
 800807a:	d128      	bne.n	80080ce <HAL_UART_DMAStop+0xf4>
 800807c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d025      	beq.n	80080ce <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3314      	adds	r3, #20
 8008088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	60fb      	str	r3, [r7, #12]
   return(result);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008098:	637b      	str	r3, [r7, #52]	@ 0x34
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3314      	adds	r3, #20
 80080a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080a2:	61fa      	str	r2, [r7, #28]
 80080a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	69b9      	ldr	r1, [r7, #24]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	617b      	str	r3, [r7, #20]
   return(result);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e5      	bne.n	8008082 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fc fb06 	bl	80046d4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fd4d 	bl	8008b68 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3740      	adds	r7, #64	@ 0x40
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08c      	sub	sp, #48	@ 0x30
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	d146      	bne.n	8008180 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e03f      	b.n	8008182 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	461a      	mov	r2, r3
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 fc59 	bl	80089cc <UART_Start_Receive_DMA>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008124:	2b01      	cmp	r3, #1
 8008126:	d125      	bne.n	8008174 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008128:	2300      	movs	r3, #0
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	617b      	str	r3, [r7, #20]
   return(result);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f043 0310 	orr.w	r3, r3, #16
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800815e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6a39      	ldr	r1, [r7, #32]
 8008164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	61fb      	str	r3, [r7, #28]
   return(result);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008172:	e002      	b.n	800817a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800817a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800817e:	e000      	b.n	8008182 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8008180:	2302      	movs	r3, #2
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3730      	adds	r7, #48	@ 0x30
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b0ba      	sub	sp, #232	@ 0xe8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80081ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10f      	bne.n	80081f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <HAL_UART_IRQHandler+0x66>
 80081de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fd98 	bl	8008d20 <UART_Receive_IT>
      return;
 80081f0:	e273      	b.n	80086da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80de 	beq.w	80083b8 <HAL_UART_IRQHandler+0x22c>
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d106      	bne.n	8008216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800820c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80d1 	beq.w	80083b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00b      	beq.n	800823a <HAL_UART_IRQHandler+0xae>
 8008222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008232:	f043 0201 	orr.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00b      	beq.n	800825e <HAL_UART_IRQHandler+0xd2>
 8008246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008256:	f043 0202 	orr.w	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <HAL_UART_IRQHandler+0xf6>
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827a:	f043 0204 	orr.w	r2, r3, #4
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d011      	beq.n	80082b2 <HAL_UART_IRQHandler+0x126>
 800828e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800829a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082aa:	f043 0208 	orr.w	r2, r3, #8
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 820a 	beq.w	80086d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <HAL_UART_IRQHandler+0x14e>
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fd23 	bl	8008d20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e4:	2b40      	cmp	r3, #64	@ 0x40
 80082e6:	bf0c      	ite	eq
 80082e8:	2301      	moveq	r3, #1
 80082ea:	2300      	movne	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d103      	bne.n	8008306 <HAL_UART_IRQHandler+0x17a>
 80082fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d04f      	beq.n	80083a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fc2e 	bl	8008b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008316:	2b40      	cmp	r3, #64	@ 0x40
 8008318:	d141      	bne.n	800839e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3314      	adds	r3, #20
 8008320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3314      	adds	r3, #20
 8008342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008346:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800834a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800835e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1d9      	bne.n	800831a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d013      	beq.n	8008396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	4a8a      	ldr	r2, [pc, #552]	@ (800859c <HAL_UART_IRQHandler+0x410>)
 8008374:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800837a:	4618      	mov	r0, r3
 800837c:	f7fc fa1a 	bl	80047b4 <HAL_DMA_Abort_IT>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d016      	beq.n	80083b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	e00e      	b.n	80083b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fa9c 	bl	80098d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	e00a      	b.n	80083b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fa98 	bl	80098d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	e006      	b.n	80083b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fa94 	bl	80098d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80083b2:	e18d      	b.n	80086d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b4:	bf00      	nop
    return;
 80083b6:	e18b      	b.n	80086d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083bc:	2b01      	cmp	r3, #1
 80083be:	f040 8167 	bne.w	8008690 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8160 	beq.w	8008690 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80083d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 8159 	beq.w	8008690 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083de:	2300      	movs	r3, #0
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60bb      	str	r3, [r7, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	60bb      	str	r3, [r7, #8]
 80083f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	f040 80ce 	bne.w	80085a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80a9 	beq.w	800856c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800841e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008422:	429a      	cmp	r2, r3
 8008424:	f080 80a2 	bcs.w	800856c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800842e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843a:	f000 8088 	beq.w	800854e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800845c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	330c      	adds	r3, #12
 8008466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800846a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800846e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008476:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1d9      	bne.n	800843e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3314      	adds	r3, #20
 8008490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800849a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3314      	adds	r3, #20
 80084aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e1      	bne.n	800848a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3314      	adds	r3, #20
 80084cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3314      	adds	r3, #20
 80084e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e3      	bne.n	80084c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	330c      	adds	r3, #12
 8008512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800851c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800851e:	f023 0310 	bic.w	r3, r3, #16
 8008522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	330c      	adds	r3, #12
 800852c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008530:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008532:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800853e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e3      	bne.n	800850c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008548:	4618      	mov	r0, r3
 800854a:	f7fc f8c3 	bl	80046d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800855c:	b29b      	uxth	r3, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f97b 	bl	8009860 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800856a:	e0b3      	b.n	80086d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008574:	429a      	cmp	r2, r3
 8008576:	f040 80ad 	bne.w	80086d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008584:	f040 80a6 	bne.w	80086d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 f963 	bl	8009860 <HAL_UARTEx_RxEventCallback>
      return;
 800859a:	e09b      	b.n	80086d4 <HAL_UART_IRQHandler+0x548>
 800859c:	08008c2f 	.word	0x08008c2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 808e 	beq.w	80086d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80085bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 8089 	beq.w	80086d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330c      	adds	r3, #12
 80085e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80085ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80085ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e3      	bne.n	80085c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3314      	adds	r3, #20
 8008604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	623b      	str	r3, [r7, #32]
   return(result);
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3314      	adds	r3, #20
 800861e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008622:	633a      	str	r2, [r7, #48]	@ 0x30
 8008624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e3      	bne.n	80085fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	60fb      	str	r3, [r7, #12]
   return(result);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0310 	bic.w	r3, r3, #16
 800865a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	330c      	adds	r3, #12
 8008664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008668:	61fa      	str	r2, [r7, #28]
 800866a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	69b9      	ldr	r1, [r7, #24]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	617b      	str	r3, [r7, #20]
   return(result);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e3      	bne.n	8008644 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 f8e9 	bl	8009860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800868e:	e023      	b.n	80086d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <HAL_UART_IRQHandler+0x524>
 800869c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fad1 	bl	8008c50 <UART_Transmit_IT>
    return;
 80086ae:	e014      	b.n	80086da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00e      	beq.n	80086da <HAL_UART_IRQHandler+0x54e>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb11 	bl	8008cf0 <UART_EndTransmit_IT>
    return;
 80086ce:	e004      	b.n	80086da <HAL_UART_IRQHandler+0x54e>
    return;
 80086d0:	bf00      	nop
 80086d2:	e002      	b.n	80086da <HAL_UART_IRQHandler+0x54e>
      return;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <HAL_UART_IRQHandler+0x54e>
      return;
 80086d8:	bf00      	nop
  }
}
 80086da:	37e8      	adds	r7, #232	@ 0xe8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b09c      	sub	sp, #112	@ 0x70
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008728:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008734:	2b00      	cmp	r3, #0
 8008736:	d172      	bne.n	800881e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800873a:	2200      	movs	r2, #0
 800873c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800873e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800874e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800875e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008760:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800876c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e5      	bne.n	800873e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3314      	adds	r3, #20
 8008778:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	667b      	str	r3, [r7, #100]	@ 0x64
 800878a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3314      	adds	r3, #20
 8008790:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008792:	647a      	str	r2, [r7, #68]	@ 0x44
 8008794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e5      	bne.n	8008772 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	623b      	str	r3, [r7, #32]
   return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80087be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3314      	adds	r3, #20
 80087c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e5      	bne.n	80087a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d119      	bne.n	800881e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	330c      	adds	r3, #12
 80087f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f023 0310 	bic.w	r3, r3, #16
 8008800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800880a:	61fa      	str	r2, [r7, #28]
 800880c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	69b9      	ldr	r1, [r7, #24]
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	617b      	str	r3, [r7, #20]
   return(result);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e5      	bne.n	80087ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800881e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008820:	2200      	movs	r2, #0
 8008822:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008828:	2b01      	cmp	r3, #1
 800882a:	d106      	bne.n	800883a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800882c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800882e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008830:	4619      	mov	r1, r3
 8008832:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008834:	f001 f814 	bl	8009860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008838:	e002      	b.n	8008840 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800883a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800883c:	f7ff ff5a 	bl	80086f4 <HAL_UART_RxCpltCallback>
}
 8008840:	bf00      	nop
 8008842:	3770      	adds	r7, #112	@ 0x70
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008854:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008860:	2b01      	cmp	r3, #1
 8008862:	d108      	bne.n	8008876 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008868:	085b      	lsrs	r3, r3, #1
 800886a:	b29b      	uxth	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 fff6 	bl	8009860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008874:	e002      	b.n	800887c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff ff46 	bl	8008708 <HAL_UART_RxHalfCpltCallback>
}
 800887c:	bf00      	nop
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008894:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a0:	2b80      	cmp	r3, #128	@ 0x80
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b21      	cmp	r3, #33	@ 0x21
 80088b6:	d108      	bne.n	80088ca <UART_DMAError+0x46>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2200      	movs	r2, #0
 80088c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80088c4:	68b8      	ldr	r0, [r7, #8]
 80088c6:	f000 f927 	bl	8008b18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b40      	cmp	r3, #64	@ 0x40
 80088d6:	bf0c      	ite	eq
 80088d8:	2301      	moveq	r3, #1
 80088da:	2300      	movne	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b22      	cmp	r3, #34	@ 0x22
 80088ea:	d108      	bne.n	80088fe <UART_DMAError+0x7a>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80088f8:	68b8      	ldr	r0, [r7, #8]
 80088fa:	f000 f935 	bl	8008b68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008902:	f043 0210 	orr.w	r2, r3, #16
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800890a:	68b8      	ldr	r0, [r7, #8]
 800890c:	f000 ffe2 	bl	80098d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008928:	e03b      	b.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008930:	d037      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008932:	f7fa fe91 	bl	8003658 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	6a3a      	ldr	r2, [r7, #32]
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <UART_WaitOnFlagUntilTimeout+0x30>
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e03a      	b.n	80089c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d023      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b80      	cmp	r3, #128	@ 0x80
 800895e:	d020      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d01d      	beq.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	2b08      	cmp	r3, #8
 8008972:	d116      	bne.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 f8ec 	bl	8008b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2208      	movs	r2, #8
 8008994:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e00f      	b.n	80089c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4013      	ands	r3, r2
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d0b4      	beq.n	800892a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b098      	sub	sp, #96	@ 0x60
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	88fa      	ldrh	r2, [r7, #6]
 80089e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2222      	movs	r2, #34	@ 0x22
 80089f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f8:	4a44      	ldr	r2, [pc, #272]	@ (8008b0c <UART_Start_Receive_DMA+0x140>)
 80089fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a00:	4a43      	ldr	r2, [pc, #268]	@ (8008b10 <UART_Start_Receive_DMA+0x144>)
 8008a02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a08:	4a42      	ldr	r2, [pc, #264]	@ (8008b14 <UART_Start_Receive_DMA+0x148>)
 8008a0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	2200      	movs	r2, #0
 8008a12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008a14:	f107 0308 	add.w	r3, r7, #8
 8008a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4619      	mov	r1, r3
 8008a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	f7fb fdfa 	bl	8004624 <HAL_DMA_Start_IT>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d008      	beq.n	8008a48 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2210      	movs	r2, #16
 8008a3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e05d      	b.n	8008b04 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	613b      	str	r3, [r7, #16]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	613b      	str	r3, [r7, #16]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d019      	beq.n	8008a9a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	330c      	adds	r3, #12
 8008a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	330c      	adds	r3, #12
 8008a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a86:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3314      	adds	r3, #20
 8008aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008aba:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e5      	bne.n	8008a9a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3314      	adds	r3, #20
 8008ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3314      	adds	r3, #20
 8008aec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aee:	627a      	str	r2, [r7, #36]	@ 0x24
 8008af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6a39      	ldr	r1, [r7, #32]
 8008af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e5      	bne.n	8008ace <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3760      	adds	r7, #96	@ 0x60
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	0800871d 	.word	0x0800871d
 8008b10:	08008849 	.word	0x08008849
 8008b14:	08008885 	.word	0x08008885

08008b18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b089      	sub	sp, #36	@ 0x24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	330c      	adds	r3, #12
 8008b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b36:	61fb      	str	r3, [r7, #28]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	61ba      	str	r2, [r7, #24]
 8008b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6979      	ldr	r1, [r7, #20]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e5      	bne.n	8008b20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008b5c:	bf00      	nop
 8008b5e:	3724      	adds	r7, #36	@ 0x24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b095      	sub	sp, #84	@ 0x54
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	330c      	adds	r3, #12
 8008b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b90:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e5      	bne.n	8008b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3314      	adds	r3, #20
 8008baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e5      	bne.n	8008ba4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d119      	bne.n	8008c14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f023 0310 	bic.w	r3, r3, #16
 8008bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	330c      	adds	r3, #12
 8008bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c00:	61ba      	str	r2, [r7, #24]
 8008c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6979      	ldr	r1, [r7, #20]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e5      	bne.n	8008be0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c22:	bf00      	nop
 8008c24:	3754      	adds	r7, #84	@ 0x54
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fe46 	bl	80098d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b21      	cmp	r3, #33	@ 0x21
 8008c62:	d13e      	bne.n	8008ce2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c6c:	d114      	bne.n	8008c98 <UART_Transmit_IT+0x48>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d110      	bne.n	8008c98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	1c9a      	adds	r2, r3, #2
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	621a      	str	r2, [r3, #32]
 8008c96:	e008      	b.n	8008caa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	1c59      	adds	r1, r3, #1
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6211      	str	r1, [r2, #32]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10f      	bne.n	8008cde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e000      	b.n	8008ce4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ce2:	2302      	movs	r3, #2
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fce5 	bl	80086e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08c      	sub	sp, #48	@ 0x30
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b22      	cmp	r3, #34	@ 0x22
 8008d3a:	f040 80aa 	bne.w	8008e92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d46:	d115      	bne.n	8008d74 <UART_Receive_IT+0x54>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d111      	bne.n	8008d74 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6c:	1c9a      	adds	r2, r3, #2
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d72:	e024      	b.n	8008dbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d82:	d007      	beq.n	8008d94 <UART_Receive_IT+0x74>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <UART_Receive_IT+0x82>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	e008      	b.n	8008db4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d15d      	bne.n	8008e8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0220 	bic.w	r2, r2, #32
 8008de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0201 	bic.w	r2, r2, #1
 8008e00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d135      	bne.n	8008e84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	330c      	adds	r3, #12
 8008e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f023 0310 	bic.w	r3, r3, #16
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e3e:	623a      	str	r2, [r7, #32]
 8008e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	69f9      	ldr	r1, [r7, #28]
 8008e44:	6a3a      	ldr	r2, [r7, #32]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b10      	cmp	r3, #16
 8008e5e:	d10a      	bne.n	8008e76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fcef 	bl	8009860 <HAL_UARTEx_RxEventCallback>
 8008e82:	e002      	b.n	8008e8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff fc35 	bl	80086f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e002      	b.n	8008e94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e000      	b.n	8008e94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e92:	2302      	movs	r3, #2
  }
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3730      	adds	r7, #48	@ 0x30
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ea0:	b0c0      	sub	sp, #256	@ 0x100
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb8:	68d9      	ldr	r1, [r3, #12]
 8008eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	ea40 0301 	orr.w	r3, r0, r1
 8008ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ef4:	f021 010c 	bic.w	r1, r1, #12
 8008ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f02:	430b      	orrs	r3, r1
 8008f04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f16:	6999      	ldr	r1, [r3, #24]
 8008f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	ea40 0301 	orr.w	r3, r0, r1
 8008f22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b8f      	ldr	r3, [pc, #572]	@ (8009168 <UART_SetConfig+0x2cc>)
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d005      	beq.n	8008f3c <UART_SetConfig+0xa0>
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b8d      	ldr	r3, [pc, #564]	@ (800916c <UART_SetConfig+0x2d0>)
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d104      	bne.n	8008f46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f3c:	f7fd fe1a 	bl	8006b74 <HAL_RCC_GetPCLK2Freq>
 8008f40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008f44:	e003      	b.n	8008f4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f46:	f7fd fe01 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 8008f4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f58:	f040 810c 	bne.w	8009174 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	1891      	adds	r1, r2, r2
 8008f74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f76:	415b      	adcs	r3, r3
 8008f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f7e:	4621      	mov	r1, r4
 8008f80:	eb12 0801 	adds.w	r8, r2, r1
 8008f84:	4629      	mov	r1, r5
 8008f86:	eb43 0901 	adc.w	r9, r3, r1
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f9e:	4690      	mov	r8, r2
 8008fa0:	4699      	mov	r9, r3
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	eb18 0303 	adds.w	r3, r8, r3
 8008fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fac:	462b      	mov	r3, r5
 8008fae:	eb49 0303 	adc.w	r3, r9, r3
 8008fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008fca:	460b      	mov	r3, r1
 8008fcc:	18db      	adds	r3, r3, r3
 8008fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	eb42 0303 	adc.w	r3, r2, r3
 8008fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008fe0:	f7f7 fe52 	bl	8000c88 <__aeabi_uldivmod>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4b61      	ldr	r3, [pc, #388]	@ (8009170 <UART_SetConfig+0x2d4>)
 8008fea:	fba3 2302 	umull	r2, r3, r3, r2
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	011c      	lsls	r4, r3, #4
 8008ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ffc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009000:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	1891      	adds	r1, r2, r2
 800900a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800900c:	415b      	adcs	r3, r3
 800900e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009014:	4641      	mov	r1, r8
 8009016:	eb12 0a01 	adds.w	sl, r2, r1
 800901a:	4649      	mov	r1, r9
 800901c:	eb43 0b01 	adc.w	fp, r3, r1
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800902c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009034:	4692      	mov	sl, r2
 8009036:	469b      	mov	fp, r3
 8009038:	4643      	mov	r3, r8
 800903a:	eb1a 0303 	adds.w	r3, sl, r3
 800903e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009042:	464b      	mov	r3, r9
 8009044:	eb4b 0303 	adc.w	r3, fp, r3
 8009048:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009058:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800905c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009060:	460b      	mov	r3, r1
 8009062:	18db      	adds	r3, r3, r3
 8009064:	643b      	str	r3, [r7, #64]	@ 0x40
 8009066:	4613      	mov	r3, r2
 8009068:	eb42 0303 	adc.w	r3, r2, r3
 800906c:	647b      	str	r3, [r7, #68]	@ 0x44
 800906e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009072:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009076:	f7f7 fe07 	bl	8000c88 <__aeabi_uldivmod>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4611      	mov	r1, r2
 8009080:	4b3b      	ldr	r3, [pc, #236]	@ (8009170 <UART_SetConfig+0x2d4>)
 8009082:	fba3 2301 	umull	r2, r3, r3, r1
 8009086:	095b      	lsrs	r3, r3, #5
 8009088:	2264      	movs	r2, #100	@ 0x64
 800908a:	fb02 f303 	mul.w	r3, r2, r3
 800908e:	1acb      	subs	r3, r1, r3
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009096:	4b36      	ldr	r3, [pc, #216]	@ (8009170 <UART_SetConfig+0x2d4>)
 8009098:	fba3 2302 	umull	r2, r3, r3, r2
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80090a4:	441c      	add	r4, r3
 80090a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80090b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80090b8:	4642      	mov	r2, r8
 80090ba:	464b      	mov	r3, r9
 80090bc:	1891      	adds	r1, r2, r2
 80090be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80090c0:	415b      	adcs	r3, r3
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80090c8:	4641      	mov	r1, r8
 80090ca:	1851      	adds	r1, r2, r1
 80090cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80090ce:	4649      	mov	r1, r9
 80090d0:	414b      	adcs	r3, r1
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d4:	f04f 0200 	mov.w	r2, #0
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80090e0:	4659      	mov	r1, fp
 80090e2:	00cb      	lsls	r3, r1, #3
 80090e4:	4651      	mov	r1, sl
 80090e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ea:	4651      	mov	r1, sl
 80090ec:	00ca      	lsls	r2, r1, #3
 80090ee:	4610      	mov	r0, r2
 80090f0:	4619      	mov	r1, r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	4642      	mov	r2, r8
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090fc:	464b      	mov	r3, r9
 80090fe:	460a      	mov	r2, r1
 8009100:	eb42 0303 	adc.w	r3, r2, r3
 8009104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009114:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800911c:	460b      	mov	r3, r1
 800911e:	18db      	adds	r3, r3, r3
 8009120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009122:	4613      	mov	r3, r2
 8009124:	eb42 0303 	adc.w	r3, r2, r3
 8009128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800912a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800912e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009132:	f7f7 fda9 	bl	8000c88 <__aeabi_uldivmod>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4b0d      	ldr	r3, [pc, #52]	@ (8009170 <UART_SetConfig+0x2d4>)
 800913c:	fba3 1302 	umull	r1, r3, r3, r2
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	2164      	movs	r1, #100	@ 0x64
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	3332      	adds	r3, #50	@ 0x32
 800914e:	4a08      	ldr	r2, [pc, #32]	@ (8009170 <UART_SetConfig+0x2d4>)
 8009150:	fba2 2303 	umull	r2, r3, r2, r3
 8009154:	095b      	lsrs	r3, r3, #5
 8009156:	f003 0207 	and.w	r2, r3, #7
 800915a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4422      	add	r2, r4
 8009162:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009164:	e106      	b.n	8009374 <UART_SetConfig+0x4d8>
 8009166:	bf00      	nop
 8009168:	40011000 	.word	0x40011000
 800916c:	40011400 	.word	0x40011400
 8009170:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009178:	2200      	movs	r2, #0
 800917a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800917e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009182:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	1891      	adds	r1, r2, r2
 800918c:	6239      	str	r1, [r7, #32]
 800918e:	415b      	adcs	r3, r3
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
 8009192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009196:	4641      	mov	r1, r8
 8009198:	1854      	adds	r4, r2, r1
 800919a:	4649      	mov	r1, r9
 800919c:	eb43 0501 	adc.w	r5, r3, r1
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	00eb      	lsls	r3, r5, #3
 80091aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ae:	00e2      	lsls	r2, r4, #3
 80091b0:	4614      	mov	r4, r2
 80091b2:	461d      	mov	r5, r3
 80091b4:	4643      	mov	r3, r8
 80091b6:	18e3      	adds	r3, r4, r3
 80091b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091bc:	464b      	mov	r3, r9
 80091be:	eb45 0303 	adc.w	r3, r5, r3
 80091c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80091e2:	4629      	mov	r1, r5
 80091e4:	008b      	lsls	r3, r1, #2
 80091e6:	4621      	mov	r1, r4
 80091e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ec:	4621      	mov	r1, r4
 80091ee:	008a      	lsls	r2, r1, #2
 80091f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80091f4:	f7f7 fd48 	bl	8000c88 <__aeabi_uldivmod>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4b60      	ldr	r3, [pc, #384]	@ (8009380 <UART_SetConfig+0x4e4>)
 80091fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	011c      	lsls	r4, r3, #4
 8009206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800920a:	2200      	movs	r2, #0
 800920c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009210:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	1891      	adds	r1, r2, r2
 800921e:	61b9      	str	r1, [r7, #24]
 8009220:	415b      	adcs	r3, r3
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009228:	4641      	mov	r1, r8
 800922a:	1851      	adds	r1, r2, r1
 800922c:	6139      	str	r1, [r7, #16]
 800922e:	4649      	mov	r1, r9
 8009230:	414b      	adcs	r3, r1
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009240:	4659      	mov	r1, fp
 8009242:	00cb      	lsls	r3, r1, #3
 8009244:	4651      	mov	r1, sl
 8009246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800924a:	4651      	mov	r1, sl
 800924c:	00ca      	lsls	r2, r1, #3
 800924e:	4610      	mov	r0, r2
 8009250:	4619      	mov	r1, r3
 8009252:	4603      	mov	r3, r0
 8009254:	4642      	mov	r2, r8
 8009256:	189b      	adds	r3, r3, r2
 8009258:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800925c:	464b      	mov	r3, r9
 800925e:	460a      	mov	r2, r1
 8009260:	eb42 0303 	adc.w	r3, r2, r3
 8009264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009272:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	f04f 0300 	mov.w	r3, #0
 800927c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009280:	4649      	mov	r1, r9
 8009282:	008b      	lsls	r3, r1, #2
 8009284:	4641      	mov	r1, r8
 8009286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800928a:	4641      	mov	r1, r8
 800928c:	008a      	lsls	r2, r1, #2
 800928e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009292:	f7f7 fcf9 	bl	8000c88 <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4611      	mov	r1, r2
 800929c:	4b38      	ldr	r3, [pc, #224]	@ (8009380 <UART_SetConfig+0x4e4>)
 800929e:	fba3 2301 	umull	r2, r3, r3, r1
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	2264      	movs	r2, #100	@ 0x64
 80092a6:	fb02 f303 	mul.w	r3, r2, r3
 80092aa:	1acb      	subs	r3, r1, r3
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	3332      	adds	r3, #50	@ 0x32
 80092b0:	4a33      	ldr	r2, [pc, #204]	@ (8009380 <UART_SetConfig+0x4e4>)
 80092b2:	fba2 2303 	umull	r2, r3, r2, r3
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092bc:	441c      	add	r4, r3
 80092be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092c2:	2200      	movs	r2, #0
 80092c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80092c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80092c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80092cc:	4642      	mov	r2, r8
 80092ce:	464b      	mov	r3, r9
 80092d0:	1891      	adds	r1, r2, r2
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	415b      	adcs	r3, r3
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092dc:	4641      	mov	r1, r8
 80092de:	1851      	adds	r1, r2, r1
 80092e0:	6039      	str	r1, [r7, #0]
 80092e2:	4649      	mov	r1, r9
 80092e4:	414b      	adcs	r3, r1
 80092e6:	607b      	str	r3, [r7, #4]
 80092e8:	f04f 0200 	mov.w	r2, #0
 80092ec:	f04f 0300 	mov.w	r3, #0
 80092f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092f4:	4659      	mov	r1, fp
 80092f6:	00cb      	lsls	r3, r1, #3
 80092f8:	4651      	mov	r1, sl
 80092fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092fe:	4651      	mov	r1, sl
 8009300:	00ca      	lsls	r2, r1, #3
 8009302:	4610      	mov	r0, r2
 8009304:	4619      	mov	r1, r3
 8009306:	4603      	mov	r3, r0
 8009308:	4642      	mov	r2, r8
 800930a:	189b      	adds	r3, r3, r2
 800930c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800930e:	464b      	mov	r3, r9
 8009310:	460a      	mov	r2, r1
 8009312:	eb42 0303 	adc.w	r3, r2, r3
 8009316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	663b      	str	r3, [r7, #96]	@ 0x60
 8009322:	667a      	str	r2, [r7, #100]	@ 0x64
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	f04f 0300 	mov.w	r3, #0
 800932c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009330:	4649      	mov	r1, r9
 8009332:	008b      	lsls	r3, r1, #2
 8009334:	4641      	mov	r1, r8
 8009336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800933a:	4641      	mov	r1, r8
 800933c:	008a      	lsls	r2, r1, #2
 800933e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009342:	f7f7 fca1 	bl	8000c88 <__aeabi_uldivmod>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4b0d      	ldr	r3, [pc, #52]	@ (8009380 <UART_SetConfig+0x4e4>)
 800934c:	fba3 1302 	umull	r1, r3, r3, r2
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	2164      	movs	r1, #100	@ 0x64
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	3332      	adds	r3, #50	@ 0x32
 800935e:	4a08      	ldr	r2, [pc, #32]	@ (8009380 <UART_SetConfig+0x4e4>)
 8009360:	fba2 2303 	umull	r2, r3, r2, r3
 8009364:	095b      	lsrs	r3, r3, #5
 8009366:	f003 020f 	and.w	r2, r3, #15
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4422      	add	r2, r4
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	bf00      	nop
 8009376:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800937a:	46bd      	mov	sp, r7
 800937c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009380:	51eb851f 	.word	0x51eb851f

08009384 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009388:	4904      	ldr	r1, [pc, #16]	@ (800939c <MX_FATFS_Init+0x18>)
 800938a:	4805      	ldr	r0, [pc, #20]	@ (80093a0 <MX_FATFS_Init+0x1c>)
 800938c:	f003 fa6a 	bl	800c864 <FATFS_LinkDriver>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	4b03      	ldr	r3, [pc, #12]	@ (80093a4 <MX_FATFS_Init+0x20>)
 8009396:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009398:	bf00      	nop
 800939a:	bd80      	pop	{r7, pc}
 800939c:	2000049c 	.word	0x2000049c
 80093a0:	20000010 	.word	0x20000010
 80093a4:	20000498 	.word	0x20000498

080093a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80093ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize(pdrv);
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7f9 f9b7 	bl	8002738 <SD_disk_initialize>
 80093ca:	4603      	mov	r3, r0

  /* USER CODE END INIT */
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f9 fa8f 	bl	8002904 <SD_disk_status>
 80093e6:	4603      	mov	r3, r0

  /* USER CODE END STATUS */
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read(pdrv, buff, sector, count);
 8009400:	7bf8      	ldrb	r0, [r7, #15]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	f7f9 fa92 	bl	8002930 <SD_disk_read>
 800940c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8009426:	7bf8      	ldrb	r0, [r7, #15]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	f7f9 fae9 	bl	8002a04 <SD_disk_write>
 8009432:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	603a      	str	r2, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	460b      	mov	r3, r1
 800944a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 800944c:	79b9      	ldrb	r1, [r7, #6]
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	4618      	mov	r0, r3
 8009454:	f7f9 fb5a 	bl	8002b0c <SD_disk_ioctl>
 8009458:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <esp32_init>:
 *          Otherwise, an error is returned.
 *
 * @param   None
 * @retval  ESP32_OK on success, ESP32_ERROR on failure.
 */
esp32_status_t esp32_init(void) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
  esp32_status_t ret = ESP32_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	71fb      	strb	r3, [r7, #7]

  /* Configuration the IO low layer */
  if ( esp32_io_init() < 0 ) {
 800946e:	f000 f963 	bl	8009738 <esp32_io_init>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	da01      	bge.n	800947c <esp32_init+0x18>
    return ESP32_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e033      	b.n	80094e4 <esp32_init+0x80>
  }

#ifndef OTA_APP
  /* Switch off the echo mode */
  /* Construct the command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 800947c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009480:	2100      	movs	r1, #0
 8009482:	481a      	ldr	r0, [pc, #104]	@ (80094ec <esp32_init+0x88>)
 8009484:	f004 fc5e 	bl	800dd44 <memset>
  sprintf((char *)at_cmd, "ATE%d%s", ESP32_ECHO_OFF, AT_CMD_TERMINATOR );
 8009488:	4b19      	ldr	r3, [pc, #100]	@ (80094f0 <esp32_init+0x8c>)
 800948a:	2200      	movs	r2, #0
 800948c:	4919      	ldr	r1, [pc, #100]	@ (80094f4 <esp32_init+0x90>)
 800948e:	4817      	ldr	r0, [pc, #92]	@ (80094ec <esp32_init+0x88>)
 8009490:	f004 fb06 	bl	800daa0 <siprintf>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 8009494:	4815      	ldr	r0, [pc, #84]	@ (80094ec <esp32_init+0x88>)
 8009496:	f7f6 feeb 	bl	8000270 <strlen>
 800949a:	4603      	mov	r3, r0
 800949c:	4a16      	ldr	r2, [pc, #88]	@ (80094f8 <esp32_init+0x94>)
 800949e:	4619      	mov	r1, r3
 80094a0:	4812      	ldr	r0, [pc, #72]	@ (80094ec <esp32_init+0x88>)
 80094a2:	f000 f901 	bl	80096a8 <run_at_cmd>
 80094a6:	4603      	mov	r3, r0
 80094a8:	71fb      	strb	r3, [r7, #7]
                    (uint8_t *)AT_OK_STRING);

  /* Exit in case of error */
  if ( ret != ESP32_OK ) {
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <esp32_init+0x50>
    return ESP32_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e017      	b.n	80094e4 <esp32_init+0x80>
  }

  /* Setup the module in station mode*/
  /* Construct the command */
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 80094b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094b8:	2100      	movs	r1, #0
 80094ba:	480c      	ldr	r0, [pc, #48]	@ (80094ec <esp32_init+0x88>)
 80094bc:	f004 fc42 	bl	800dd44 <memset>
  sprintf((char *)at_cmd, "AT+CWMODE=%d%s", ESP32_STATION_MODE , AT_CMD_TERMINATOR );
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <esp32_init+0x8c>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	490d      	ldr	r1, [pc, #52]	@ (80094fc <esp32_init+0x98>)
 80094c6:	4809      	ldr	r0, [pc, #36]	@ (80094ec <esp32_init+0x88>)
 80094c8:	f004 faea 	bl	800daa0 <siprintf>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 80094cc:	4807      	ldr	r0, [pc, #28]	@ (80094ec <esp32_init+0x88>)
 80094ce:	f7f6 fecf 	bl	8000270 <strlen>
 80094d2:	4603      	mov	r3, r0
 80094d4:	4a08      	ldr	r2, [pc, #32]	@ (80094f8 <esp32_init+0x94>)
 80094d6:	4619      	mov	r1, r3
 80094d8:	4804      	ldr	r0, [pc, #16]	@ (80094ec <esp32_init+0x88>)
 80094da:	f000 f8e5 	bl	80096a8 <run_at_cmd>
 80094de:	4603      	mov	r3, r0
 80094e0:	71fb      	strb	r3, [r7, #7]
                    (uint8_t *)AT_OK_STRING);
#endif
  return ret;
 80094e2:	79fb      	ldrb	r3, [r7, #7]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	200004a0 	.word	0x200004a0
 80094f0:	080105b0 	.word	0x080105b0
 80094f4:	080105b4 	.word	0x080105b4
 80094f8:	080105bc 	.word	0x080105bc
 80094fc:	080105c4 	.word	0x080105c4

08009500 <esp32_join_ap>:
 * @param  ssid: the access point id.
 * @param  password the Access point password.
 * @retval returns esp_AT_COMMAND_OK on success and esp_AT_COMMAND_ERROR
 * otherwise.
 */
esp32_status_t esp32_join_ap(uint8_t *ssid, uint8_t *password) {
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af02      	add	r7, sp, #8
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  esp32_status_t ret;

  /* List all the available Access points first
   then check whether the specified 'ssid' exists among them or not.*/
  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 800950a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800950e:	2100      	movs	r1, #0
 8009510:	480d      	ldr	r0, [pc, #52]	@ (8009548 <esp32_join_ap+0x48>)
 8009512:	f004 fc17 	bl	800dd44 <memset>
  sprintf((char *)at_cmd, "AT+CWJAP=\"%s\",\"%s\"%s", ssid, password, AT_CMD_TERMINATOR);
 8009516:	4b0d      	ldr	r3, [pc, #52]	@ (800954c <esp32_join_ap+0x4c>)
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	490c      	ldr	r1, [pc, #48]	@ (8009550 <esp32_join_ap+0x50>)
 8009520:	4809      	ldr	r0, [pc, #36]	@ (8009548 <esp32_join_ap+0x48>)
 8009522:	f004 fabd 	bl	800daa0 <siprintf>

  /* Send the command */
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd),
 8009526:	4808      	ldr	r0, [pc, #32]	@ (8009548 <esp32_join_ap+0x48>)
 8009528:	f7f6 fea2 	bl	8000270 <strlen>
 800952c:	4603      	mov	r3, r0
 800952e:	4a09      	ldr	r2, [pc, #36]	@ (8009554 <esp32_join_ap+0x54>)
 8009530:	4619      	mov	r1, r3
 8009532:	4805      	ldr	r0, [pc, #20]	@ (8009548 <esp32_join_ap+0x48>)
 8009534:	f000 f8b8 	bl	80096a8 <run_at_cmd>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
                    (uint8_t *)AT_OK_STRING);

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	200004a0 	.word	0x200004a0
 800954c:	080105b0 	.word	0x080105b0
 8009550:	080105e0 	.word	0x080105e0
 8009554:	080105bc 	.word	0x080105bc

08009558 <esp32_config_sntp>:
/**
 * @brief  Configure the SNTP client with predefined NTP servers.
 * @param  utc_offset: Time offset from UTC in hours.
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
esp32_status_t esp32_config_sntp(int utc_offset) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af02      	add	r7, sp, #8
 800955e:	6078      	str	r0, [r7, #4]
  esp32_status_t ret;

  const char *ntp_server1 = "pool.ntp.org";
 8009560:	4b11      	ldr	r3, [pc, #68]	@ (80095a8 <esp32_config_sntp+0x50>)
 8009562:	617b      	str	r3, [r7, #20]
  const char *ntp_server2 = "time.google.com";
 8009564:	4b11      	ldr	r3, [pc, #68]	@ (80095ac <esp32_config_sntp+0x54>)
 8009566:	613b      	str	r3, [r7, #16]

  memset(at_cmd, '\0', MAX_AT_CMD_SIZE);
 8009568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800956c:	2100      	movs	r1, #0
 800956e:	4810      	ldr	r0, [pc, #64]	@ (80095b0 <esp32_config_sntp+0x58>)
 8009570:	f004 fbe8 	bl	800dd44 <memset>

  // Construct AT command with all servers (ESP32 AT FW supports up to 3 servers)
  sprintf((char *)at_cmd,
 8009574:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <esp32_config_sntp+0x5c>)
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	490d      	ldr	r1, [pc, #52]	@ (80095b8 <esp32_config_sntp+0x60>)
 8009582:	480b      	ldr	r0, [pc, #44]	@ (80095b0 <esp32_config_sntp+0x58>)
 8009584:	f004 fa8c 	bl	800daa0 <siprintf>
          ntp_server1,
          ntp_server2,
          AT_CMD_TERMINATOR);

  // Send the command
  ret = run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING);
 8009588:	4809      	ldr	r0, [pc, #36]	@ (80095b0 <esp32_config_sntp+0x58>)
 800958a:	f7f6 fe71 	bl	8000270 <strlen>
 800958e:	4603      	mov	r3, r0
 8009590:	4a0a      	ldr	r2, [pc, #40]	@ (80095bc <esp32_config_sntp+0x64>)
 8009592:	4619      	mov	r1, r3
 8009594:	4806      	ldr	r0, [pc, #24]	@ (80095b0 <esp32_config_sntp+0x58>)
 8009596:	f000 f887 	bl	80096a8 <run_at_cmd>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]

  return ret;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	0801065c 	.word	0x0801065c
 80095ac:	0801066c 	.word	0x0801066c
 80095b0:	200004a0 	.word	0x200004a0
 80095b4:	080105b0 	.word	0x080105b0
 80095b8:	0801067c 	.word	0x0801067c
 80095bc:	080105bc 	.word	0x080105bc

080095c0 <esp32_get_sntp_time>:

/**
 * @brief  Query the SNTP time from the module.
 * @retval ESP32_OK on success, ESP32_ERROR otherwise.
 */
esp32_status_t esp32_get_sntp_time(sntp_time_t *time_data) {
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	b08f      	sub	sp, #60	@ 0x3c
 80095c4:	af06      	add	r7, sp, #24
 80095c6:	6078      	str	r0, [r7, #4]
  const int max_retries = 10, retry_delay_ms = 1000;
 80095c8:	230a      	movs	r3, #10
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80095d0:	617b      	str	r3, [r7, #20]
  esp32_status_t ret = ESP32_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	74fb      	strb	r3, [r7, #19]

  memset(at_cmd, 0, MAX_AT_CMD_SIZE);
 80095d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095da:	2100      	movs	r1, #0
 80095dc:	482b      	ldr	r0, [pc, #172]	@ (800968c <esp32_get_sntp_time+0xcc>)
 80095de:	f004 fbb1 	bl	800dd44 <memset>
  snprintf((char *)at_cmd, sizeof(at_cmd), "AT+CIPSNTPTIME?%s", AT_CMD_TERMINATOR);
 80095e2:	4b2b      	ldr	r3, [pc, #172]	@ (8009690 <esp32_get_sntp_time+0xd0>)
 80095e4:	4a2b      	ldr	r2, [pc, #172]	@ (8009694 <esp32_get_sntp_time+0xd4>)
 80095e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80095ea:	4828      	ldr	r0, [pc, #160]	@ (800968c <esp32_get_sntp_time+0xcc>)
 80095ec:	f004 fa22 	bl	800da34 <sniprintf>

  for (int retries = 0; retries < max_retries; retries++) {
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]
 80095f4:	e040      	b.n	8009678 <esp32_get_sntp_time+0xb8>
    HAL_Delay(retry_delay_ms);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fa f839 	bl	8003670 <HAL_Delay>
    if (run_at_cmd((uint8_t *)at_cmd, strlen((char *)at_cmd), (uint8_t *)AT_OK_STRING) != ESP32_OK) {
 80095fe:	4823      	ldr	r0, [pc, #140]	@ (800968c <esp32_get_sntp_time+0xcc>)
 8009600:	f7f6 fe36 	bl	8000270 <strlen>
 8009604:	4603      	mov	r3, r0
 8009606:	4a24      	ldr	r2, [pc, #144]	@ (8009698 <esp32_get_sntp_time+0xd8>)
 8009608:	4619      	mov	r1, r3
 800960a:	4820      	ldr	r0, [pc, #128]	@ (800968c <esp32_get_sntp_time+0xcc>)
 800960c:	f000 f84c 	bl	80096a8 <run_at_cmd>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d12a      	bne.n	800966c <esp32_get_sntp_time+0xac>
      continue;
    }

    char *p_sntp_time = strstr(rx_buffer, "+CIPSNTPTIME:");
 8009616:	4921      	ldr	r1, [pc, #132]	@ (800969c <esp32_get_sntp_time+0xdc>)
 8009618:	4821      	ldr	r0, [pc, #132]	@ (80096a0 <esp32_get_sntp_time+0xe0>)
 800961a:	f004 fb9b 	bl	800dd54 <strstr>
 800961e:	60f8      	str	r0, [r7, #12]

    // Extract SNTP time from the response
    if (!p_sntp_time || sscanf(p_sntp_time, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d024      	beq.n	8009670 <esp32_get_sntp_time+0xb0>
        time_data->day, time_data->month, &time_data->date,
 8009626:	687d      	ldr	r5, [r7, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	1d1e      	adds	r6, r3, #4
    if (!p_sntp_time || sscanf(p_sntp_time, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3308      	adds	r3, #8
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	3210      	adds	r2, #16
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	3114      	adds	r1, #20
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	3018      	adds	r0, #24
 800963c:	687c      	ldr	r4, [r7, #4]
 800963e:	340c      	adds	r4, #12
 8009640:	9404      	str	r4, [sp, #16]
 8009642:	9003      	str	r0, [sp, #12]
 8009644:	9102      	str	r1, [sp, #8]
 8009646:	9201      	str	r2, [sp, #4]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	4633      	mov	r3, r6
 800964c:	462a      	mov	r2, r5
 800964e:	4915      	ldr	r1, [pc, #84]	@ (80096a4 <esp32_get_sntp_time+0xe4>)
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f004 fa47 	bl	800dae4 <siscanf>
 8009656:	4603      	mov	r3, r0
 8009658:	2b07      	cmp	r3, #7
 800965a:	d109      	bne.n	8009670 <esp32_get_sntp_time+0xb0>
        &time_data->year) != 7){
        continue;
    }

    // Check if time is valid
    if (time_data->year != 1970) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f240 72b2 	movw	r2, #1970	@ 0x7b2
 8009664:	4293      	cmp	r3, r2
 8009666:	d004      	beq.n	8009672 <esp32_get_sntp_time+0xb2>
      return ESP32_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	e00a      	b.n	8009682 <esp32_get_sntp_time+0xc2>
      continue;
 800966c:	bf00      	nop
 800966e:	e000      	b.n	8009672 <esp32_get_sntp_time+0xb2>
        continue;
 8009670:	bf00      	nop
  for (int retries = 0; retries < max_retries; retries++) {
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	3301      	adds	r3, #1
 8009676:	61fb      	str	r3, [r7, #28]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	429a      	cmp	r2, r3
 800967e:	dbba      	blt.n	80095f6 <esp32_get_sntp_time+0x36>
    }
  }

  return ret;
 8009680:	7cfb      	ldrb	r3, [r7, #19]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3724      	adds	r7, #36	@ 0x24
 8009686:	46bd      	mov	sp, r7
 8009688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968a:	bf00      	nop
 800968c:	200004a0 	.word	0x200004a0
 8009690:	080105b0 	.word	0x080105b0
 8009694:	0801069c 	.word	0x0801069c
 8009698:	080105bc 	.word	0x080105bc
 800969c:	080106b0 	.word	0x080106b0
 80096a0:	200005a0 	.word	0x200005a0
 80096a4:	080106c0 	.word	0x080106c0

080096a8 <run_at_cmd>:
 * @param  cmd the buffer to fill will the received data.
 * @param  length the maximum data size to receive.
 * @param  token the expected output if command runs successfully
 * @retval returns ESP32_OK on success and ESP32_ERROR otherwise.
 */
static esp32_status_t run_at_cmd(uint8_t *cmd, uint32_t length, const uint8_t *token) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  uint32_t idx = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
  uint8_t rx_char;

  /* Reset the Rx buffer to make sure no previous data exist */
  memset(rx_buffer, '\0', MAX_BUFFER_SIZE);
 80096b8:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80096bc:	2100      	movs	r1, #0
 80096be:	481c      	ldr	r0, [pc, #112]	@ (8009730 <run_at_cmd+0x88>)
 80096c0:	f004 fb40 	bl	800dd44 <memset>

  if ( esp32_io_send(cmd, length) < 0 )
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f85c 	bl	8009784 <esp32_io_send>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	da01      	bge.n	80096d6 <run_at_cmd+0x2e>
  /* Send the command */
  {
    return ESP32_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e028      	b.n	8009728 <run_at_cmd+0x80>
  }

  /* Wait for reception */
  while ( true ) {
    /* Wait to receive data */
    if ( esp32_io_recv(&rx_char, 1) != 0 ) {
 80096d6:	f107 0313 	add.w	r3, r7, #19
 80096da:	2101      	movs	r1, #1
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 f86b 	bl	80097b8 <esp32_io_recv>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01b      	beq.n	8009720 <run_at_cmd+0x78>
      rx_buffer [ idx++ ] = rx_char;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	617a      	str	r2, [r7, #20]
 80096ee:	7cf9      	ldrb	r1, [r7, #19]
 80096f0:	4a0f      	ldr	r2, [pc, #60]	@ (8009730 <run_at_cmd+0x88>)
 80096f2:	54d1      	strb	r1, [r2, r3]
    } else {
      break;
    }

    /* Check that max buffer size has not been reached */
    if ( idx == MAX_BUFFER_SIZE ) {
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096fa:	d013      	beq.n	8009724 <run_at_cmd+0x7c>
      break;
    }

    /* Extract the token */
    if ( strstr((char *)rx_buffer, (char *)token) != NULL ) {
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	480c      	ldr	r0, [pc, #48]	@ (8009730 <run_at_cmd+0x88>)
 8009700:	f004 fb28 	bl	800dd54 <strstr>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <run_at_cmd+0x66>
      return ESP32_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	e00c      	b.n	8009728 <run_at_cmd+0x80>
    }

    /* Check if the message contains error code */
    if ( strstr((char *)rx_buffer, AT_ERROR_STRING) != NULL ) {
 800970e:	4909      	ldr	r1, [pc, #36]	@ (8009734 <run_at_cmd+0x8c>)
 8009710:	4807      	ldr	r0, [pc, #28]	@ (8009730 <run_at_cmd+0x88>)
 8009712:	f004 fb1f 	bl	800dd54 <strstr>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d0dc      	beq.n	80096d6 <run_at_cmd+0x2e>
      return ESP32_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e003      	b.n	8009728 <run_at_cmd+0x80>
      break;
 8009720:	bf00      	nop
 8009722:	e000      	b.n	8009726 <run_at_cmd+0x7e>
      break;
 8009724:	bf00      	nop
    }
  }

  return ESP32_ERROR;
 8009726:	2301      	movs	r3, #1
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	200005a0 	.word	0x200005a0
 8009734:	080108a0 	.word	0x080108a0

08009738 <esp32_io_init>:

/**
 * @brief  Initialize the ESP8266 UART interface with DMA and Idle Detection.
 * @retval 0 on success, -1 otherwise.
 */
int8_t esp32_io_init(void) {
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  HAL_Delay(2000);
 800973c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009740:	f7f9 ff96 	bl	8003670 <HAL_Delay>

  wifi_rx_buffer.head = 0;
 8009744:	4b0d      	ldr	r3, [pc, #52]	@ (800977c <esp32_io_init+0x44>)
 8009746:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800974a:	2200      	movs	r2, #0
 800974c:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
  wifi_rx_buffer.tail = 0;
 8009750:	4b0a      	ldr	r3, [pc, #40]	@ (800977c <esp32_io_init+0x44>)
 8009752:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009756:	2200      	movs	r2, #0
 8009758:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

  // Start UART in DMA mode with Idle line detection
  if ( HAL_UARTEx_ReceiveToIdle_DMA(ESP32_UART_HANDLE, (uint8_t *)wifi_rx_buffer.data,
 800975c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8009760:	4906      	ldr	r1, [pc, #24]	@ (800977c <esp32_io_init+0x44>)
 8009762:	4807      	ldr	r0, [pc, #28]	@ (8009780 <esp32_io_init+0x48>)
 8009764:	f7fe fcb8 	bl	80080d8 <HAL_UARTEx_ReceiveToIdle_DMA>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <esp32_io_init+0x3c>
                                    RING_BUFFER_SIZE) != HAL_OK ) {
    return -1;
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	e000      	b.n	8009776 <esp32_io_init+0x3e>
  }
  return 0;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200011a0 	.word	0x200011a0
 8009780:	20000374 	.word	0x20000374

08009784 <esp32_io_send>:
 * @brief  Send data to the ESP8266 module over UART.
 * @param  p_data: Pointer to the data buffer to send.
 * @param  length: Length of the data buffer.
 * @retval 0 on success, -1 otherwise.
 */
int8_t esp32_io_send(uint8_t *p_data, uint32_t length) {
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  if ( HAL_UART_Transmit(ESP32_UART_HANDLE, p_data, length, DEFAULT_TIME_OUT) !=
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	b29a      	uxth	r2, r3
 8009792:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4806      	ldr	r0, [pc, #24]	@ (80097b4 <esp32_io_send+0x30>)
 800979a:	f7fe fb93 	bl	8007ec4 <HAL_UART_Transmit>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <esp32_io_send+0x26>
       HAL_OK ) {
    return -1;
 80097a4:	f04f 33ff 	mov.w	r3, #4294967295
 80097a8:	e000      	b.n	80097ac <esp32_io_send+0x28>
  }
  return 0;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000374 	.word	0x20000374

080097b8 <esp32_io_recv>:
 * @brief  Receive data from the ESP8266 module over UART.
 * @param  buffer: Pointer to the buffer to store received data.
 * @param  length: Maximum length of the buffer.
 * @retval Number of bytes received.
 */
int32_t esp32_io_recv(uint8_t *buffer, uint32_t length) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t read_data = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]

  while ( length-- ) {
 80097c6:	e03e      	b.n	8009846 <esp32_io_recv+0x8e>
    uint32_t tick_start = HAL_GetTick();
 80097c8:	f7f9 ff46 	bl	8003658 <HAL_GetTick>
 80097cc:	60b8      	str	r0, [r7, #8]
    do {
      if ( wifi_rx_buffer.head != wifi_rx_buffer.tail ) {
 80097ce:	4b23      	ldr	r3, [pc, #140]	@ (800985c <esp32_io_recv+0xa4>)
 80097d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097d4:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 80097d8:	4b20      	ldr	r3, [pc, #128]	@ (800985c <esp32_io_recv+0xa4>)
 80097da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097de:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d024      	beq.n	8009830 <esp32_io_recv+0x78>
        *buffer++ = wifi_rx_buffer.data [ wifi_rx_buffer.head++ ];
 80097e6:	4b1d      	ldr	r3, [pc, #116]	@ (800985c <esp32_io_recv+0xa4>)
 80097e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80097ec:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	b291      	uxth	r1, r2
 80097f4:	4a19      	ldr	r2, [pc, #100]	@ (800985c <esp32_io_recv+0xa4>)
 80097f6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80097fa:	f8a2 1802 	strh.w	r1, [r2, #2050]	@ 0x802
 80097fe:	4619      	mov	r1, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	4a15      	ldr	r2, [pc, #84]	@ (800985c <esp32_io_recv+0xa4>)
 8009808:	5c52      	ldrb	r2, [r2, r1]
 800980a:	701a      	strb	r2, [r3, #0]
        read_data++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]

        if ( wifi_rx_buffer.head >= RING_BUFFER_SIZE ) {
 8009812:	4b12      	ldr	r3, [pc, #72]	@ (800985c <esp32_io_recv+0xa4>)
 8009814:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009818:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 800981c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009820:	d310      	bcc.n	8009844 <esp32_io_recv+0x8c>
          wifi_rx_buffer.head = 0;
 8009822:	4b0e      	ldr	r3, [pc, #56]	@ (800985c <esp32_io_recv+0xa4>)
 8009824:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009828:	2200      	movs	r2, #0
 800982a:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
        }
        break;
 800982e:	e009      	b.n	8009844 <esp32_io_recv+0x8c>
      }
    } while ( (HAL_GetTick() - tick_start) < DEFAULT_TIME_OUT);
 8009830:	f7f9 ff12 	bl	8003658 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f641 3257 	movw	r2, #6999	@ 0x1b57
 800983e:	4293      	cmp	r3, r2
 8009840:	d9c5      	bls.n	80097ce <esp32_io_recv+0x16>
 8009842:	e000      	b.n	8009846 <esp32_io_recv+0x8e>
        break;
 8009844:	bf00      	nop
  while ( length-- ) {
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	1e5a      	subs	r2, r3, #1
 800984a:	603a      	str	r2, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1bb      	bne.n	80097c8 <esp32_io_recv+0x10>
  }
  return read_data;
 8009850:	68fb      	ldr	r3, [r7, #12]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	200011a0 	.word	0x200011a0

08009860 <HAL_UARTEx_RxEventCallback>:
  * @param  huart UART handle
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	807b      	strh	r3, [r7, #2]
  if ( huart == ESP32_UART_HANDLE ) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a15      	ldr	r2, [pc, #84]	@ (80098c4 <HAL_UARTEx_RxEventCallback+0x64>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d121      	bne.n	80098b8 <HAL_UARTEx_RxEventCallback+0x58>
    static uint16_t tail_pos = 0;

    if ( size > tail_pos ) {
 8009874:	4b14      	ldr	r3, [pc, #80]	@ (80098c8 <HAL_UARTEx_RxEventCallback+0x68>)
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	887a      	ldrh	r2, [r7, #2]
 800987a:	429a      	cmp	r2, r3
 800987c:	d91c      	bls.n	80098b8 <HAL_UARTEx_RxEventCallback+0x58>
      tail_pos = size % RING_BUFFER_SIZE;
 800987e:	887a      	ldrh	r2, [r7, #2]
 8009880:	4b12      	ldr	r3, [pc, #72]	@ (80098cc <HAL_UARTEx_RxEventCallback+0x6c>)
 8009882:	fba3 1302 	umull	r1, r3, r3, r2
 8009886:	0b59      	lsrs	r1, r3, #13
 8009888:	460b      	mov	r3, r1
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	02db      	lsls	r3, r3, #11
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	b29a      	uxth	r2, r3
 8009894:	4b0c      	ldr	r3, [pc, #48]	@ (80098c8 <HAL_UARTEx_RxEventCallback+0x68>)
 8009896:	801a      	strh	r2, [r3, #0]
      if ( tail_pos != wifi_rx_buffer.head ) {
 8009898:	4b0d      	ldr	r3, [pc, #52]	@ (80098d0 <HAL_UARTEx_RxEventCallback+0x70>)
 800989a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800989e:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	@ 0x802
 80098a2:	4b09      	ldr	r3, [pc, #36]	@ (80098c8 <HAL_UARTEx_RxEventCallback+0x68>)
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d006      	beq.n	80098b8 <HAL_UARTEx_RxEventCallback+0x58>
        wifi_rx_buffer.tail = tail_pos;
 80098aa:	4b07      	ldr	r3, [pc, #28]	@ (80098c8 <HAL_UARTEx_RxEventCallback+0x68>)
 80098ac:	881a      	ldrh	r2, [r3, #0]
 80098ae:	4b08      	ldr	r3, [pc, #32]	@ (80098d0 <HAL_UARTEx_RxEventCallback+0x70>)
 80098b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80098b4:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
      }
    }
  }
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000374 	.word	0x20000374
 80098c8:	200039a4 	.word	0x200039a4
 80098cc:	cccccccd 	.word	0xcccccccd
 80098d0:	200011a0 	.word	0x200011a0

080098d4 <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart: Pointer to the UART handle.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  (void)*huart;
  esp32_io_error_handler();
 80098dc:	f000 f804 	bl	80098e8 <esp32_io_error_handler>
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <esp32_io_error_handler>:

/**
 * @brief  Handle UART errors by deinitializing the interface.
 * @retval None.
 */
static void esp32_io_error_handler(void) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
  HAL_UART_DMAStop(ESP32_UART_HANDLE);
 80098ec:	4803      	ldr	r0, [pc, #12]	@ (80098fc <esp32_io_error_handler+0x14>)
 80098ee:	f7fe fb74 	bl	8007fda <HAL_UART_DMAStop>
  HAL_UART_DeInit(ESP32_UART_HANDLE);
 80098f2:	4802      	ldr	r0, [pc, #8]	@ (80098fc <esp32_io_error_handler+0x14>)
 80098f4:	f7fe fab4 	bl	8007e60 <HAL_UART_DeInit>
  while ( 1 ) {
 80098f8:	bf00      	nop
 80098fa:	e7fd      	b.n	80098f8 <esp32_io_error_handler+0x10>
 80098fc:	20000374 	.word	0x20000374

08009900 <hdc1080_read_temperature>:
 * @param[in] hi2c_x Pointer to the I2C handle.
 * @param[out] temperature Pointer to store the temperature value in Celsius.
 * @return hdc_status_t Returns HDC_OK on success, HDC_ERROR on failure.
 */
hdc_status_t hdc1080_read_temperature(	I2C_HandleTypeDef *hi2c_x,
										float *temperature) {
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  if (temperature == NULL) {
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <hdc1080_read_temperature+0x14>
    return HDC_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e050      	b.n	80099b6 <hdc1080_read_temperature+0xb6>
  }

  uint8_t receive_data[2];
  uint8_t send_data = Temperature_register_add;
 8009914:	2300      	movs	r3, #0
 8009916:	72fb      	strb	r3, [r7, #11]
  uint16_t temp_x;

  /* Request temperature measurement */
  if (HAL_I2C_Master_Transmit(hi2c_x, HDC_1080_ADD << 1, &send_data, 1, 1000)
 8009918:	f107 020b 	add.w	r2, r7, #11
 800991c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	2301      	movs	r3, #1
 8009924:	2180      	movs	r1, #128	@ 0x80
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fb fdea 	bl	8005500 <HAL_I2C_Master_Transmit>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <hdc1080_read_temperature+0x36>
      != HAL_OK) {
    return HDC_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e03f      	b.n	80099b6 <hdc1080_read_temperature+0xb6>
  }

  /* Delay to allow measurement to complete (Max 7ms, but 15ms for accuracy) */
  HAL_Delay(15);
 8009936:	200f      	movs	r0, #15
 8009938:	f7f9 fe9a 	bl	8003670 <HAL_Delay>

  /* Read 2 bytes for temperature */
  if (HAL_I2C_Master_Receive(hi2c_x, HDC_1080_ADD << 1, receive_data, 2, 1000)
 800993c:	f107 020c 	add.w	r2, r7, #12
 8009940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	2302      	movs	r3, #2
 8009948:	2180      	movs	r1, #128	@ 0x80
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fb fed6 	bl	80056fc <HAL_I2C_Master_Receive>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <hdc1080_read_temperature+0x5a>
      != HAL_OK) {
    return HDC_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e02d      	b.n	80099b6 <hdc1080_read_temperature+0xb6>
  }

  /* Convert raw ADC value to temperature in Celsius */
  temp_x = ((receive_data[0] << 8) | receive_data[1]);
 800995a:	7b3b      	ldrb	r3, [r7, #12]
 800995c:	b21b      	sxth	r3, r3
 800995e:	021b      	lsls	r3, r3, #8
 8009960:	b21a      	sxth	r2, r3
 8009962:	7b7b      	ldrb	r3, [r7, #13]
 8009964:	b21b      	sxth	r3, r3
 8009966:	4313      	orrs	r3, r2
 8009968:	b21b      	sxth	r3, r3
 800996a:	81fb      	strh	r3, [r7, #14]
  *temperature = ((temp_x / 65536.0) * 165.0) - 40.0;
 800996c:	89fb      	ldrh	r3, [r7, #14]
 800996e:	4618      	mov	r0, r3
 8009970:	f7f6 fdd8 	bl	8000524 <__aeabi_i2d>
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	4b13      	ldr	r3, [pc, #76]	@ (80099c8 <hdc1080_read_temperature+0xc8>)
 800997a:	f7f6 ff67 	bl	800084c <__aeabi_ddiv>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4610      	mov	r0, r2
 8009984:	4619      	mov	r1, r3
 8009986:	a30e      	add	r3, pc, #56	@ (adr r3, 80099c0 <hdc1080_read_temperature+0xc0>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f7f6 fe34 	bl	80005f8 <__aeabi_dmul>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4610      	mov	r0, r2
 8009996:	4619      	mov	r1, r3
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	4b0b      	ldr	r3, [pc, #44]	@ (80099cc <hdc1080_read_temperature+0xcc>)
 800999e:	f7f6 fc73 	bl	8000288 <__aeabi_dsub>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4610      	mov	r0, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	f7f7 f91d 	bl	8000be8 <__aeabi_d2f>
 80099ae:	4602      	mov	r2, r0
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	601a      	str	r2, [r3, #0]

  return HDC_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	00000000 	.word	0x00000000
 80099c4:	4064a000 	.word	0x4064a000
 80099c8:	40f00000 	.word	0x40f00000
 80099cc:	40440000 	.word	0x40440000

080099d0 <hdc1080_read_humidity>:
 * @param[in] hi2c_x Pointer to the I2C handle.
 * @param[out] humidity Pointer to store the humidity value in percentage (%RH).
 * @return hdc_status_t Returns HDC_OK on success, HDC_ERROR on failure.
 */
hdc_status_t hdc1080_read_humidity(	I2C_HandleTypeDef *hi2c_x,
									uint8_t *humidity) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  if (humidity == NULL) {
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <hdc1080_read_humidity+0x14>
    return HDC_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e048      	b.n	8009a76 <hdc1080_read_humidity+0xa6>
  }

  uint8_t receive_data[2];
  uint8_t send_data = Humidity_register_add;
 80099e4:	2301      	movs	r3, #1
 80099e6:	72fb      	strb	r3, [r7, #11]
  uint16_t humi_x;

  /* Request humidity measurement */
  if (HAL_I2C_Master_Transmit(hi2c_x, HDC_1080_ADD << 1, &send_data, 1, 1000)
 80099e8:	f107 020b 	add.w	r2, r7, #11
 80099ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	2301      	movs	r3, #1
 80099f4:	2180      	movs	r1, #128	@ 0x80
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7fb fd82 	bl	8005500 <HAL_I2C_Master_Transmit>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <hdc1080_read_humidity+0x36>
      != HAL_OK) {
    return HDC_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e037      	b.n	8009a76 <hdc1080_read_humidity+0xa6>
  }

  /* Delay to allow measurement to complete */
  HAL_Delay(15);
 8009a06:	200f      	movs	r0, #15
 8009a08:	f7f9 fe32 	bl	8003670 <HAL_Delay>

  /* Read 2 bytes for humidity */
  if (HAL_I2C_Master_Receive(hi2c_x, HDC_1080_ADD << 1, receive_data, 2, 1000)
 8009a0c:	f107 020c 	add.w	r2, r7, #12
 8009a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	2302      	movs	r3, #2
 8009a18:	2180      	movs	r1, #128	@ 0x80
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7fb fe6e 	bl	80056fc <HAL_I2C_Master_Receive>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <hdc1080_read_humidity+0x5a>
      != HAL_OK) {
    return HDC_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e025      	b.n	8009a76 <hdc1080_read_humidity+0xa6>
  }

  /* Convert raw ADC value to humidity in %RH */
  humi_x = ((receive_data[0] << 8) | receive_data[1]);
 8009a2a:	7b3b      	ldrb	r3, [r7, #12]
 8009a2c:	b21b      	sxth	r3, r3
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	b21a      	sxth	r2, r3
 8009a32:	7b7b      	ldrb	r3, [r7, #13]
 8009a34:	b21b      	sxth	r3, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	b21b      	sxth	r3, r3
 8009a3a:	81fb      	strh	r3, [r7, #14]
  *humidity = (uint8_t) ((humi_x / 65536.0) * 100.0);
 8009a3c:	89fb      	ldrh	r3, [r7, #14]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7f6 fd70 	bl	8000524 <__aeabi_i2d>
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <hdc1080_read_humidity+0xb0>)
 8009a4a:	f7f6 feff 	bl	800084c <__aeabi_ddiv>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4610      	mov	r0, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <hdc1080_read_humidity+0xb4>)
 8009a5c:	f7f6 fdcc 	bl	80005f8 <__aeabi_dmul>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4610      	mov	r0, r2
 8009a66:	4619      	mov	r1, r3
 8009a68:	f7f7 f89e 	bl	8000ba8 <__aeabi_d2uiz>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	701a      	strb	r2, [r3, #0]

  return HDC_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	40f00000 	.word	0x40f00000
 8009a84:	40590000 	.word	0x40590000

08009a88 <get_temperature_reading>:
/**
 * @brief Reads the current temperature from the HDC1080 sensor.
 *
 * @param[out] temperature Pointer to store the read temperature value.
 */
void get_temperature_reading(float *temperature) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  if (temperature == NULL ) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10c      	bne.n	8009ab0 <get_temperature_reading+0x28>
    LogError( ("Invalid NULL pointer for temperature read.") );
 8009a96:	4a13      	ldr	r2, [pc, #76]	@ (8009ae4 <get_temperature_reading+0x5c>)
 8009a98:	232c      	movs	r3, #44	@ 0x2c
 8009a9a:	4913      	ldr	r1, [pc, #76]	@ (8009ae8 <get_temperature_reading+0x60>)
 8009a9c:	4813      	ldr	r0, [pc, #76]	@ (8009aec <get_temperature_reading+0x64>)
 8009a9e:	f003 ff59 	bl	800d954 <iprintf>
 8009aa2:	4813      	ldr	r0, [pc, #76]	@ (8009af0 <get_temperature_reading+0x68>)
 8009aa4:	f003 ff56 	bl	800d954 <iprintf>
 8009aa8:	4812      	ldr	r0, [pc, #72]	@ (8009af4 <get_temperature_reading+0x6c>)
 8009aaa:	f003 ffbb 	bl	800da24 <puts>
    return;
 8009aae:	e016      	b.n	8009ade <get_temperature_reading+0x56>
  }
  hdc1080_read_temperature(&hi2c1, temperature);
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	4811      	ldr	r0, [pc, #68]	@ (8009af8 <get_temperature_reading+0x70>)
 8009ab4:	f7ff ff24 	bl	8009900 <hdc1080_read_temperature>
  LogInfo( ("Temperature: %.2f C,", *temperature) );
 8009ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae4 <get_temperature_reading+0x5c>)
 8009aba:	2330      	movs	r3, #48	@ 0x30
 8009abc:	490a      	ldr	r1, [pc, #40]	@ (8009ae8 <get_temperature_reading+0x60>)
 8009abe:	480f      	ldr	r0, [pc, #60]	@ (8009afc <get_temperature_reading+0x74>)
 8009ac0:	f003 ff48 	bl	800d954 <iprintf>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7f6 fd3d 	bl	8000548 <__aeabi_f2d>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	480b      	ldr	r0, [pc, #44]	@ (8009b00 <get_temperature_reading+0x78>)
 8009ad4:	f003 ff3e 	bl	800d954 <iprintf>
 8009ad8:	4806      	ldr	r0, [pc, #24]	@ (8009af4 <get_temperature_reading+0x6c>)
 8009ada:	f003 ffa3 	bl	800da24 <puts>
}
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	080108cd 	.word	0x080108cd
 8009ae8:	080108dc 	.word	0x080108dc
 8009aec:	08010950 	.word	0x08010950
 8009af0:	08010968 	.word	0x08010968
 8009af4:	0801092c 	.word	0x0801092c
 8009af8:	20000238 	.word	0x20000238
 8009afc:	080108e4 	.word	0x080108e4
 8009b00:	08010994 	.word	0x08010994

08009b04 <get_humidity_reading>:
/**
 * @brief Reads the current humidity from the HDC1080 sensor.
 *
 * @param[out] humidity Pointer to store the read humidity value.
 */
void get_humidity_reading(uint8_t *humidity) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  if ( humidity == NULL) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10c      	bne.n	8009b2c <get_humidity_reading+0x28>
    LogError( ("Invalid NULL pointer for humidity read.") );
 8009b12:	4a11      	ldr	r2, [pc, #68]	@ (8009b58 <get_humidity_reading+0x54>)
 8009b14:	233b      	movs	r3, #59	@ 0x3b
 8009b16:	4911      	ldr	r1, [pc, #68]	@ (8009b5c <get_humidity_reading+0x58>)
 8009b18:	4811      	ldr	r0, [pc, #68]	@ (8009b60 <get_humidity_reading+0x5c>)
 8009b1a:	f003 ff1b 	bl	800d954 <iprintf>
 8009b1e:	4811      	ldr	r0, [pc, #68]	@ (8009b64 <get_humidity_reading+0x60>)
 8009b20:	f003 ff18 	bl	800d954 <iprintf>
 8009b24:	4810      	ldr	r0, [pc, #64]	@ (8009b68 <get_humidity_reading+0x64>)
 8009b26:	f003 ff7d 	bl	800da24 <puts>
    return;
 8009b2a:	e012      	b.n	8009b52 <get_humidity_reading+0x4e>
  }
  hdc1080_read_humidity(&hi2c1, humidity);
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	480f      	ldr	r0, [pc, #60]	@ (8009b6c <get_humidity_reading+0x68>)
 8009b30:	f7ff ff4e 	bl	80099d0 <hdc1080_read_humidity>
  LogInfo( ("Humidity: %u%%", *humidity) );
 8009b34:	4a08      	ldr	r2, [pc, #32]	@ (8009b58 <get_humidity_reading+0x54>)
 8009b36:	233f      	movs	r3, #63	@ 0x3f
 8009b38:	4908      	ldr	r1, [pc, #32]	@ (8009b5c <get_humidity_reading+0x58>)
 8009b3a:	480d      	ldr	r0, [pc, #52]	@ (8009b70 <get_humidity_reading+0x6c>)
 8009b3c:	f003 ff0a 	bl	800d954 <iprintf>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	480b      	ldr	r0, [pc, #44]	@ (8009b74 <get_humidity_reading+0x70>)
 8009b48:	f003 ff04 	bl	800d954 <iprintf>
 8009b4c:	4806      	ldr	r0, [pc, #24]	@ (8009b68 <get_humidity_reading+0x64>)
 8009b4e:	f003 ff69 	bl	800da24 <puts>
}
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	080108cd 	.word	0x080108cd
 8009b5c:	080108dc 	.word	0x080108dc
 8009b60:	08010950 	.word	0x08010950
 8009b64:	080109ac 	.word	0x080109ac
 8009b68:	0801092c 	.word	0x0801092c
 8009b6c:	20000238 	.word	0x20000238
 8009b70:	080108e4 	.word	0x080108e4
 8009b74:	080109d4 	.word	0x080109d4

08009b78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	@ 0x28
 8009b7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009b82:	4b7f      	ldr	r3, [pc, #508]	@ (8009d80 <xTaskIncrementTick+0x208>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f040 80ef 	bne.w	8009d6a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b8c:	4b7d      	ldr	r3, [pc, #500]	@ (8009d84 <xTaskIncrementTick+0x20c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009b94:	4a7b      	ldr	r2, [pc, #492]	@ (8009d84 <xTaskIncrementTick+0x20c>)
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d121      	bne.n	8009be4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009ba0:	4b79      	ldr	r3, [pc, #484]	@ (8009d88 <xTaskIncrementTick+0x210>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00b      	beq.n	8009bc2 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	e7fd      	b.n	8009bbe <xTaskIncrementTick+0x46>
 8009bc2:	4b71      	ldr	r3, [pc, #452]	@ (8009d88 <xTaskIncrementTick+0x210>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	4b70      	ldr	r3, [pc, #448]	@ (8009d8c <xTaskIncrementTick+0x214>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8009d88 <xTaskIncrementTick+0x210>)
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8009d8c <xTaskIncrementTick+0x214>)
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8009d90 <xTaskIncrementTick+0x218>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	4a6c      	ldr	r2, [pc, #432]	@ (8009d90 <xTaskIncrementTick+0x218>)
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	f000 f942 	bl	8009e68 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009be4:	4b6b      	ldr	r3, [pc, #428]	@ (8009d94 <xTaskIncrementTick+0x21c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6a3a      	ldr	r2, [r7, #32]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	f0c0 80a8 	bcc.w	8009d40 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bf0:	4b65      	ldr	r3, [pc, #404]	@ (8009d88 <xTaskIncrementTick+0x210>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8009bfa:	4b66      	ldr	r3, [pc, #408]	@ (8009d94 <xTaskIncrementTick+0x21c>)
 8009bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009c00:	601a      	str	r2, [r3, #0]
                    break;
 8009c02:	e09d      	b.n	8009d40 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c04:	4b60      	ldr	r3, [pc, #384]	@ (8009d88 <xTaskIncrementTick+0x210>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009c14:	6a3a      	ldr	r2, [r7, #32]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d203      	bcs.n	8009c24 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8009d94 <xTaskIncrementTick+0x21c>)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6013      	str	r3, [r2, #0]
                        break;
 8009c22:	e08d      	b.n	8009d40 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	613b      	str	r3, [r7, #16]
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	68d2      	ldr	r2, [r2, #12]
 8009c32:	609a      	str	r2, [r3, #8]
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	6892      	ldr	r2, [r2, #8]
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	3304      	adds	r3, #4
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d103      	bne.n	8009c52 <xTaskIncrementTick+0xda>
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2200      	movs	r2, #0
 8009c56:	615a      	str	r2, [r3, #20]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	1e5a      	subs	r2, r3, #1
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d01e      	beq.n	8009ca8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	6a12      	ldr	r2, [r2, #32]
 8009c78:	609a      	str	r2, [r3, #8]
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	69d2      	ldr	r2, [r2, #28]
 8009c82:	605a      	str	r2, [r3, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	3318      	adds	r3, #24
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d103      	bne.n	8009c98 <xTaskIncrementTick+0x120>
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	6a1a      	ldr	r2, [r3, #32]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	605a      	str	r2, [r3, #4]
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	1e5a      	subs	r2, r3, #1
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	2201      	movs	r2, #1
 8009cae:	409a      	lsls	r2, r3
 8009cb0:	4b39      	ldr	r3, [pc, #228]	@ (8009d98 <xTaskIncrementTick+0x220>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	4a38      	ldr	r2, [pc, #224]	@ (8009d98 <xTaskIncrementTick+0x220>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbe:	4937      	ldr	r1, [pc, #220]	@ (8009d9c <xTaskIncrementTick+0x224>)
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	3304      	adds	r3, #4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60bb      	str	r3, [r7, #8]
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	609a      	str	r2, [r3, #8]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	60da      	str	r2, [r3, #12]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	3204      	adds	r2, #4
 8009ce6:	605a      	str	r2, [r3, #4]
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	1d1a      	adds	r2, r3, #4
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	609a      	str	r2, [r3, #8]
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4a27      	ldr	r2, [pc, #156]	@ (8009d9c <xTaskIncrementTick+0x224>)
 8009cfe:	441a      	add	r2, r3
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	615a      	str	r2, [r3, #20]
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d08:	4924      	ldr	r1, [pc, #144]	@ (8009d9c <xTaskIncrementTick+0x224>)
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	440b      	add	r3, r1
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009d1a:	1c59      	adds	r1, r3, #1
 8009d1c:	481f      	ldr	r0, [pc, #124]	@ (8009d9c <xTaskIncrementTick+0x224>)
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4403      	add	r3, r0
 8009d28:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009da0 <xTaskIncrementTick+0x228>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d34:	429a      	cmp	r2, r3
 8009d36:	f67f af5b 	bls.w	8009bf0 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d3e:	e757      	b.n	8009bf0 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8009d40:	4b17      	ldr	r3, [pc, #92]	@ (8009da0 <xTaskIncrementTick+0x228>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d46:	4915      	ldr	r1, [pc, #84]	@ (8009d9c <xTaskIncrementTick+0x224>)
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d901      	bls.n	8009d5c <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8009d5c:	4b11      	ldr	r3, [pc, #68]	@ (8009da4 <xTaskIncrementTick+0x22c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d68:	e004      	b.n	8009d74 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009da8 <xTaskIncrementTick+0x230>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	4a0d      	ldr	r2, [pc, #52]	@ (8009da8 <xTaskIncrementTick+0x230>)
 8009d72:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3728      	adds	r7, #40	@ 0x28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20003c4c 	.word	0x20003c4c
 8009d84:	20003c34 	.word	0x20003c34
 8009d88:	20003c2c 	.word	0x20003c2c
 8009d8c:	20003c30 	.word	0x20003c30
 8009d90:	20003c44 	.word	0x20003c44
 8009d94:	20003c48 	.word	0x20003c48
 8009d98:	20003c38 	.word	0x20003c38
 8009d9c:	200039ac 	.word	0x200039ac
 8009da0:	200039a8 	.word	0x200039a8
 8009da4:	20003c40 	.word	0x20003c40
 8009da8:	20003c3c 	.word	0x20003c3c

08009dac <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8009db2:	4b28      	ldr	r3, [pc, #160]	@ (8009e54 <vTaskSwitchContext+0xa8>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8009dba:	4b27      	ldr	r3, [pc, #156]	@ (8009e58 <vTaskSwitchContext+0xac>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8009dc0:	e041      	b.n	8009e46 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8009dc2:	4b25      	ldr	r3, [pc, #148]	@ (8009e58 <vTaskSwitchContext+0xac>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8009dc8:	4b24      	ldr	r3, [pc, #144]	@ (8009e5c <vTaskSwitchContext+0xb0>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	fab3 f383 	clz	r3, r3
 8009dd4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
 8009dd8:	f1c3 031f 	rsb	r3, r3, #31
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	4920      	ldr	r1, [pc, #128]	@ (8009e60 <vTaskSwitchContext+0xb4>)
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <vTaskSwitchContext+0x5e>
    __asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	607b      	str	r3, [r7, #4]
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	e7fd      	b.n	8009e06 <vTaskSwitchContext+0x5a>
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4a12      	ldr	r2, [pc, #72]	@ (8009e60 <vTaskSwitchContext+0xb4>)
 8009e16:	4413      	add	r3, r2
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	605a      	str	r2, [r3, #4]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d103      	bne.n	8009e38 <vTaskSwitchContext+0x8c>
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	4a09      	ldr	r2, [pc, #36]	@ (8009e64 <vTaskSwitchContext+0xb8>)
 8009e40:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8009e42:	4b08      	ldr	r3, [pc, #32]	@ (8009e64 <vTaskSwitchContext+0xb8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
    }
 8009e46:	bf00      	nop
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20003c4c 	.word	0x20003c4c
 8009e58:	20003c40 	.word	0x20003c40
 8009e5c:	20003c38 	.word	0x20003c38
 8009e60:	200039ac 	.word	0x200039ac
 8009e64:	200039a8 	.word	0x200039a8

08009e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <prvResetNextTaskUnblockTime+0x30>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d104      	bne.n	8009e80 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009e76:	4b09      	ldr	r3, [pc, #36]	@ (8009e9c <prvResetNextTaskUnblockTime+0x34>)
 8009e78:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009e7e:	e005      	b.n	8009e8c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e80:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <prvResetNextTaskUnblockTime+0x30>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a04      	ldr	r2, [pc, #16]	@ (8009e9c <prvResetNextTaskUnblockTime+0x34>)
 8009e8a:	6013      	str	r3, [r2, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	20003c2c 	.word	0x20003c2c
 8009e9c:	20003c48 	.word	0x20003c48

08009ea0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009ea0:	4b07      	ldr	r3, [pc, #28]	@ (8009ec0 <pxCurrentTCBConst2>)
 8009ea2:	6819      	ldr	r1, [r3, #0]
 8009ea4:	6808      	ldr	r0, [r1, #0]
 8009ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eaa:	f380 8809 	msr	PSP, r0
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8811 	msr	BASEPRI, r0
 8009eba:	4770      	bx	lr
 8009ebc:	f3af 8000 	nop.w

08009ec0 <pxCurrentTCBConst2>:
 8009ec0:	200039a8 	.word	0x200039a8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
	...

08009ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009ed0:	f3ef 8009 	mrs	r0, PSP
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <pxCurrentTCBConst>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f01e 0f10 	tst.w	lr, #16
 8009ee0:	bf08      	it	eq
 8009ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	6010      	str	r0, [r2, #0]
 8009eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ef0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ef4:	f380 8811 	msr	BASEPRI, r0
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f7ff ff54 	bl	8009dac <vTaskSwitchContext>
 8009f04:	f04f 0000 	mov.w	r0, #0
 8009f08:	f380 8811 	msr	BASEPRI, r0
 8009f0c:	bc09      	pop	{r0, r3}
 8009f0e:	6819      	ldr	r1, [r3, #0]
 8009f10:	6808      	ldr	r0, [r1, #0]
 8009f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f16:	f01e 0f10 	tst.w	lr, #16
 8009f1a:	bf08      	it	eq
 8009f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f20:	f380 8809 	msr	PSP, r0
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w

08009f30 <pxCurrentTCBConst>:
 8009f30:	200039a8 	.word	0x200039a8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
    __asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
}
 8009f50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009f52:	f7ff fe11 	bl	8009b78 <xTaskIncrementTick>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f5c:	4b06      	ldr	r3, [pc, #24]	@ (8009f78 <SysTick_Handler+0x40>)
 8009f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	2300      	movs	r3, #0
 8009f66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8009f6e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	4a08      	ldr	r2, [pc, #32]	@ (8009fac <disk_status+0x30>)
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	79fa      	ldrb	r2, [r7, #7]
 8009f94:	4905      	ldr	r1, [pc, #20]	@ (8009fac <disk_status+0x30>)
 8009f96:	440a      	add	r2, r1
 8009f98:	7a12      	ldrb	r2, [r2, #8]
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4798      	blx	r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20003c78 	.word	0x20003c78

08009fb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8009ffc <disk_initialize+0x4c>)
 8009fc2:	5cd3      	ldrb	r3, [r2, r3]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d114      	bne.n	8009ff2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	4a0c      	ldr	r2, [pc, #48]	@ (8009ffc <disk_initialize+0x4c>)
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	79fa      	ldrb	r2, [r7, #7]
 8009fd6:	4909      	ldr	r1, [pc, #36]	@ (8009ffc <disk_initialize+0x4c>)
 8009fd8:	440a      	add	r2, r1
 8009fda:	7a12      	ldrb	r2, [r2, #8]
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4798      	blx	r3
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d103      	bne.n	8009ff2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	4a03      	ldr	r2, [pc, #12]	@ (8009ffc <disk_initialize+0x4c>)
 8009fee:	2101      	movs	r1, #1
 8009ff0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20003c78 	.word	0x20003c78

0800a000 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4a0a      	ldr	r2, [pc, #40]	@ (800a03c <disk_read+0x3c>)
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	689c      	ldr	r4, [r3, #8]
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4a07      	ldr	r2, [pc, #28]	@ (800a03c <disk_read+0x3c>)
 800a020:	4413      	add	r3, r2
 800a022:	7a18      	ldrb	r0, [r3, #8]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	47a0      	blx	r4
 800a02c:	4603      	mov	r3, r0
 800a02e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
}
 800a032:	4618      	mov	r0, r3
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	bd90      	pop	{r4, r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20003c78 	.word	0x20003c78

0800a040 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	4603      	mov	r3, r0
 800a04e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	4a0a      	ldr	r2, [pc, #40]	@ (800a07c <disk_write+0x3c>)
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	68dc      	ldr	r4, [r3, #12]
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	4a07      	ldr	r2, [pc, #28]	@ (800a07c <disk_write+0x3c>)
 800a060:	4413      	add	r3, r2
 800a062:	7a18      	ldrb	r0, [r3, #8]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	47a0      	blx	r4
 800a06c:	4603      	mov	r3, r0
 800a06e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
}
 800a072:	4618      	mov	r0, r3
 800a074:	371c      	adds	r7, #28
 800a076:	46bd      	mov	sp, r7
 800a078:	bd90      	pop	{r4, r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20003c78 	.word	0x20003c78

0800a080 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	603a      	str	r2, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
 800a08c:	460b      	mov	r3, r1
 800a08e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	4a09      	ldr	r2, [pc, #36]	@ (800a0b8 <disk_ioctl+0x38>)
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	79fa      	ldrb	r2, [r7, #7]
 800a09e:	4906      	ldr	r1, [pc, #24]	@ (800a0b8 <disk_ioctl+0x38>)
 800a0a0:	440a      	add	r2, r1
 800a0a2:	7a10      	ldrb	r0, [r2, #8]
 800a0a4:	79b9      	ldrb	r1, [r7, #6]
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	4798      	blx	r3
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20003c78 	.word	0x20003c78

0800a0bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a0cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	b21a      	sxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	b21b      	sxth	r3, r3
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	b21b      	sxth	r3, r3
 800a0de:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b085      	sub	sp, #20
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3303      	adds	r3, #3
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	3202      	adds	r2, #2
 800a106:	7812      	ldrb	r2, [r2, #0]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	3201      	adds	r2, #1
 800a114:	7812      	ldrb	r2, [r2, #0]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	7812      	ldrb	r2, [r2, #0]
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
	return rv;
 800a126:	68fb      	ldr	r3, [r7, #12]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	887a      	ldrh	r2, [r7, #2]
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	887b      	ldrh	r3, [r7, #2]
 800a14e:	0a1b      	lsrs	r3, r3, #8
 800a150:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	887a      	ldrh	r2, [r7, #2]
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	701a      	strb	r2, [r3, #0]
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a16a:	b480      	push	{r7}
 800a16c:	b083      	sub	sp, #12
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	b2d2      	uxtb	r2, r2
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	0a1b      	lsrs	r3, r3, #8
 800a196:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	b2d2      	uxtb	r2, r2
 800a1a2:	701a      	strb	r2, [r3, #0]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	b2d2      	uxtb	r2, r2
 800a1b4:	701a      	strb	r2, [r3, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a1c2:	b480      	push	{r7}
 800a1c4:	b087      	sub	sp, #28
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00d      	beq.n	800a1f8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	1c53      	adds	r3, r2, #1
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	1c59      	adds	r1, r3, #1
 800a1e6:	6179      	str	r1, [r7, #20]
 800a1e8:	7812      	ldrb	r2, [r2, #0]
 800a1ea:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1f1      	bne.n	800a1dc <mem_cpy+0x1a>
	}
}
 800a1f8:	bf00      	nop
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	617a      	str	r2, [r7, #20]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3b01      	subs	r3, #1
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1f3      	bne.n	800a214 <mem_set+0x10>
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a23a:	b480      	push	{r7}
 800a23c:	b089      	sub	sp, #36	@ 0x24
 800a23e:	af00      	add	r7, sp, #0
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	60b9      	str	r1, [r7, #8]
 800a244:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	61fb      	str	r3, [r7, #28]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	61fa      	str	r2, [r7, #28]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4619      	mov	r1, r3
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	61ba      	str	r2, [r7, #24]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	1acb      	subs	r3, r1, r3
 800a266:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	607b      	str	r3, [r7, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <mem_cmp+0x40>
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0eb      	beq.n	800a252 <mem_cmp+0x18>

	return r;
 800a27a:	697b      	ldr	r3, [r7, #20]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3724      	adds	r7, #36	@ 0x24
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a292:	e002      	b.n	800a29a <chk_chr+0x12>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3301      	adds	r3, #1
 800a298:	607b      	str	r3, [r7, #4]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d005      	beq.n	800a2ae <chk_chr+0x26>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d1f2      	bne.n	800a294 <chk_chr+0xc>
	return *str;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60bb      	str	r3, [r7, #8]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e029      	b.n	800a328 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a2d4:	4a27      	ldr	r2, [pc, #156]	@ (800a374 <chk_lock+0xb4>)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	4413      	add	r3, r2
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01d      	beq.n	800a31e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2e2:	4a24      	ldr	r2, [pc, #144]	@ (800a374 <chk_lock+0xb4>)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	4413      	add	r3, r2
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d116      	bne.n	800a322 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a2f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a374 <chk_lock+0xb4>)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a304:	429a      	cmp	r2, r3
 800a306:	d10c      	bne.n	800a322 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a308:	4a1a      	ldr	r2, [pc, #104]	@ (800a374 <chk_lock+0xb4>)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	011b      	lsls	r3, r3, #4
 800a30e:	4413      	add	r3, r2
 800a310:	3308      	adds	r3, #8
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a318:	429a      	cmp	r2, r3
 800a31a:	d102      	bne.n	800a322 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a31c:	e007      	b.n	800a32e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a31e:	2301      	movs	r3, #1
 800a320:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d9d2      	bls.n	800a2d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b02      	cmp	r3, #2
 800a332:	d109      	bne.n	800a348 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <chk_lock+0x80>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d101      	bne.n	800a344 <chk_lock+0x84>
 800a340:	2300      	movs	r3, #0
 800a342:	e010      	b.n	800a366 <chk_lock+0xa6>
 800a344:	2312      	movs	r3, #18
 800a346:	e00e      	b.n	800a366 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d108      	bne.n	800a360 <chk_lock+0xa0>
 800a34e:	4a09      	ldr	r2, [pc, #36]	@ (800a374 <chk_lock+0xb4>)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	4413      	add	r3, r2
 800a356:	330c      	adds	r3, #12
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a35e:	d101      	bne.n	800a364 <chk_lock+0xa4>
 800a360:	2310      	movs	r3, #16
 800a362:	e000      	b.n	800a366 <chk_lock+0xa6>
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20003c58 	.word	0x20003c58

0800a378 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a37e:	2300      	movs	r3, #0
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	e002      	b.n	800a38a <enq_lock+0x12>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3301      	adds	r3, #1
 800a388:	607b      	str	r3, [r7, #4]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d806      	bhi.n	800a39e <enq_lock+0x26>
 800a390:	4a09      	ldr	r2, [pc, #36]	@ (800a3b8 <enq_lock+0x40>)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	4413      	add	r3, r2
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1f2      	bne.n	800a384 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	bf14      	ite	ne
 800a3a4:	2301      	movne	r3, #1
 800a3a6:	2300      	moveq	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	20003c58 	.word	0x20003c58

0800a3bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e01f      	b.n	800a40c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a3cc:	4a41      	ldr	r2, [pc, #260]	@ (800a4d4 <inc_lock+0x118>)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	4413      	add	r3, r2
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d113      	bne.n	800a406 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a3de:	4a3d      	ldr	r2, [pc, #244]	@ (800a4d4 <inc_lock+0x118>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d109      	bne.n	800a406 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a3f2:	4a38      	ldr	r2, [pc, #224]	@ (800a4d4 <inc_lock+0x118>)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a402:	429a      	cmp	r2, r3
 800a404:	d006      	beq.n	800a414 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3301      	adds	r3, #1
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d9dc      	bls.n	800a3cc <inc_lock+0x10>
 800a412:	e000      	b.n	800a416 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a414:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d132      	bne.n	800a482 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e002      	b.n	800a428 <inc_lock+0x6c>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3301      	adds	r3, #1
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d806      	bhi.n	800a43c <inc_lock+0x80>
 800a42e:	4a29      	ldr	r2, [pc, #164]	@ (800a4d4 <inc_lock+0x118>)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	4413      	add	r3, r2
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f2      	bne.n	800a422 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d101      	bne.n	800a446 <inc_lock+0x8a>
 800a442:	2300      	movs	r3, #0
 800a444:	e040      	b.n	800a4c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4922      	ldr	r1, [pc, #136]	@ (800a4d4 <inc_lock+0x118>)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	011b      	lsls	r3, r3, #4
 800a450:	440b      	add	r3, r1
 800a452:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	491e      	ldr	r1, [pc, #120]	@ (800a4d4 <inc_lock+0x118>)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	440b      	add	r3, r1
 800a460:	3304      	adds	r3, #4
 800a462:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	695a      	ldr	r2, [r3, #20]
 800a468:	491a      	ldr	r1, [pc, #104]	@ (800a4d4 <inc_lock+0x118>)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	440b      	add	r3, r1
 800a470:	3308      	adds	r3, #8
 800a472:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a474:	4a17      	ldr	r2, [pc, #92]	@ (800a4d4 <inc_lock+0x118>)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	4413      	add	r3, r2
 800a47c:	330c      	adds	r3, #12
 800a47e:	2200      	movs	r2, #0
 800a480:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <inc_lock+0xe0>
 800a488:	4a12      	ldr	r2, [pc, #72]	@ (800a4d4 <inc_lock+0x118>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	4413      	add	r3, r2
 800a490:	330c      	adds	r3, #12
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <inc_lock+0xe0>
 800a498:	2300      	movs	r3, #0
 800a49a:	e015      	b.n	800a4c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d108      	bne.n	800a4b4 <inc_lock+0xf8>
 800a4a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d4 <inc_lock+0x118>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	011b      	lsls	r3, r3, #4
 800a4a8:	4413      	add	r3, r2
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	e001      	b.n	800a4b8 <inc_lock+0xfc>
 800a4b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4b8:	4906      	ldr	r1, [pc, #24]	@ (800a4d4 <inc_lock+0x118>)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	011b      	lsls	r3, r3, #4
 800a4be:	440b      	add	r3, r1
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3301      	adds	r3, #1
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	20003c58 	.word	0x20003c58

0800a4d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	607b      	str	r3, [r7, #4]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d825      	bhi.n	800a538 <dec_lock+0x60>
		n = Files[i].ctr;
 800a4ec:	4a17      	ldr	r2, [pc, #92]	@ (800a54c <dec_lock+0x74>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	4413      	add	r3, r2
 800a4f4:	330c      	adds	r3, #12
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a4fa:	89fb      	ldrh	r3, [r7, #14]
 800a4fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a500:	d101      	bne.n	800a506 <dec_lock+0x2e>
 800a502:	2300      	movs	r3, #0
 800a504:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a506:	89fb      	ldrh	r3, [r7, #14]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <dec_lock+0x3a>
 800a50c:	89fb      	ldrh	r3, [r7, #14]
 800a50e:	3b01      	subs	r3, #1
 800a510:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a512:	4a0e      	ldr	r2, [pc, #56]	@ (800a54c <dec_lock+0x74>)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	4413      	add	r3, r2
 800a51a:	330c      	adds	r3, #12
 800a51c:	89fa      	ldrh	r2, [r7, #14]
 800a51e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a520:	89fb      	ldrh	r3, [r7, #14]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d105      	bne.n	800a532 <dec_lock+0x5a>
 800a526:	4a09      	ldr	r2, [pc, #36]	@ (800a54c <dec_lock+0x74>)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	4413      	add	r3, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	737b      	strb	r3, [r7, #13]
 800a536:	e001      	b.n	800a53c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a538:	2302      	movs	r3, #2
 800a53a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a53c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	20003c58 	.word	0x20003c58

0800a550 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	e010      	b.n	800a580 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a55e:	4a0d      	ldr	r2, [pc, #52]	@ (800a594 <clear_lock+0x44>)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	4413      	add	r3, r2
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d105      	bne.n	800a57a <clear_lock+0x2a>
 800a56e:	4a09      	ldr	r2, [pc, #36]	@ (800a594 <clear_lock+0x44>)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	011b      	lsls	r3, r3, #4
 800a574:	4413      	add	r3, r2
 800a576:	2200      	movs	r2, #0
 800a578:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d9eb      	bls.n	800a55e <clear_lock+0xe>
	}
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	20003c58 	.word	0x20003c58

0800a598 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	78db      	ldrb	r3, [r3, #3]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d034      	beq.n	800a616 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	7858      	ldrb	r0, [r3, #1]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5bc:	2301      	movs	r3, #1
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	f7ff fd3e 	bl	800a040 <disk_write>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	73fb      	strb	r3, [r7, #15]
 800a5ce:	e022      	b.n	800a616 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	1ad2      	subs	r2, r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d217      	bcs.n	800a616 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	789b      	ldrb	r3, [r3, #2]
 800a5ea:	613b      	str	r3, [r7, #16]
 800a5ec:	e010      	b.n	800a610 <sync_window+0x78>
					wsect += fs->fsize;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7858      	ldrb	r0, [r3, #1]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a602:	2301      	movs	r3, #1
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	f7ff fd1b 	bl	800a040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d8eb      	bhi.n	800a5ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	429a      	cmp	r2, r3
 800a636:	d01b      	beq.n	800a670 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff ffad 	bl	800a598 <sync_window>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d113      	bne.n	800a670 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	7858      	ldrb	r0, [r3, #1]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a652:	2301      	movs	r3, #1
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	f7ff fcd3 	bl	800a000 <disk_read>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a666:	2301      	movs	r3, #1
 800a668:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff ff87 	bl	800a598 <sync_window>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d158      	bne.n	800a746 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d148      	bne.n	800a72e <sync_fs+0xb2>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	791b      	ldrb	r3, [r3, #4]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d144      	bne.n	800a72e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3330      	adds	r3, #48	@ 0x30
 800a6a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fda8 	bl	800a204 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3330      	adds	r3, #48	@ 0x30
 800a6b8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a6bc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7ff fd37 	bl	800a134 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3330      	adds	r3, #48	@ 0x30
 800a6ca:	4921      	ldr	r1, [pc, #132]	@ (800a750 <sync_fs+0xd4>)
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff fd4c 	bl	800a16a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3330      	adds	r3, #48	@ 0x30
 800a6d6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a6da:	491e      	ldr	r1, [pc, #120]	@ (800a754 <sync_fs+0xd8>)
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff fd44 	bl	800a16a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3330      	adds	r3, #48	@ 0x30
 800a6e6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	f7ff fd3a 	bl	800a16a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3330      	adds	r3, #48	@ 0x30
 800a6fa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	4619      	mov	r1, r3
 800a704:	4610      	mov	r0, r2
 800a706:	f7ff fd30 	bl	800a16a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7858      	ldrb	r0, [r3, #1]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a722:	2301      	movs	r3, #1
 800a724:	f7ff fc8c 	bl	800a040 <disk_write>
			fs->fsi_flag = 0;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2200      	movs	r2, #0
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fca2 	bl	800a080 <disk_ioctl>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <sync_fs+0xca>
 800a742:	2301      	movs	r3, #1
 800a744:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	41615252 	.word	0x41615252
 800a754:	61417272 	.word	0x61417272

0800a758 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	3b02      	subs	r3, #2
 800a766:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	3b02      	subs	r3, #2
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d301      	bcc.n	800a778 <clust2sect+0x20>
 800a774:	2300      	movs	r3, #0
 800a776:	e008      	b.n	800a78a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	895b      	ldrh	r3, [r3, #10]
 800a77c:	461a      	mov	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	fb03 f202 	mul.w	r2, r3, r2
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a788:	4413      	add	r3, r2
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b086      	sub	sp, #24
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d904      	bls.n	800a7b6 <get_fat+0x20>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d302      	bcc.n	800a7bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	e08e      	b.n	800a8da <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d061      	beq.n	800a88e <get_fat+0xf8>
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	dc7b      	bgt.n	800a8c6 <get_fat+0x130>
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d002      	beq.n	800a7d8 <get_fat+0x42>
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d041      	beq.n	800a85a <get_fat+0xc4>
 800a7d6:	e076      	b.n	800a8c6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	085b      	lsrs	r3, r3, #1
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6a1a      	ldr	r2, [r3, #32]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	0a5b      	lsrs	r3, r3, #9
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6938      	ldr	r0, [r7, #16]
 800a7f4:	f7ff ff14 	bl	800a620 <move_window>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d166      	bne.n	800a8cc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	60fa      	str	r2, [r7, #12]
 800a804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a810:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6a1a      	ldr	r2, [r3, #32]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	0a5b      	lsrs	r3, r3, #9
 800a81a:	4413      	add	r3, r2
 800a81c:	4619      	mov	r1, r3
 800a81e:	6938      	ldr	r0, [r7, #16]
 800a820:	f7ff fefe 	bl	800a620 <move_window>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d152      	bne.n	800a8d0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4413      	add	r3, r2
 800a834:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <get_fat+0xba>
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	091b      	lsrs	r3, r3, #4
 800a84e:	e002      	b.n	800a856 <get_fat+0xc0>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a856:	617b      	str	r3, [r7, #20]
			break;
 800a858:	e03f      	b.n	800a8da <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	6a1a      	ldr	r2, [r3, #32]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	0a1b      	lsrs	r3, r3, #8
 800a862:	4413      	add	r3, r2
 800a864:	4619      	mov	r1, r3
 800a866:	6938      	ldr	r0, [r7, #16]
 800a868:	f7ff feda 	bl	800a620 <move_window>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d130      	bne.n	800a8d4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a880:	4413      	add	r3, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fc1a 	bl	800a0bc <ld_word>
 800a888:	4603      	mov	r3, r0
 800a88a:	617b      	str	r3, [r7, #20]
			break;
 800a88c:	e025      	b.n	800a8da <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	6a1a      	ldr	r2, [r3, #32]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	09db      	lsrs	r3, r3, #7
 800a896:	4413      	add	r3, r2
 800a898:	4619      	mov	r1, r3
 800a89a:	6938      	ldr	r0, [r7, #16]
 800a89c:	f7ff fec0 	bl	800a620 <move_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d118      	bne.n	800a8d8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a8b4:	4413      	add	r3, r2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff fc19 	bl	800a0ee <ld_dword>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a8c2:	617b      	str	r3, [r7, #20]
			break;
 800a8c4:	e009      	b.n	800a8da <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	e006      	b.n	800a8da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8cc:	bf00      	nop
 800a8ce:	e004      	b.n	800a8da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8d0:	bf00      	nop
 800a8d2:	e002      	b.n	800a8da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8d4:	bf00      	nop
 800a8d6:	e000      	b.n	800a8da <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8d8:	bf00      	nop
		}
	}

	return val;
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a8e4:	b590      	push	{r4, r7, lr}
 800a8e6:	b089      	sub	sp, #36	@ 0x24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	f240 80d9 	bls.w	800aaae <put_fat+0x1ca>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	429a      	cmp	r2, r3
 800a904:	f080 80d3 	bcs.w	800aaae <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	f000 8096 	beq.w	800aa3e <put_fat+0x15a>
 800a912:	2b03      	cmp	r3, #3
 800a914:	f300 80cb 	bgt.w	800aaae <put_fat+0x1ca>
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d002      	beq.n	800a922 <put_fat+0x3e>
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d06e      	beq.n	800a9fe <put_fat+0x11a>
 800a920:	e0c5      	b.n	800aaae <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	085b      	lsrs	r3, r3, #1
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	4413      	add	r3, r2
 800a92e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a1a      	ldr	r2, [r3, #32]
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	0a5b      	lsrs	r3, r3, #9
 800a938:	4413      	add	r3, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff fe6f 	bl	800a620 <move_window>
 800a942:	4603      	mov	r3, r0
 800a944:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a946:	7ffb      	ldrb	r3, [r7, #31]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f040 80a9 	bne.w	800aaa0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	1c59      	adds	r1, r3, #1
 800a958:	61b9      	str	r1, [r7, #24]
 800a95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95e:	4413      	add	r3, r2
 800a960:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00d      	beq.n	800a988 <put_fat+0xa4>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	b25b      	sxtb	r3, r3
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	b25a      	sxtb	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	b25b      	sxtb	r3, r3
 800a980:	4313      	orrs	r3, r2
 800a982:	b25b      	sxtb	r3, r3
 800a984:	b2db      	uxtb	r3, r3
 800a986:	e001      	b.n	800a98c <put_fat+0xa8>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2201      	movs	r2, #1
 800a994:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1a      	ldr	r2, [r3, #32]
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	0a5b      	lsrs	r3, r3, #9
 800a99e:	4413      	add	r3, r2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7ff fe3c 	bl	800a620 <move_window>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d178      	bne.n	800aaa4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9be:	4413      	add	r3, r2
 800a9c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <put_fat+0xf0>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	091b      	lsrs	r3, r3, #4
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	e00e      	b.n	800a9f2 <put_fat+0x10e>
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	f023 030f 	bic.w	r3, r3, #15
 800a9de:	b25a      	sxtb	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	b25b      	sxtb	r3, r3
 800a9e6:	f003 030f 	and.w	r3, r3, #15
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	b25b      	sxtb	r3, r3
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	70da      	strb	r2, [r3, #3]
			break;
 800a9fc:	e057      	b.n	800aaae <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6a1a      	ldr	r2, [r3, #32]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	0a1b      	lsrs	r3, r3, #8
 800aa06:	4413      	add	r3, r2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7ff fe08 	bl	800a620 <move_window>
 800aa10:	4603      	mov	r3, r0
 800aa12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa14:	7ffb      	ldrb	r3, [r7, #31]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d146      	bne.n	800aaa8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800aa28:	4413      	add	r3, r2
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	b292      	uxth	r2, r2
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff fb7f 	bl	800a134 <st_word>
			fs->wflag = 1;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	70da      	strb	r2, [r3, #3]
			break;
 800aa3c:	e037      	b.n	800aaae <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6a1a      	ldr	r2, [r3, #32]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	09db      	lsrs	r3, r3, #7
 800aa46:	4413      	add	r3, r2
 800aa48:	4619      	mov	r1, r3
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fde8 	bl	800a620 <move_window>
 800aa50:	4603      	mov	r3, r0
 800aa52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa54:	7ffb      	ldrb	r3, [r7, #31]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d128      	bne.n	800aaac <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800aa6e:	4413      	add	r3, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fb3c 	bl	800a0ee <ld_dword>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800aa7c:	4323      	orrs	r3, r4
 800aa7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800aa8e:	4413      	add	r3, r2
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fb69 	bl	800a16a <st_dword>
			fs->wflag = 1;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	70da      	strb	r2, [r3, #3]
			break;
 800aa9e:	e006      	b.n	800aaae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800aaa0:	bf00      	nop
 800aaa2:	e004      	b.n	800aaae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800aaa4:	bf00      	nop
 800aaa6:	e002      	b.n	800aaae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800aaa8:	bf00      	nop
 800aaaa:	e000      	b.n	800aaae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800aaac:	bf00      	nop
		}
	}
	return res;
 800aaae:	7ffb      	ldrb	r3, [r7, #31]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3724      	adds	r7, #36	@ 0x24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd90      	pop	{r4, r7, pc}

0800aab8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d904      	bls.n	800aade <remove_chain+0x26>
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d301      	bcc.n	800aae2 <remove_chain+0x2a>
 800aade:	2302      	movs	r3, #2
 800aae0:	e04b      	b.n	800ab7a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00c      	beq.n	800ab02 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	69b8      	ldr	r0, [r7, #24]
 800aaf0:	f7ff fef8 	bl	800a8e4 <put_fat>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aaf8:	7ffb      	ldrb	r3, [r7, #31]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <remove_chain+0x4a>
 800aafe:	7ffb      	ldrb	r3, [r7, #31]
 800ab00:	e03b      	b.n	800ab7a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff fe46 	bl	800a796 <get_fat>
 800ab0a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d031      	beq.n	800ab76 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <remove_chain+0x64>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e02e      	b.n	800ab7a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab22:	d101      	bne.n	800ab28 <remove_chain+0x70>
 800ab24:	2301      	movs	r3, #1
 800ab26:	e028      	b.n	800ab7a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ab28:	2200      	movs	r2, #0
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	69b8      	ldr	r0, [r7, #24]
 800ab2e:	f7ff fed9 	bl	800a8e4 <put_fat>
 800ab32:	4603      	mov	r3, r0
 800ab34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ab36:	7ffb      	ldrb	r3, [r7, #31]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <remove_chain+0x88>
 800ab3c:	7ffb      	ldrb	r3, [r7, #31]
 800ab3e:	e01c      	b.n	800ab7a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	691a      	ldr	r2, [r3, #16]
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	695b      	ldr	r3, [r3, #20]
 800ab48:	3b02      	subs	r3, #2
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d20b      	bcs.n	800ab66 <remove_chain+0xae>
			fs->free_clst++;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	791b      	ldrb	r3, [r3, #4]
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d3c6      	bcc.n	800ab02 <remove_chain+0x4a>
 800ab74:	e000      	b.n	800ab78 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ab76:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b088      	sub	sp, #32
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10d      	bne.n	800abb4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d004      	beq.n	800abae <create_chain+0x2c>
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d31b      	bcc.n	800abe6 <create_chain+0x64>
 800abae:	2301      	movs	r3, #1
 800abb0:	61bb      	str	r3, [r7, #24]
 800abb2:	e018      	b.n	800abe6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fded 	bl	800a796 <get_fat>
 800abbc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d801      	bhi.n	800abc8 <create_chain+0x46>
 800abc4:	2301      	movs	r3, #1
 800abc6:	e070      	b.n	800acaa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abce:	d101      	bne.n	800abd4 <create_chain+0x52>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	e06a      	b.n	800acaa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d201      	bcs.n	800abe2 <create_chain+0x60>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	e063      	b.n	800acaa <create_chain+0x128>
		scl = clst;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	695b      	ldr	r3, [r3, #20]
 800abf4:	69fa      	ldr	r2, [r7, #28]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d307      	bcc.n	800ac0a <create_chain+0x88>
				ncl = 2;
 800abfa:	2302      	movs	r3, #2
 800abfc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d901      	bls.n	800ac0a <create_chain+0x88>
 800ac06:	2300      	movs	r3, #0
 800ac08:	e04f      	b.n	800acaa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ac0a:	69f9      	ldr	r1, [r7, #28]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fdc2 	bl	800a796 <get_fat>
 800ac12:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00e      	beq.n	800ac38 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d003      	beq.n	800ac28 <create_chain+0xa6>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac26:	d101      	bne.n	800ac2c <create_chain+0xaa>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	e03e      	b.n	800acaa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d1da      	bne.n	800abea <create_chain+0x68>
 800ac34:	2300      	movs	r3, #0
 800ac36:	e038      	b.n	800acaa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ac38:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ac3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3e:	69f9      	ldr	r1, [r7, #28]
 800ac40:	6938      	ldr	r0, [r7, #16]
 800ac42:	f7ff fe4f 	bl	800a8e4 <put_fat>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d109      	bne.n	800ac64 <create_chain+0xe2>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d006      	beq.n	800ac64 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f7ff fe42 	bl	800a8e4 <put_fat>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d116      	bne.n	800ac98 <create_chain+0x116>
		fs->last_clst = ncl;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	3b02      	subs	r3, #2
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d804      	bhi.n	800ac88 <create_chain+0x106>
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	1e5a      	subs	r2, r3, #1
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	791b      	ldrb	r3, [r3, #4]
 800ac8c:	f043 0301 	orr.w	r3, r3, #1
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	711a      	strb	r2, [r3, #4]
 800ac96:	e007      	b.n	800aca8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d102      	bne.n	800aca4 <create_chain+0x122>
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aca2:	e000      	b.n	800aca6 <create_chain+0x124>
 800aca4:	2301      	movs	r3, #1
 800aca6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aca8:	69fb      	ldr	r3, [r7, #28]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b087      	sub	sp, #28
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc6:	3304      	adds	r3, #4
 800acc8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	0a5b      	lsrs	r3, r3, #9
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	8952      	ldrh	r2, [r2, #10]
 800acd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800acd6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	1d1a      	adds	r2, r3, #4
 800acdc:	613a      	str	r2, [r7, #16]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <clmt_clust+0x3a>
 800ace8:	2300      	movs	r3, #0
 800acea:	e010      	b.n	800ad0e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d307      	bcc.n	800ad04 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	3304      	adds	r3, #4
 800ad00:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad02:	e7e9      	b.n	800acd8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ad04:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	4413      	add	r3, r2
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b086      	sub	sp, #24
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad30:	d204      	bcs.n	800ad3c <dir_sdi+0x22>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	f003 031f 	and.w	r3, r3, #31
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e063      	b.n	800ae08 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <dir_sdi+0x46>
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d902      	bls.n	800ad60 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10c      	bne.n	800ad80 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	095b      	lsrs	r3, r3, #5
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	8912      	ldrh	r2, [r2, #8]
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d301      	bcc.n	800ad76 <dir_sdi+0x5c>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e048      	b.n	800ae08 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	61da      	str	r2, [r3, #28]
 800ad7e:	e029      	b.n	800add4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	895b      	ldrh	r3, [r3, #10]
 800ad84:	025b      	lsls	r3, r3, #9
 800ad86:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad88:	e019      	b.n	800adbe <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fd01 	bl	800a796 <get_fat>
 800ad94:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9c:	d101      	bne.n	800ada2 <dir_sdi+0x88>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e032      	b.n	800ae08 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d904      	bls.n	800adb2 <dir_sdi+0x98>
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d301      	bcc.n	800adb6 <dir_sdi+0x9c>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e028      	b.n	800ae08 <dir_sdi+0xee>
			ofs -= csz;
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d2e1      	bcs.n	800ad8a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800adc6:	6979      	ldr	r1, [r7, #20]
 800adc8:	6938      	ldr	r0, [r7, #16]
 800adca:	f7ff fcc5 	bl	800a758 <clust2sect>
 800adce:	4602      	mov	r2, r0
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	69db      	ldr	r3, [r3, #28]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <dir_sdi+0xcc>
 800ade2:	2302      	movs	r3, #2
 800ade4:	e010      	b.n	800ae08 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	69da      	ldr	r2, [r3, #28]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	0a5b      	lsrs	r3, r3, #9
 800adee:	441a      	add	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae00:	441a      	add	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	3320      	adds	r3, #32
 800ae26:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <dir_next+0x28>
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae36:	d301      	bcc.n	800ae3c <dir_next+0x2c>
 800ae38:	2304      	movs	r3, #4
 800ae3a:	e0aa      	b.n	800af92 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f040 8098 	bne.w	800af78 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10b      	bne.n	800ae72 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	095b      	lsrs	r3, r3, #5
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	8912      	ldrh	r2, [r2, #8]
 800ae62:	4293      	cmp	r3, r2
 800ae64:	f0c0 8088 	bcc.w	800af78 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	61da      	str	r2, [r3, #28]
 800ae6e:	2304      	movs	r3, #4
 800ae70:	e08f      	b.n	800af92 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	0a5b      	lsrs	r3, r3, #9
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	8952      	ldrh	r2, [r2, #10]
 800ae7a:	3a01      	subs	r2, #1
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d17a      	bne.n	800af78 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	f7ff fc83 	bl	800a796 <get_fat>
 800ae90:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d801      	bhi.n	800ae9c <dir_next+0x8c>
 800ae98:	2302      	movs	r3, #2
 800ae9a:	e07a      	b.n	800af92 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea2:	d101      	bne.n	800aea8 <dir_next+0x98>
 800aea4:	2301      	movs	r3, #1
 800aea6:	e074      	b.n	800af92 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	695b      	ldr	r3, [r3, #20]
 800aeac:	697a      	ldr	r2, [r7, #20]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d358      	bcc.n	800af64 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d104      	bne.n	800aec2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	61da      	str	r2, [r3, #28]
 800aebe:	2304      	movs	r3, #4
 800aec0:	e067      	b.n	800af92 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	4619      	mov	r1, r3
 800aeca:	4610      	mov	r0, r2
 800aecc:	f7ff fe59 	bl	800ab82 <create_chain>
 800aed0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <dir_next+0xcc>
 800aed8:	2307      	movs	r3, #7
 800aeda:	e05a      	b.n	800af92 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d101      	bne.n	800aee6 <dir_next+0xd6>
 800aee2:	2302      	movs	r3, #2
 800aee4:	e055      	b.n	800af92 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeec:	d101      	bne.n	800aef2 <dir_next+0xe2>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e04f      	b.n	800af92 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fb50 	bl	800a598 <sync_window>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <dir_next+0xf2>
 800aefe:	2301      	movs	r3, #1
 800af00:	e047      	b.n	800af92 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3330      	adds	r3, #48	@ 0x30
 800af06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af0a:	2100      	movs	r1, #0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff f979 	bl	800a204 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af12:	2300      	movs	r3, #0
 800af14:	613b      	str	r3, [r7, #16]
 800af16:	6979      	ldr	r1, [r7, #20]
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff fc1d 	bl	800a758 <clust2sect>
 800af1e:	4602      	mov	r2, r0
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	62da      	str	r2, [r3, #44]	@ 0x2c
 800af24:	e012      	b.n	800af4c <dir_next+0x13c>
						fs->wflag = 1;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2201      	movs	r2, #1
 800af2a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fb33 	bl	800a598 <sync_window>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <dir_next+0x12c>
 800af38:	2301      	movs	r3, #1
 800af3a:	e02a      	b.n	800af92 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3301      	adds	r3, #1
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	895b      	ldrh	r3, [r3, #10]
 800af50:	461a      	mov	r2, r3
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	4293      	cmp	r3, r2
 800af56:	d3e6      	bcc.n	800af26 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	1ad2      	subs	r2, r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800af6a:	6979      	ldr	r1, [r7, #20]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7ff fbf3 	bl	800a758 <clust2sect>
 800af72:	4602      	mov	r2, r0
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8a:	441a      	add	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b086      	sub	sp, #24
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800afaa:	2100      	movs	r1, #0
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff feb4 	bl	800ad1a <dir_sdi>
 800afb2:	4603      	mov	r3, r0
 800afb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d12b      	bne.n	800b014 <dir_alloc+0x7a>
		n = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	4619      	mov	r1, r3
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fb2a 	bl	800a620 <move_window>
 800afcc:	4603      	mov	r3, r0
 800afce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d11d      	bne.n	800b012 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2be5      	cmp	r3, #229	@ 0xe5
 800afde:	d004      	beq.n	800afea <dir_alloc+0x50>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d107      	bne.n	800affa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	3301      	adds	r3, #1
 800afee:	613b      	str	r3, [r7, #16]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d102      	bne.n	800affe <dir_alloc+0x64>
 800aff8:	e00c      	b.n	800b014 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800affa:	2300      	movs	r3, #0
 800affc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800affe:	2101      	movs	r1, #1
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff ff05 	bl	800ae10 <dir_next>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0d7      	beq.n	800afc0 <dir_alloc+0x26>
 800b010:	e000      	b.n	800b014 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b012:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	2b04      	cmp	r3, #4
 800b018:	d101      	bne.n	800b01e <dir_alloc+0x84>
 800b01a:	2307      	movs	r3, #7
 800b01c:	75fb      	strb	r3, [r7, #23]
	return res;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	331a      	adds	r3, #26
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff f840 	bl	800a0bc <ld_word>
 800b03c:	4603      	mov	r3, r0
 800b03e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b03      	cmp	r3, #3
 800b046:	d109      	bne.n	800b05c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	3314      	adds	r3, #20
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff f835 	bl	800a0bc <ld_word>
 800b052:	4603      	mov	r3, r0
 800b054:	041b      	lsls	r3, r3, #16
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b05c:	68fb      	ldr	r3, [r7, #12]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	331a      	adds	r3, #26
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	b292      	uxth	r2, r2
 800b07a:	4611      	mov	r1, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff f859 	bl	800a134 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b03      	cmp	r3, #3
 800b088:	d109      	bne.n	800b09e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f103 0214 	add.w	r2, r3, #20
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	b29b      	uxth	r3, r3
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7ff f84b 	bl	800a134 <st_word>
	}
}
 800b09e:	bf00      	nop
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b086      	sub	sp, #24
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff fe2f 	bl	800ad1a <dir_sdi>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <dir_find+0x24>
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	e03e      	b.n	800b148 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6938      	ldr	r0, [r7, #16]
 800b0d2:	f7ff faa5 	bl	800a620 <move_window>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d12f      	bne.n	800b140 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <dir_find+0x4e>
 800b0ee:	2304      	movs	r3, #4
 800b0f0:	75fb      	strb	r3, [r7, #23]
 800b0f2:	e028      	b.n	800b146 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	330b      	adds	r3, #11
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b100:	b2da      	uxtb	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	330b      	adds	r3, #11
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10a      	bne.n	800b12c <dir_find+0x86>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a18      	ldr	r0, [r3, #32]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3324      	adds	r3, #36	@ 0x24
 800b11e:	220b      	movs	r2, #11
 800b120:	4619      	mov	r1, r3
 800b122:	f7ff f88a 	bl	800a23a <mem_cmp>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00b      	beq.n	800b144 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b12c:	2100      	movs	r1, #0
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff fe6e 	bl	800ae10 <dir_next>
 800b134:	4603      	mov	r3, r0
 800b136:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0c5      	beq.n	800b0ca <dir_find+0x24>
 800b13e:	e002      	b.n	800b146 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b144:	bf00      	nop

	return res;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b15e:	2101      	movs	r1, #1
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ff1a 	bl	800af9a <dir_alloc>
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d11c      	bne.n	800b1aa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	4619      	mov	r1, r3
 800b176:	68b8      	ldr	r0, [r7, #8]
 800b178:	f7ff fa52 	bl	800a620 <move_window>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d111      	bne.n	800b1aa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	2220      	movs	r2, #32
 800b18c:	2100      	movs	r1, #0
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff f838 	bl	800a204 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a18      	ldr	r0, [r3, #32]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3324      	adds	r3, #36	@ 0x24
 800b19c:	220b      	movs	r2, #11
 800b19e:	4619      	mov	r1, r3
 800b1a0:	f7ff f80f 	bl	800a1c2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3324      	adds	r3, #36	@ 0x24
 800b1c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b1ca:	220b      	movs	r2, #11
 800b1cc:	2120      	movs	r1, #32
 800b1ce:	68b8      	ldr	r0, [r7, #8]
 800b1d0:	f7ff f818 	bl	800a204 <mem_set>
	si = i = 0; ni = 8;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	613b      	str	r3, [r7, #16]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	2308      	movs	r3, #8
 800b1de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	61fa      	str	r2, [r7, #28]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1ee:	7efb      	ldrb	r3, [r7, #27]
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	d94e      	bls.n	800b292 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b1f4:	7efb      	ldrb	r3, [r7, #27]
 800b1f6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b1f8:	d006      	beq.n	800b208 <create_name+0x54>
 800b1fa:	7efb      	ldrb	r3, [r7, #27]
 800b1fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1fe:	d110      	bne.n	800b222 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b200:	e002      	b.n	800b208 <create_name+0x54>
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	3301      	adds	r3, #1
 800b206:	61fb      	str	r3, [r7, #28]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	4413      	add	r3, r2
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b2f      	cmp	r3, #47	@ 0x2f
 800b212:	d0f6      	beq.n	800b202 <create_name+0x4e>
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	4413      	add	r3, r2
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b21e:	d0f0      	beq.n	800b202 <create_name+0x4e>
			break;
 800b220:	e038      	b.n	800b294 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b222:	7efb      	ldrb	r3, [r7, #27]
 800b224:	2b2e      	cmp	r3, #46	@ 0x2e
 800b226:	d003      	beq.n	800b230 <create_name+0x7c>
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d30c      	bcc.n	800b24a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b0b      	cmp	r3, #11
 800b234:	d002      	beq.n	800b23c <create_name+0x88>
 800b236:	7efb      	ldrb	r3, [r7, #27]
 800b238:	2b2e      	cmp	r3, #46	@ 0x2e
 800b23a:	d001      	beq.n	800b240 <create_name+0x8c>
 800b23c:	2306      	movs	r3, #6
 800b23e:	e044      	b.n	800b2ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b240:	2308      	movs	r3, #8
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	230b      	movs	r3, #11
 800b246:	617b      	str	r3, [r7, #20]
			continue;
 800b248:	e022      	b.n	800b290 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b24a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	da04      	bge.n	800b25c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b252:	7efb      	ldrb	r3, [r7, #27]
 800b254:	3b80      	subs	r3, #128	@ 0x80
 800b256:	4a1f      	ldr	r2, [pc, #124]	@ (800b2d4 <create_name+0x120>)
 800b258:	5cd3      	ldrb	r3, [r2, r3]
 800b25a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b25c:	7efb      	ldrb	r3, [r7, #27]
 800b25e:	4619      	mov	r1, r3
 800b260:	481d      	ldr	r0, [pc, #116]	@ (800b2d8 <create_name+0x124>)
 800b262:	f7ff f811 	bl	800a288 <chk_chr>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <create_name+0xbc>
 800b26c:	2306      	movs	r3, #6
 800b26e:	e02c      	b.n	800b2ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b270:	7efb      	ldrb	r3, [r7, #27]
 800b272:	2b60      	cmp	r3, #96	@ 0x60
 800b274:	d905      	bls.n	800b282 <create_name+0xce>
 800b276:	7efb      	ldrb	r3, [r7, #27]
 800b278:	2b7a      	cmp	r3, #122	@ 0x7a
 800b27a:	d802      	bhi.n	800b282 <create_name+0xce>
 800b27c:	7efb      	ldrb	r3, [r7, #27]
 800b27e:	3b20      	subs	r3, #32
 800b280:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	613a      	str	r2, [r7, #16]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	4413      	add	r3, r2
 800b28c:	7efa      	ldrb	r2, [r7, #27]
 800b28e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b290:	e7a6      	b.n	800b1e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b292:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	441a      	add	r2, r3
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <create_name+0xf4>
 800b2a4:	2306      	movs	r3, #6
 800b2a6:	e010      	b.n	800b2ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2be5      	cmp	r3, #229	@ 0xe5
 800b2ae:	d102      	bne.n	800b2b6 <create_name+0x102>
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2205      	movs	r2, #5
 800b2b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b2b6:	7efb      	ldrb	r3, [r7, #27]
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	d801      	bhi.n	800b2c0 <create_name+0x10c>
 800b2bc:	2204      	movs	r2, #4
 800b2be:	e000      	b.n	800b2c2 <create_name+0x10e>
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	330b      	adds	r3, #11
 800b2c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b2c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	08010a54 	.word	0x08010a54
 800b2d8:	080109e4 	.word	0x080109e4

0800b2dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b2f0:	e002      	b.n	800b2f8 <follow_path+0x1c>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2fe:	d0f8      	beq.n	800b2f2 <follow_path+0x16>
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b5c      	cmp	r3, #92	@ 0x5c
 800b306:	d0f4      	beq.n	800b2f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	2200      	movs	r2, #0
 800b30c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b1f      	cmp	r3, #31
 800b314:	d80a      	bhi.n	800b32c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2280      	movs	r2, #128	@ 0x80
 800b31a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b31e:	2100      	movs	r1, #0
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff fcfa 	bl	800ad1a <dir_sdi>
 800b326:	4603      	mov	r3, r0
 800b328:	75fb      	strb	r3, [r7, #23]
 800b32a:	e043      	b.n	800b3b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b32c:	463b      	mov	r3, r7
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff ff3f 	bl	800b1b4 <create_name>
 800b336:	4603      	mov	r3, r0
 800b338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b33a:	7dfb      	ldrb	r3, [r7, #23]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d134      	bne.n	800b3aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff feb0 	bl	800b0a6 <dir_find>
 800b346:	4603      	mov	r3, r0
 800b348:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b350:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d127      	bne.n	800b3ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b35e:	7afb      	ldrb	r3, [r7, #11]
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	d122      	bne.n	800b3ae <follow_path+0xd2>
 800b368:	2305      	movs	r3, #5
 800b36a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b36c:	e01f      	b.n	800b3ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b36e:	7afb      	ldrb	r3, [r7, #11]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d11c      	bne.n	800b3b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	799b      	ldrb	r3, [r3, #6]
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b384:	2305      	movs	r3, #5
 800b386:	75fb      	strb	r3, [r7, #23]
 800b388:	e014      	b.n	800b3b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b398:	4413      	add	r3, r2
 800b39a:	4619      	mov	r1, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7ff fe43 	bl	800b028 <ld_clust>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3a8:	e7c0      	b.n	800b32c <follow_path+0x50>
			if (res != FR_OK) break;
 800b3aa:	bf00      	nop
 800b3ac:	e002      	b.n	800b3b4 <follow_path+0xd8>
				break;
 800b3ae:	bf00      	nop
 800b3b0:	e000      	b.n	800b3b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b3b2:	bf00      	nop
			}
		}
	}

	return res;
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b087      	sub	sp, #28
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d031      	beq.n	800b438 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	e002      	b.n	800b3e2 <get_ldnumber+0x24>
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	2b20      	cmp	r3, #32
 800b3e8:	d903      	bls.n	800b3f2 <get_ldnumber+0x34>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b3a      	cmp	r3, #58	@ 0x3a
 800b3f0:	d1f4      	bne.n	800b3dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b3a      	cmp	r3, #58	@ 0x3a
 800b3f8:	d11c      	bne.n	800b434 <get_ldnumber+0x76>
			tp = *path;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	60fa      	str	r2, [r7, #12]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	3b30      	subs	r3, #48	@ 0x30
 800b40a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2b09      	cmp	r3, #9
 800b410:	d80e      	bhi.n	800b430 <get_ldnumber+0x72>
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	429a      	cmp	r2, r3
 800b418:	d10a      	bne.n	800b430 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d107      	bne.n	800b430 <get_ldnumber+0x72>
					vol = (int)i;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3301      	adds	r3, #1
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	e002      	b.n	800b43a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b434:	2300      	movs	r3, #0
 800b436:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b438:	693b      	ldr	r3, [r7, #16]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
	...

0800b448 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	70da      	strb	r2, [r3, #3]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff f8dc 	bl	800a620 <move_window>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <check_fs+0x2a>
 800b46e:	2304      	movs	r3, #4
 800b470:	e038      	b.n	800b4e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3330      	adds	r3, #48	@ 0x30
 800b476:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fe1e 	bl	800a0bc <ld_word>
 800b480:	4603      	mov	r3, r0
 800b482:	461a      	mov	r2, r3
 800b484:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b488:	429a      	cmp	r2, r3
 800b48a:	d001      	beq.n	800b490 <check_fs+0x48>
 800b48c:	2303      	movs	r3, #3
 800b48e:	e029      	b.n	800b4e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b496:	2be9      	cmp	r3, #233	@ 0xe9
 800b498:	d009      	beq.n	800b4ae <check_fs+0x66>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b4a0:	2beb      	cmp	r3, #235	@ 0xeb
 800b4a2:	d11e      	bne.n	800b4e2 <check_fs+0x9a>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b4aa:	2b90      	cmp	r3, #144	@ 0x90
 800b4ac:	d119      	bne.n	800b4e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3330      	adds	r3, #48	@ 0x30
 800b4b2:	3336      	adds	r3, #54	@ 0x36
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fe1a 	bl	800a0ee <ld_dword>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b4c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b4ec <check_fs+0xa4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d101      	bne.n	800b4ca <check_fs+0x82>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e00c      	b.n	800b4e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3330      	adds	r3, #48	@ 0x30
 800b4ce:	3352      	adds	r3, #82	@ 0x52
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fe fe0c 	bl	800a0ee <ld_dword>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4a05      	ldr	r2, [pc, #20]	@ (800b4f0 <check_fs+0xa8>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d101      	bne.n	800b4e2 <check_fs+0x9a>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e000      	b.n	800b4e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b4e2:	2302      	movs	r3, #2
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	00544146 	.word	0x00544146
 800b4f0:	33544146 	.word	0x33544146

0800b4f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b096      	sub	sp, #88	@ 0x58
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	4613      	mov	r3, r2
 800b500:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f7ff ff58 	bl	800b3be <get_ldnumber>
 800b50e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b512:	2b00      	cmp	r3, #0
 800b514:	da01      	bge.n	800b51a <find_volume+0x26>
 800b516:	230b      	movs	r3, #11
 800b518:	e22d      	b.n	800b976 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b51a:	4aa1      	ldr	r2, [pc, #644]	@ (800b7a0 <find_volume+0x2ac>)
 800b51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b522:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <find_volume+0x3a>
 800b52a:	230c      	movs	r3, #12
 800b52c:	e223      	b.n	800b976 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b532:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	f023 0301 	bic.w	r3, r3, #1
 800b53a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d01a      	beq.n	800b57a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b546:	785b      	ldrb	r3, [r3, #1]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe fd17 	bl	8009f7c <disk_status>
 800b54e:	4603      	mov	r3, r0
 800b550:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b554:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10c      	bne.n	800b57a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d007      	beq.n	800b576 <find_volume+0x82>
 800b566:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b56a:	f003 0304 	and.w	r3, r3, #4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b572:	230a      	movs	r3, #10
 800b574:	e1ff      	b.n	800b976 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b576:	2300      	movs	r3, #0
 800b578:	e1fd      	b.n	800b976 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b582:	b2da      	uxtb	r2, r3
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fd0f 	bl	8009fb0 <disk_initialize>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b598:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	e1e6      	b.n	800b976 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d007      	beq.n	800b5be <find_volume+0xca>
 800b5ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b5ba:	230a      	movs	r3, #10
 800b5bc:	e1db      	b.n	800b976 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b5c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b5c6:	f7ff ff3f 	bl	800b448 <check_fs>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b5d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d149      	bne.n	800b66c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b5d8:	2300      	movs	r3, #0
 800b5da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5dc:	e01e      	b.n	800b61c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b5e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b5ec:	4413      	add	r3, r2
 800b5ee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d006      	beq.n	800b608 <find_volume+0x114>
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe fd75 	bl	800a0ee <ld_dword>
 800b604:	4602      	mov	r2, r0
 800b606:	e000      	b.n	800b60a <find_volume+0x116>
 800b608:	2200      	movs	r2, #0
 800b60a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	3358      	adds	r3, #88	@ 0x58
 800b610:	443b      	add	r3, r7
 800b612:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b618:	3301      	adds	r3, #1
 800b61a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d9dd      	bls.n	800b5de <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b622:	2300      	movs	r3, #0
 800b624:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <find_volume+0x13e>
 800b62c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b62e:	3b01      	subs	r3, #1
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	3358      	adds	r3, #88	@ 0x58
 800b638:	443b      	add	r3, r7
 800b63a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b63e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b642:	2b00      	cmp	r3, #0
 800b644:	d005      	beq.n	800b652 <find_volume+0x15e>
 800b646:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b648:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b64a:	f7ff fefd 	bl	800b448 <check_fs>
 800b64e:	4603      	mov	r3, r0
 800b650:	e000      	b.n	800b654 <find_volume+0x160>
 800b652:	2303      	movs	r3, #3
 800b654:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d905      	bls.n	800b66c <find_volume+0x178>
 800b660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b662:	3301      	adds	r3, #1
 800b664:	643b      	str	r3, [r7, #64]	@ 0x40
 800b666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d9e2      	bls.n	800b632 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b66c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b670:	2b04      	cmp	r3, #4
 800b672:	d101      	bne.n	800b678 <find_volume+0x184>
 800b674:	2301      	movs	r3, #1
 800b676:	e17e      	b.n	800b976 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b678:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d901      	bls.n	800b684 <find_volume+0x190>
 800b680:	230d      	movs	r3, #13
 800b682:	e178      	b.n	800b976 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b686:	3330      	adds	r3, #48	@ 0x30
 800b688:	330b      	adds	r3, #11
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fd16 	bl	800a0bc <ld_word>
 800b690:	4603      	mov	r3, r0
 800b692:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b696:	d001      	beq.n	800b69c <find_volume+0x1a8>
 800b698:	230d      	movs	r3, #13
 800b69a:	e16c      	b.n	800b976 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69e:	3330      	adds	r3, #48	@ 0x30
 800b6a0:	3316      	adds	r3, #22
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe fd0a 	bl	800a0bc <ld_word>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <find_volume+0x1cc>
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b4:	3330      	adds	r3, #48	@ 0x30
 800b6b6:	3324      	adds	r3, #36	@ 0x24
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe fd18 	bl	800a0ee <ld_dword>
 800b6be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6c4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d2:	789b      	ldrb	r3, [r3, #2]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d005      	beq.n	800b6e4 <find_volume+0x1f0>
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	789b      	ldrb	r3, [r3, #2]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d001      	beq.n	800b6e4 <find_volume+0x1f0>
 800b6e0:	230d      	movs	r3, #13
 800b6e2:	e148      	b.n	800b976 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e6:	789b      	ldrb	r3, [r3, #2]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ec:	fb02 f303 	mul.w	r3, r2, r3
 800b6f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	895b      	ldrh	r3, [r3, #10]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d008      	beq.n	800b718 <find_volume+0x224>
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	895b      	ldrh	r3, [r3, #10]
 800b70a:	461a      	mov	r2, r3
 800b70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70e:	895b      	ldrh	r3, [r3, #10]
 800b710:	3b01      	subs	r3, #1
 800b712:	4013      	ands	r3, r2
 800b714:	2b00      	cmp	r3, #0
 800b716:	d001      	beq.n	800b71c <find_volume+0x228>
 800b718:	230d      	movs	r3, #13
 800b71a:	e12c      	b.n	800b976 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71e:	3330      	adds	r3, #48	@ 0x30
 800b720:	3311      	adds	r3, #17
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fcca 	bl	800a0bc <ld_word>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b732:	891b      	ldrh	r3, [r3, #8]
 800b734:	f003 030f 	and.w	r3, r3, #15
 800b738:	b29b      	uxth	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <find_volume+0x24e>
 800b73e:	230d      	movs	r3, #13
 800b740:	e119      	b.n	800b976 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	3330      	adds	r3, #48	@ 0x30
 800b746:	3313      	adds	r3, #19
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe fcb7 	bl	800a0bc <ld_word>
 800b74e:	4603      	mov	r3, r0
 800b750:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b754:	2b00      	cmp	r3, #0
 800b756:	d106      	bne.n	800b766 <find_volume+0x272>
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	3330      	adds	r3, #48	@ 0x30
 800b75c:	3320      	adds	r3, #32
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fcc5 	bl	800a0ee <ld_dword>
 800b764:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b768:	3330      	adds	r3, #48	@ 0x30
 800b76a:	330e      	adds	r3, #14
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fca5 	bl	800a0bc <ld_word>
 800b772:	4603      	mov	r3, r0
 800b774:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b776:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <find_volume+0x28c>
 800b77c:	230d      	movs	r3, #13
 800b77e:	e0fa      	b.n	800b976 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b780:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b784:	4413      	add	r3, r2
 800b786:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b788:	8912      	ldrh	r2, [r2, #8]
 800b78a:	0912      	lsrs	r2, r2, #4
 800b78c:	b292      	uxth	r2, r2
 800b78e:	4413      	add	r3, r2
 800b790:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b796:	429a      	cmp	r2, r3
 800b798:	d204      	bcs.n	800b7a4 <find_volume+0x2b0>
 800b79a:	230d      	movs	r3, #13
 800b79c:	e0eb      	b.n	800b976 <find_volume+0x482>
 800b79e:	bf00      	nop
 800b7a0:	20003c50 	.word	0x20003c50
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b7a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7ac:	8952      	ldrh	r2, [r2, #10]
 800b7ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <find_volume+0x2ca>
 800b7ba:	230d      	movs	r3, #13
 800b7bc:	e0db      	b.n	800b976 <find_volume+0x482>
		fmt = FS_FAT32;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d802      	bhi.n	800b7d4 <find_volume+0x2e0>
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d802      	bhi.n	800b7e4 <find_volume+0x2f0>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e6:	1c9a      	adds	r2, r3, #2
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7f0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b7f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b7f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7f6:	441a      	add	r2, r3
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b7fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b800:	441a      	add	r2, r3
 800b802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b804:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b806:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d11e      	bne.n	800b84c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b810:	3330      	adds	r3, #48	@ 0x30
 800b812:	332a      	adds	r3, #42	@ 0x2a
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fc51 	bl	800a0bc <ld_word>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <find_volume+0x330>
 800b820:	230d      	movs	r3, #13
 800b822:	e0a8      	b.n	800b976 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b826:	891b      	ldrh	r3, [r3, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <find_volume+0x33c>
 800b82c:	230d      	movs	r3, #13
 800b82e:	e0a2      	b.n	800b976 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	3330      	adds	r3, #48	@ 0x30
 800b834:	332c      	adds	r3, #44	@ 0x2c
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe fc59 	bl	800a0ee <ld_dword>
 800b83c:	4602      	mov	r2, r0
 800b83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b840:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	647b      	str	r3, [r7, #68]	@ 0x44
 800b84a:	e01f      	b.n	800b88c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84e:	891b      	ldrh	r3, [r3, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <find_volume+0x364>
 800b854:	230d      	movs	r3, #13
 800b856:	e08e      	b.n	800b976 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	6a1a      	ldr	r2, [r3, #32]
 800b85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b85e:	441a      	add	r2, r3
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b864:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d103      	bne.n	800b874 <find_volume+0x380>
 800b86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	e00a      	b.n	800b88a <find_volume+0x396>
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	695a      	ldr	r2, [r3, #20]
 800b878:	4613      	mov	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	4413      	add	r3, r2
 800b87e:	085a      	lsrs	r2, r3, #1
 800b880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b88a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88e:	699a      	ldr	r2, [r3, #24]
 800b890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b892:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b896:	0a5b      	lsrs	r3, r3, #9
 800b898:	429a      	cmp	r2, r3
 800b89a:	d201      	bcs.n	800b8a0 <find_volume+0x3ac>
 800b89c:	230d      	movs	r3, #13
 800b89e:	e06a      	b.n	800b976 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a6:	611a      	str	r2, [r3, #16]
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ae:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b2:	2280      	movs	r2, #128	@ 0x80
 800b8b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b8b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	d149      	bne.n	800b952 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c0:	3330      	adds	r3, #48	@ 0x30
 800b8c2:	3330      	adds	r3, #48	@ 0x30
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe fbf9 	bl	800a0bc <ld_word>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d140      	bne.n	800b952 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b8d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b8d8:	f7fe fea2 	bl	800a620 <move_window>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d137      	bne.n	800b952 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ea:	3330      	adds	r3, #48	@ 0x30
 800b8ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fe fbe3 	bl	800a0bc <ld_word>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d127      	bne.n	800b952 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b904:	3330      	adds	r3, #48	@ 0x30
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe fbf1 	bl	800a0ee <ld_dword>
 800b90c:	4603      	mov	r3, r0
 800b90e:	4a1c      	ldr	r2, [pc, #112]	@ (800b980 <find_volume+0x48c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d11e      	bne.n	800b952 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	3330      	adds	r3, #48	@ 0x30
 800b918:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe fbe6 	bl	800a0ee <ld_dword>
 800b922:	4603      	mov	r3, r0
 800b924:	4a17      	ldr	r2, [pc, #92]	@ (800b984 <find_volume+0x490>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d113      	bne.n	800b952 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92c:	3330      	adds	r3, #48	@ 0x30
 800b92e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fbdb 	bl	800a0ee <ld_dword>
 800b938:	4602      	mov	r2, r0
 800b93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b940:	3330      	adds	r3, #48	@ 0x30
 800b942:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fbd1 	bl	800a0ee <ld_dword>
 800b94c:	4602      	mov	r2, r0
 800b94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b950:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b958:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b95a:	4b0b      	ldr	r3, [pc, #44]	@ (800b988 <find_volume+0x494>)
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	3301      	adds	r3, #1
 800b960:	b29a      	uxth	r2, r3
 800b962:	4b09      	ldr	r3, [pc, #36]	@ (800b988 <find_volume+0x494>)
 800b964:	801a      	strh	r2, [r3, #0]
 800b966:	4b08      	ldr	r3, [pc, #32]	@ (800b988 <find_volume+0x494>)
 800b968:	881a      	ldrh	r2, [r3, #0]
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b96e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b970:	f7fe fdee 	bl	800a550 <clear_lock>
#endif
	return FR_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3758      	adds	r7, #88	@ 0x58
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	41615252 	.word	0x41615252
 800b984:	61417272 	.word	0x61417272
 800b988:	20003c54 	.word	0x20003c54

0800b98c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b996:	2309      	movs	r3, #9
 800b998:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01c      	beq.n	800b9da <validate+0x4e>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d018      	beq.n	800b9da <validate+0x4e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d013      	beq.n	800b9da <validate+0x4e>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	889a      	ldrh	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	88db      	ldrh	r3, [r3, #6]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d10c      	bne.n	800b9da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	785b      	ldrb	r3, [r3, #1]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fad8 	bl	8009f7c <disk_status>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <validate+0x4e>
			res = FR_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d102      	bne.n	800b9e6 <validate+0x5a>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	e000      	b.n	800b9e8 <validate+0x5c>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	6013      	str	r3, [r2, #0]
	return res;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b088      	sub	sp, #32
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ba0a:	f107 0310 	add.w	r3, r7, #16
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff fcd5 	bl	800b3be <get_ldnumber>
 800ba14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	da01      	bge.n	800ba20 <f_mount+0x28>
 800ba1c:	230b      	movs	r3, #11
 800ba1e:	e02b      	b.n	800ba78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ba20:	4a17      	ldr	r2, [pc, #92]	@ (800ba80 <f_mount+0x88>)
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d005      	beq.n	800ba3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ba30:	69b8      	ldr	r0, [r7, #24]
 800ba32:	f7fe fd8d 	bl	800a550 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	490d      	ldr	r1, [pc, #52]	@ (800ba80 <f_mount+0x88>)
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <f_mount+0x66>
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d001      	beq.n	800ba62 <f_mount+0x6a>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e00a      	b.n	800ba78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ba62:	f107 010c 	add.w	r1, r7, #12
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fd41 	bl	800b4f4 <find_volume>
 800ba72:	4603      	mov	r3, r0
 800ba74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3720      	adds	r7, #32
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20003c50 	.word	0x20003c50

0800ba84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b098      	sub	sp, #96	@ 0x60
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <f_open+0x18>
 800ba98:	2309      	movs	r3, #9
 800ba9a:	e1a9      	b.n	800bdf0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800baa2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800baa4:	79fa      	ldrb	r2, [r7, #7]
 800baa6:	f107 0110 	add.w	r1, r7, #16
 800baaa:	f107 0308 	add.w	r3, r7, #8
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff fd20 	bl	800b4f4 <find_volume>
 800bab4:	4603      	mov	r3, r0
 800bab6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800baba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f040 818d 	bne.w	800bdde <f_open+0x35a>
		dj.obj.fs = fs;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	f107 0314 	add.w	r3, r7, #20
 800bace:	4611      	mov	r1, r2
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff fc03 	bl	800b2dc <follow_path>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800badc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d118      	bne.n	800bb16 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bae4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bae8:	b25b      	sxtb	r3, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	da03      	bge.n	800baf6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800baee:	2306      	movs	r3, #6
 800baf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800baf4:	e00f      	b.n	800bb16 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	bf8c      	ite	hi
 800bafc:	2301      	movhi	r3, #1
 800bafe:	2300      	movls	r3, #0
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	461a      	mov	r2, r3
 800bb04:	f107 0314 	add.w	r3, r7, #20
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe fbd8 	bl	800a2c0 <chk_lock>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bb16:	79fb      	ldrb	r3, [r7, #7]
 800bb18:	f003 031c 	and.w	r3, r3, #28
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d07f      	beq.n	800bc20 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bb20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d017      	beq.n	800bb58 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bb28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d10e      	bne.n	800bb4e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bb30:	f7fe fc22 	bl	800a378 <enq_lock>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <f_open+0xc4>
 800bb3a:	f107 0314 	add.w	r3, r7, #20
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff fb06 	bl	800b150 <dir_register>
 800bb44:	4603      	mov	r3, r0
 800bb46:	e000      	b.n	800bb4a <f_open+0xc6>
 800bb48:	2312      	movs	r3, #18
 800bb4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	f043 0308 	orr.w	r3, r3, #8
 800bb54:	71fb      	strb	r3, [r7, #7]
 800bb56:	e010      	b.n	800bb7a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bb58:	7ebb      	ldrb	r3, [r7, #26]
 800bb5a:	f003 0311 	and.w	r3, r3, #17
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <f_open+0xe6>
					res = FR_DENIED;
 800bb62:	2307      	movs	r3, #7
 800bb64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bb68:	e007      	b.n	800bb7a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	f003 0304 	and.w	r3, r3, #4
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <f_open+0xf6>
 800bb74:	2308      	movs	r3, #8
 800bb76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bb7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d168      	bne.n	800bc54 <f_open+0x1d0>
 800bb82:	79fb      	ldrb	r3, [r7, #7]
 800bb84:	f003 0308 	and.w	r3, r3, #8
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d063      	beq.n	800bc54 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bb8c:	f7fd fc0c 	bl	80093a8 <get_fattime>
 800bb90:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bb92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb94:	330e      	adds	r3, #14
 800bb96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fe fae6 	bl	800a16a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba0:	3316      	adds	r3, #22
 800bba2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe fae0 	bl	800a16a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbac:	330b      	adds	r3, #11
 800bbae:	2220      	movs	r2, #32
 800bbb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff fa35 	bl	800b028 <ld_clust>
 800bbbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7ff fa4d 	bl	800b066 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bbcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbce:	331c      	adds	r3, #28
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fac9 	bl	800a16a <st_dword>
					fs->wflag = 1;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bbde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d037      	beq.n	800bc54 <f_open+0x1d0>
						dw = fs->winsect;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bbea:	f107 0314 	add.w	r3, r7, #20
 800bbee:	2200      	movs	r2, #0
 800bbf0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe ff60 	bl	800aab8 <remove_chain>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bbfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d126      	bne.n	800bc54 <f_open+0x1d0>
							res = move_window(fs, dw);
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fd08 	bl	800a620 <move_window>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc1a:	3a01      	subs	r2, #1
 800bc1c:	60da      	str	r2, [r3, #12]
 800bc1e:	e019      	b.n	800bc54 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bc20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d115      	bne.n	800bc54 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bc28:	7ebb      	ldrb	r3, [r7, #26]
 800bc2a:	f003 0310 	and.w	r3, r3, #16
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <f_open+0x1b6>
					res = FR_NO_FILE;
 800bc32:	2304      	movs	r3, #4
 800bc34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bc38:	e00c      	b.n	800bc54 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	f003 0302 	and.w	r3, r3, #2
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d007      	beq.n	800bc54 <f_open+0x1d0>
 800bc44:	7ebb      	ldrb	r3, [r7, #26]
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <f_open+0x1d0>
						res = FR_DENIED;
 800bc4e:	2307      	movs	r3, #7
 800bc50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bc54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d126      	bne.n	800bcaa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	f003 0308 	and.w	r3, r3, #8
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bc76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	bf8c      	ite	hi
 800bc82:	2301      	movhi	r3, #1
 800bc84:	2300      	movls	r3, #0
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f107 0314 	add.w	r3, r7, #20
 800bc8e:	4611      	mov	r1, r2
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fe fb93 	bl	800a3bc <inc_lock>
 800bc96:	4602      	mov	r2, r0
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <f_open+0x226>
 800bca4:	2302      	movs	r3, #2
 800bca6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bcaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 8095 	bne.w	800bdde <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff f9b4 	bl	800b028 <ld_clust>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc8:	331c      	adds	r3, #28
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fa0f 	bl	800a0ee <ld_dword>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	88da      	ldrh	r2, [r3, #6]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	79fa      	ldrb	r2, [r7, #7]
 800bcee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3330      	adds	r3, #48	@ 0x30
 800bd06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fa79 	bl	800a204 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bd12:	79fb      	ldrb	r3, [r7, #7]
 800bd14:	f003 0320 	and.w	r3, r3, #32
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d060      	beq.n	800bdde <f_open+0x35a>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d05c      	beq.n	800bdde <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	895b      	ldrh	r3, [r3, #10]
 800bd30:	025b      	lsls	r3, r3, #9
 800bd32:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd40:	e016      	b.n	800bd70 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fd25 	bl	800a796 <get_fat>
 800bd4c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bd4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d802      	bhi.n	800bd5a <f_open+0x2d6>
 800bd54:	2302      	movs	r3, #2
 800bd56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bd5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd60:	d102      	bne.n	800bd68 <f_open+0x2e4>
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bd68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d103      	bne.n	800bd80 <f_open+0x2fc>
 800bd78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d8e0      	bhi.n	800bd42 <f_open+0x2be>
				}
				fp->clust = clst;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bd86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d127      	bne.n	800bdde <f_open+0x35a>
 800bd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d022      	beq.n	800bdde <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fe fcdb 	bl	800a758 <clust2sect>
 800bda2:	6478      	str	r0, [r7, #68]	@ 0x44
 800bda4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d103      	bne.n	800bdb2 <f_open+0x32e>
						res = FR_INT_ERR;
 800bdaa:	2302      	movs	r3, #2
 800bdac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bdb0:	e015      	b.n	800bdde <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bdb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdb4:	0a5a      	lsrs	r2, r3, #9
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb8:	441a      	add	r2, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	7858      	ldrb	r0, [r3, #1]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6a1a      	ldr	r2, [r3, #32]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	f7fe f917 	bl	800a000 <disk_read>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <f_open+0x35a>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bdde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d002      	beq.n	800bdec <f_open+0x368>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bdec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3760      	adds	r7, #96	@ 0x60
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08e      	sub	sp, #56	@ 0x38
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2200      	movs	r2, #0
 800be0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f107 0214 	add.w	r2, r7, #20
 800be16:	4611      	mov	r1, r2
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fdb7 	bl	800b98c <validate>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d107      	bne.n	800be3c <f_read+0x44>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	7d5b      	ldrb	r3, [r3, #21]
 800be30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <f_read+0x4a>
 800be3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be40:	e115      	b.n	800c06e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	7d1b      	ldrb	r3, [r3, #20]
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <f_read+0x5a>
 800be4e:	2307      	movs	r3, #7
 800be50:	e10d      	b.n	800c06e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	429a      	cmp	r2, r3
 800be64:	f240 80fe 	bls.w	800c064 <f_read+0x26c>
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800be6c:	e0fa      	b.n	800c064 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be76:	2b00      	cmp	r3, #0
 800be78:	f040 80c6 	bne.w	800c008 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	0a5b      	lsrs	r3, r3, #9
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	8952      	ldrh	r2, [r2, #10]
 800be86:	3a01      	subs	r2, #1
 800be88:	4013      	ands	r3, r2
 800be8a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d12f      	bne.n	800bef2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d103      	bne.n	800bea2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bea0:	e013      	b.n	800beca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d007      	beq.n	800beba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7fe fefe 	bl	800acb2 <clmt_clust>
 800beb6:	6338      	str	r0, [r7, #48]	@ 0x30
 800beb8:	e007      	b.n	800beca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f7fe fc67 	bl	800a796 <get_fat>
 800bec8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800beca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800becc:	2b01      	cmp	r3, #1
 800bece:	d804      	bhi.n	800beda <f_read+0xe2>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2202      	movs	r2, #2
 800bed4:	755a      	strb	r2, [r3, #21]
 800bed6:	2302      	movs	r3, #2
 800bed8:	e0c9      	b.n	800c06e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d104      	bne.n	800beec <f_read+0xf4>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2201      	movs	r2, #1
 800bee6:	755a      	strb	r2, [r3, #21]
 800bee8:	2301      	movs	r3, #1
 800beea:	e0c0      	b.n	800c06e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bef0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	69db      	ldr	r3, [r3, #28]
 800bef8:	4619      	mov	r1, r3
 800befa:	4610      	mov	r0, r2
 800befc:	f7fe fc2c 	bl	800a758 <clust2sect>
 800bf00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <f_read+0x11a>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	755a      	strb	r2, [r3, #21]
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e0ad      	b.n	800c06e <f_read+0x276>
			sect += csect;
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	4413      	add	r3, r2
 800bf18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	0a5b      	lsrs	r3, r3, #9
 800bf1e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d039      	beq.n	800bf9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bf26:	69fa      	ldr	r2, [r7, #28]
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	4413      	add	r3, r2
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	8952      	ldrh	r2, [r2, #10]
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d905      	bls.n	800bf40 <f_read+0x148>
					cc = fs->csize - csect;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	895b      	ldrh	r3, [r3, #10]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	7858      	ldrb	r0, [r3, #1]
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf4a:	f7fe f859 	bl	800a000 <disk_read>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <f_read+0x166>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2201      	movs	r2, #1
 800bf58:	755a      	strb	r2, [r3, #21]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e087      	b.n	800c06e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	7d1b      	ldrb	r3, [r3, #20]
 800bf62:	b25b      	sxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	da14      	bge.n	800bf92 <f_read+0x19a>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6a1a      	ldr	r2, [r3, #32]
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d90d      	bls.n	800bf92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	025b      	lsls	r3, r3, #9
 800bf80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf82:	18d0      	adds	r0, r2, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3330      	adds	r3, #48	@ 0x30
 800bf88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f7fe f918 	bl	800a1c2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf94:	025b      	lsls	r3, r3, #9
 800bf96:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800bf98:	e050      	b.n	800c03c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d02e      	beq.n	800c002 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	7d1b      	ldrb	r3, [r3, #20]
 800bfa8:	b25b      	sxtb	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da18      	bge.n	800bfe0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	7858      	ldrb	r0, [r3, #1]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a1a      	ldr	r2, [r3, #32]
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f7fe f83f 	bl	800a040 <disk_write>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <f_read+0x1da>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	755a      	strb	r2, [r3, #21]
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e04d      	b.n	800c06e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	7d1b      	ldrb	r3, [r3, #20]
 800bfd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	7858      	ldrb	r0, [r3, #1]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bfea:	2301      	movs	r3, #1
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	f7fe f807 	bl	800a000 <disk_read>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <f_read+0x20a>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2201      	movs	r2, #1
 800bffc:	755a      	strb	r2, [r3, #21]
 800bffe:	2301      	movs	r3, #1
 800c000:	e035      	b.n	800c06e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c010:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c014:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d901      	bls.n	800c022 <f_read+0x22a>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	4413      	add	r3, r2
 800c032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c034:	4619      	mov	r1, r3
 800c036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c038:	f7fe f8c3 	bl	800a1c2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c040:	4413      	add	r3, r2
 800c042:	627b      	str	r3, [r7, #36]	@ 0x24
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	699a      	ldr	r2, [r3, #24]
 800c048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04a:	441a      	add	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	619a      	str	r2, [r3, #24]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c056:	441a      	add	r2, r3
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	f47f af01 	bne.w	800be6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3738      	adds	r7, #56	@ 0x38
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b08c      	sub	sp, #48	@ 0x30
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
 800c082:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f107 0210 	add.w	r2, r7, #16
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fc78 	bl	800b98c <validate>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c0a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d107      	bne.n	800c0ba <f_write+0x44>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	7d5b      	ldrb	r3, [r3, #21]
 800c0ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c0b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d002      	beq.n	800c0c0 <f_write+0x4a>
 800c0ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c0be:	e14b      	b.n	800c358 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	7d1b      	ldrb	r3, [r3, #20]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <f_write+0x5a>
 800c0cc:	2307      	movs	r3, #7
 800c0ce:	e143      	b.n	800c358 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	699a      	ldr	r2, [r3, #24]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	441a      	add	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	f080 812d 	bcs.w	800c33c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	43db      	mvns	r3, r3
 800c0e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c0ea:	e127      	b.n	800c33c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 80e3 	bne.w	800c2c0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	0a5b      	lsrs	r3, r3, #9
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	8952      	ldrh	r2, [r2, #10]
 800c104:	3a01      	subs	r2, #1
 800c106:	4013      	ands	r3, r2
 800c108:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d143      	bne.n	800c198 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10c      	bne.n	800c132 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11a      	bne.n	800c15a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fd2a 	bl	800ab82 <create_chain>
 800c12e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c130:	e013      	b.n	800c15a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d007      	beq.n	800c14a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	4619      	mov	r1, r3
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f7fe fdb6 	bl	800acb2 <clmt_clust>
 800c146:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c148:	e007      	b.n	800c15a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	4619      	mov	r1, r3
 800c152:	4610      	mov	r0, r2
 800c154:	f7fe fd15 	bl	800ab82 <create_chain>
 800c158:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80f2 	beq.w	800c346 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	2b01      	cmp	r3, #1
 800c166:	d104      	bne.n	800c172 <f_write+0xfc>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2202      	movs	r2, #2
 800c16c:	755a      	strb	r2, [r3, #21]
 800c16e:	2302      	movs	r3, #2
 800c170:	e0f2      	b.n	800c358 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c178:	d104      	bne.n	800c184 <f_write+0x10e>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2201      	movs	r2, #1
 800c17e:	755a      	strb	r2, [r3, #21]
 800c180:	2301      	movs	r3, #1
 800c182:	e0e9      	b.n	800c358 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c188:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <f_write+0x122>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c196:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	7d1b      	ldrb	r3, [r3, #20]
 800c19c:	b25b      	sxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	da18      	bge.n	800c1d4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	7858      	ldrb	r0, [r3, #1]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6a1a      	ldr	r2, [r3, #32]
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	f7fd ff45 	bl	800a040 <disk_write>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d004      	beq.n	800c1c6 <f_write+0x150>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	755a      	strb	r2, [r3, #21]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e0c8      	b.n	800c358 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	7d1b      	ldrb	r3, [r3, #20]
 800c1ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	69db      	ldr	r3, [r3, #28]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4610      	mov	r0, r2
 800c1de:	f7fe fabb 	bl	800a758 <clust2sect>
 800c1e2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <f_write+0x17e>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	755a      	strb	r2, [r3, #21]
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	e0b1      	b.n	800c358 <f_write+0x2e2>
			sect += csect;
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	0a5b      	lsrs	r3, r3, #9
 800c200:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c202:	6a3b      	ldr	r3, [r7, #32]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d03c      	beq.n	800c282 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	4413      	add	r3, r2
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	8952      	ldrh	r2, [r2, #10]
 800c212:	4293      	cmp	r3, r2
 800c214:	d905      	bls.n	800c222 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	895b      	ldrh	r3, [r3, #10]
 800c21a:	461a      	mov	r2, r3
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	7858      	ldrb	r0, [r3, #1]
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	69f9      	ldr	r1, [r7, #28]
 800c22c:	f7fd ff08 	bl	800a040 <disk_write>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d004      	beq.n	800c240 <f_write+0x1ca>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	755a      	strb	r2, [r3, #21]
 800c23c:	2301      	movs	r3, #1
 800c23e:	e08b      	b.n	800c358 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6a1a      	ldr	r2, [r3, #32]
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	6a3a      	ldr	r2, [r7, #32]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d915      	bls.n	800c27a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a1a      	ldr	r2, [r3, #32]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	025b      	lsls	r3, r3, #9
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	4413      	add	r3, r2
 800c262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c266:	4619      	mov	r1, r3
 800c268:	f7fd ffab 	bl	800a1c2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	7d1b      	ldrb	r3, [r3, #20]
 800c270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c274:	b2da      	uxtb	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	025b      	lsls	r3, r3, #9
 800c27e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c280:	e03f      	b.n	800c302 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d016      	beq.n	800c2ba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	699a      	ldr	r2, [r3, #24]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c294:	429a      	cmp	r2, r3
 800c296:	d210      	bcs.n	800c2ba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	7858      	ldrb	r0, [r3, #1]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	f7fd feab 	bl	800a000 <disk_read>
 800c2aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d004      	beq.n	800c2ba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	755a      	strb	r2, [r3, #21]
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e04e      	b.n	800c358 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c2cc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c2ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d901      	bls.n	800c2da <f_write+0x264>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e8:	4413      	add	r3, r2
 800c2ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2ec:	69f9      	ldr	r1, [r7, #28]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fd ff67 	bl	800a1c2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	7d1b      	ldrb	r3, [r3, #20]
 800c2f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c306:	4413      	add	r3, r2
 800c308:	61fb      	str	r3, [r7, #28]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	699a      	ldr	r2, [r3, #24]
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	441a      	add	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	619a      	str	r2, [r3, #24]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	68da      	ldr	r2, [r3, #12]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	429a      	cmp	r2, r3
 800c320:	bf38      	it	cc
 800c322:	461a      	movcc	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	60da      	str	r2, [r3, #12]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32e:	441a      	add	r2, r3
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f47f aed4 	bne.w	800c0ec <f_write+0x76>
 800c344:	e000      	b.n	800c348 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c346:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	7d1b      	ldrb	r3, [r3, #20]
 800c34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c350:	b2da      	uxtb	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3730      	adds	r7, #48	@ 0x30
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f107 0208 	add.w	r2, r7, #8
 800c36e:	4611      	mov	r1, r2
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fb0b 	bl	800b98c <validate>
 800c376:	4603      	mov	r3, r0
 800c378:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c37a:	7dfb      	ldrb	r3, [r7, #23]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d168      	bne.n	800c452 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	7d1b      	ldrb	r3, [r3, #20]
 800c384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d062      	beq.n	800c452 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
 800c390:	b25b      	sxtb	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	da15      	bge.n	800c3c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	7858      	ldrb	r0, [r3, #1]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a1a      	ldr	r2, [r3, #32]
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	f7fd fe4b 	bl	800a040 <disk_write>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <f_sync+0x54>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e04f      	b.n	800c454 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7d1b      	ldrb	r3, [r3, #20]
 800c3b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c3c2:	f7fc fff1 	bl	80093a8 <get_fattime>
 800c3c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7fe f925 	bl	800a620 <move_window>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d138      	bne.n	800c452 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	330b      	adds	r3, #11
 800c3ea:	781a      	ldrb	r2, [r3, #0]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	330b      	adds	r3, #11
 800c3f0:	f042 0220 	orr.w	r2, r2, #32
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	461a      	mov	r2, r3
 800c402:	68f9      	ldr	r1, [r7, #12]
 800c404:	f7fe fe2f 	bl	800b066 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f103 021c 	add.w	r2, r3, #28
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	4619      	mov	r1, r3
 800c414:	4610      	mov	r0, r2
 800c416:	f7fd fea8 	bl	800a16a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3316      	adds	r3, #22
 800c41e:	6939      	ldr	r1, [r7, #16]
 800c420:	4618      	mov	r0, r3
 800c422:	f7fd fea2 	bl	800a16a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3312      	adds	r3, #18
 800c42a:	2100      	movs	r1, #0
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fd fe81 	bl	800a134 <st_word>
					fs->wflag = 1;
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2201      	movs	r2, #1
 800c436:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe f91e 	bl	800a67c <sync_fs>
 800c440:	4603      	mov	r3, r0
 800c442:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	7d1b      	ldrb	r3, [r3, #20]
 800c448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c452:	7dfb      	ldrb	r3, [r7, #23]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff ff7b 	bl	800c360 <f_sync>
 800c46a:	4603      	mov	r3, r0
 800c46c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d118      	bne.n	800c4a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f107 0208 	add.w	r2, r7, #8
 800c47a:	4611      	mov	r1, r2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fa85 	bl	800b98c <validate>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10c      	bne.n	800c4a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe f821 	bl	800a4d8 <dec_lock>
 800c496:	4603      	mov	r3, r0
 800c498:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b092      	sub	sp, #72	@ 0x48
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c4bc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c4c0:	f107 030c 	add.w	r3, r7, #12
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff f814 	bl	800b4f4 <find_volume>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c4d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f040 8099 	bne.w	800c60e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c4dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e4:	691a      	ldr	r2, [r3, #16]
 800c4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	3b02      	subs	r3, #2
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d804      	bhi.n	800c4fa <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f2:	691a      	ldr	r2, [r3, #16]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	e089      	b.n	800c60e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d128      	bne.n	800c558 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c506:	2302      	movs	r3, #2
 800c508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c50e:	f107 0314 	add.w	r3, r7, #20
 800c512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c514:	4618      	mov	r0, r3
 800c516:	f7fe f93e 	bl	800a796 <get_fat>
 800c51a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c522:	d103      	bne.n	800c52c <f_getfree+0x7c>
 800c524:	2301      	movs	r3, #1
 800c526:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c52a:	e063      	b.n	800c5f4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d103      	bne.n	800c53a <f_getfree+0x8a>
 800c532:	2302      	movs	r3, #2
 800c534:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c538:	e05c      	b.n	800c5f4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <f_getfree+0x96>
 800c540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c542:	3301      	adds	r3, #1
 800c544:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c548:	3301      	adds	r3, #1
 800c54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c552:	429a      	cmp	r2, r3
 800c554:	d3db      	bcc.n	800c50e <f_getfree+0x5e>
 800c556:	e04d      	b.n	800c5f4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	637b      	str	r3, [r7, #52]	@ 0x34
 800c568:	2300      	movs	r3, #0
 800c56a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d113      	bne.n	800c59a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c57a:	4619      	mov	r1, r3
 800c57c:	f7fe f850 	bl	800a620 <move_window>
 800c580:	4603      	mov	r3, r0
 800c582:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c586:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d131      	bne.n	800c5f2 <f_getfree+0x142>
							p = fs->win;
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	3330      	adds	r3, #48	@ 0x30
 800c592:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c598:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d10f      	bne.n	800c5c2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c5a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5a4:	f7fd fd8a 	bl	800a0bc <ld_word>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d102      	bne.n	800c5b4 <f_getfree+0x104>
 800c5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5bc:	3b02      	subs	r3, #2
 800c5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c0:	e010      	b.n	800c5e4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c5c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5c4:	f7fd fd93 	bl	800a0ee <ld_dword>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d102      	bne.n	800c5d8 <f_getfree+0x128>
 800c5d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	3304      	adds	r3, #4
 800c5dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1bd      	bne.n	800c56c <f_getfree+0xbc>
 800c5f0:	e000      	b.n	800c5f4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c5f2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5f8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5fe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	791a      	ldrb	r2, [r3, #4]
 800c604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c606:	f042 0201 	orr.w	r2, r2, #1
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c60e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c612:	4618      	mov	r0, r3
 800c614:	3748      	adds	r7, #72	@ 0x48
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b088      	sub	sp, #32
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c62e:	e01c      	b.n	800c66a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c630:	f107 0310 	add.w	r3, r7, #16
 800c634:	f107 0114 	add.w	r1, r7, #20
 800c638:	2201      	movs	r2, #1
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff fbdc 	bl	800bdf8 <f_read>
		if (rc != 1) break;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d117      	bne.n	800c676 <f_gets+0x5c>
		c = s[0];
 800c646:	7d3b      	ldrb	r3, [r7, #20]
 800c648:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	2b0d      	cmp	r3, #13
 800c64e:	d00b      	beq.n	800c668 <f_gets+0x4e>
		*p++ = c;
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	61ba      	str	r2, [r7, #24]
 800c656:	7dfa      	ldrb	r2, [r7, #23]
 800c658:	701a      	strb	r2, [r3, #0]
		n++;
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	3301      	adds	r3, #1
 800c65e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	2b0a      	cmp	r3, #10
 800c664:	d009      	beq.n	800c67a <f_gets+0x60>
 800c666:	e000      	b.n	800c66a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c668:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	69fa      	ldr	r2, [r7, #28]
 800c670:	429a      	cmp	r2, r3
 800c672:	dbdd      	blt.n	800c630 <f_gets+0x16>
 800c674:	e002      	b.n	800c67c <f_gets+0x62>
		if (rc != 1) break;
 800c676:	bf00      	nop
 800c678:	e000      	b.n	800c67c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800c67a:	bf00      	nop
	}
	*p = 0;
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <f_gets+0x72>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	e000      	b.n	800c68e <f_gets+0x74>
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	2b0a      	cmp	r3, #10
 800c6a6:	d103      	bne.n	800c6b0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c6a8:	210d      	movs	r1, #13
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff fff3 	bl	800c696 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	db25      	blt.n	800c708 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	60fa      	str	r2, [r7, #12]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	78fa      	ldrb	r2, [r7, #3]
 800c6c8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b3c      	cmp	r3, #60	@ 0x3c
 800c6ce:	dd12      	ble.n	800c6f6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6818      	ldr	r0, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f103 010c 	add.w	r1, r3, #12
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	f107 0308 	add.w	r3, r7, #8
 800c6e0:	f7ff fcc9 	bl	800c076 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d101      	bne.n	800c6f0 <putc_bfd+0x5a>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e001      	b.n	800c6f4 <putc_bfd+0x5e>
 800c6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	1c5a      	adds	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	609a      	str	r2, [r3, #8]
 800c706:	e000      	b.n	800c70a <putc_bfd+0x74>
	if (i < 0) return;
 800c708:	bf00      	nop
}
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	db16      	blt.n	800c74e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f103 010c 	add.w	r1, r3, #12
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	461a      	mov	r2, r3
 800c730:	f107 030c 	add.w	r3, r7, #12
 800c734:	f7ff fc9f 	bl	800c076 <f_write>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d107      	bne.n	800c74e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	4293      	cmp	r3, r2
 800c746:	d102      	bne.n	800c74e <putc_flush+0x3e>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	e001      	b.n	800c752 <putc_flush+0x42>
	return EOF;
 800c74e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	605a      	str	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	609a      	str	r2, [r3, #8]
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b096      	sub	sp, #88	@ 0x58
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c78e:	f107 030c 	add.w	r3, r7, #12
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff ffe0 	bl	800c75a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c79a:	e009      	b.n	800c7b0 <f_puts+0x2c>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	607a      	str	r2, [r7, #4]
 800c7a2:	781a      	ldrb	r2, [r3, #0]
 800c7a4:	f107 030c 	add.w	r3, r7, #12
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff ff73 	bl	800c696 <putc_bfd>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f1      	bne.n	800c79c <f_puts+0x18>
	return putc_flush(&pb);
 800c7b8:	f107 030c 	add.w	r3, r7, #12
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ffa7 	bl	800c710 <putc_flush>
 800c7c2:	4603      	mov	r3, r0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3758      	adds	r7, #88	@ 0x58
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7e4:	7a5b      	ldrb	r3, [r3, #9]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d131      	bne.n	800c850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7ee:	7a5b      	ldrb	r3, [r3, #9]
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c7fa:	4b19      	ldr	r3, [pc, #100]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7fc:	7a5b      	ldrb	r3, [r3, #9]
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	4a17      	ldr	r2, [pc, #92]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c80a:	4b15      	ldr	r3, [pc, #84]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c80c:	7a5b      	ldrb	r3, [r3, #9]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	4b13      	ldr	r3, [pc, #76]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c814:	4413      	add	r3, r2
 800c816:	79fa      	ldrb	r2, [r7, #7]
 800c818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c81a:	4b11      	ldr	r3, [pc, #68]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c81c:	7a5b      	ldrb	r3, [r3, #9]
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	1c5a      	adds	r2, r3, #1
 800c822:	b2d1      	uxtb	r1, r2
 800c824:	4a0e      	ldr	r2, [pc, #56]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c826:	7251      	strb	r1, [r2, #9]
 800c828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c82a:	7dbb      	ldrb	r3, [r7, #22]
 800c82c:	3330      	adds	r3, #48	@ 0x30
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	3301      	adds	r3, #1
 800c838:	223a      	movs	r2, #58	@ 0x3a
 800c83a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3302      	adds	r3, #2
 800c840:	222f      	movs	r2, #47	@ 0x2f
 800c842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3303      	adds	r3, #3
 800c848:	2200      	movs	r2, #0
 800c84a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
}
 800c852:	4618      	mov	r0, r3
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	20003c78 	.word	0x20003c78

0800c864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c86e:	2200      	movs	r2, #0
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff ffaa 	bl	800c7cc <FATFS_LinkDriverEx>
 800c878:	4603      	mov	r3, r0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <__assert_func>:
 800c884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c886:	4614      	mov	r4, r2
 800c888:	461a      	mov	r2, r3
 800c88a:	4b09      	ldr	r3, [pc, #36]	@ (800c8b0 <__assert_func+0x2c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4605      	mov	r5, r0
 800c890:	68d8      	ldr	r0, [r3, #12]
 800c892:	b14c      	cbz	r4, 800c8a8 <__assert_func+0x24>
 800c894:	4b07      	ldr	r3, [pc, #28]	@ (800c8b4 <__assert_func+0x30>)
 800c896:	9100      	str	r1, [sp, #0]
 800c898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c89c:	4906      	ldr	r1, [pc, #24]	@ (800c8b8 <__assert_func+0x34>)
 800c89e:	462b      	mov	r3, r5
 800c8a0:	f001 f828 	bl	800d8f4 <fiprintf>
 800c8a4:	f001 fb01 	bl	800deaa <abort>
 800c8a8:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <__assert_func+0x38>)
 800c8aa:	461c      	mov	r4, r3
 800c8ac:	e7f3      	b.n	800c896 <__assert_func+0x12>
 800c8ae:	bf00      	nop
 800c8b0:	20000030 	.word	0x20000030
 800c8b4:	08010ad4 	.word	0x08010ad4
 800c8b8:	08010ae1 	.word	0x08010ae1
 800c8bc:	08010b0f 	.word	0x08010b0f

0800c8c0 <malloc>:
 800c8c0:	4b02      	ldr	r3, [pc, #8]	@ (800c8cc <malloc+0xc>)
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	6818      	ldr	r0, [r3, #0]
 800c8c6:	f000 b825 	b.w	800c914 <_malloc_r>
 800c8ca:	bf00      	nop
 800c8cc:	20000030 	.word	0x20000030

0800c8d0 <sbrk_aligned>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	4e0f      	ldr	r6, [pc, #60]	@ (800c910 <sbrk_aligned+0x40>)
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	6831      	ldr	r1, [r6, #0]
 800c8d8:	4605      	mov	r5, r0
 800c8da:	b911      	cbnz	r1, 800c8e2 <sbrk_aligned+0x12>
 800c8dc:	f001 fa88 	bl	800ddf0 <_sbrk_r>
 800c8e0:	6030      	str	r0, [r6, #0]
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	f001 fa83 	bl	800ddf0 <_sbrk_r>
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	d103      	bne.n	800c8f6 <sbrk_aligned+0x26>
 800c8ee:	f04f 34ff 	mov.w	r4, #4294967295
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	bd70      	pop	{r4, r5, r6, pc}
 800c8f6:	1cc4      	adds	r4, r0, #3
 800c8f8:	f024 0403 	bic.w	r4, r4, #3
 800c8fc:	42a0      	cmp	r0, r4
 800c8fe:	d0f8      	beq.n	800c8f2 <sbrk_aligned+0x22>
 800c900:	1a21      	subs	r1, r4, r0
 800c902:	4628      	mov	r0, r5
 800c904:	f001 fa74 	bl	800ddf0 <_sbrk_r>
 800c908:	3001      	adds	r0, #1
 800c90a:	d1f2      	bne.n	800c8f2 <sbrk_aligned+0x22>
 800c90c:	e7ef      	b.n	800c8ee <sbrk_aligned+0x1e>
 800c90e:	bf00      	nop
 800c910:	20003c84 	.word	0x20003c84

0800c914 <_malloc_r>:
 800c914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c918:	1ccd      	adds	r5, r1, #3
 800c91a:	f025 0503 	bic.w	r5, r5, #3
 800c91e:	3508      	adds	r5, #8
 800c920:	2d0c      	cmp	r5, #12
 800c922:	bf38      	it	cc
 800c924:	250c      	movcc	r5, #12
 800c926:	2d00      	cmp	r5, #0
 800c928:	4606      	mov	r6, r0
 800c92a:	db01      	blt.n	800c930 <_malloc_r+0x1c>
 800c92c:	42a9      	cmp	r1, r5
 800c92e:	d904      	bls.n	800c93a <_malloc_r+0x26>
 800c930:	230c      	movs	r3, #12
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	2000      	movs	r0, #0
 800c936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca10 <_malloc_r+0xfc>
 800c93e:	f000 f869 	bl	800ca14 <__malloc_lock>
 800c942:	f8d8 3000 	ldr.w	r3, [r8]
 800c946:	461c      	mov	r4, r3
 800c948:	bb44      	cbnz	r4, 800c99c <_malloc_r+0x88>
 800c94a:	4629      	mov	r1, r5
 800c94c:	4630      	mov	r0, r6
 800c94e:	f7ff ffbf 	bl	800c8d0 <sbrk_aligned>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	4604      	mov	r4, r0
 800c956:	d158      	bne.n	800ca0a <_malloc_r+0xf6>
 800c958:	f8d8 4000 	ldr.w	r4, [r8]
 800c95c:	4627      	mov	r7, r4
 800c95e:	2f00      	cmp	r7, #0
 800c960:	d143      	bne.n	800c9ea <_malloc_r+0xd6>
 800c962:	2c00      	cmp	r4, #0
 800c964:	d04b      	beq.n	800c9fe <_malloc_r+0xea>
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	4639      	mov	r1, r7
 800c96a:	4630      	mov	r0, r6
 800c96c:	eb04 0903 	add.w	r9, r4, r3
 800c970:	f001 fa3e 	bl	800ddf0 <_sbrk_r>
 800c974:	4581      	cmp	r9, r0
 800c976:	d142      	bne.n	800c9fe <_malloc_r+0xea>
 800c978:	6821      	ldr	r1, [r4, #0]
 800c97a:	1a6d      	subs	r5, r5, r1
 800c97c:	4629      	mov	r1, r5
 800c97e:	4630      	mov	r0, r6
 800c980:	f7ff ffa6 	bl	800c8d0 <sbrk_aligned>
 800c984:	3001      	adds	r0, #1
 800c986:	d03a      	beq.n	800c9fe <_malloc_r+0xea>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	442b      	add	r3, r5
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	f8d8 3000 	ldr.w	r3, [r8]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	bb62      	cbnz	r2, 800c9f0 <_malloc_r+0xdc>
 800c996:	f8c8 7000 	str.w	r7, [r8]
 800c99a:	e00f      	b.n	800c9bc <_malloc_r+0xa8>
 800c99c:	6822      	ldr	r2, [r4, #0]
 800c99e:	1b52      	subs	r2, r2, r5
 800c9a0:	d420      	bmi.n	800c9e4 <_malloc_r+0xd0>
 800c9a2:	2a0b      	cmp	r2, #11
 800c9a4:	d917      	bls.n	800c9d6 <_malloc_r+0xc2>
 800c9a6:	1961      	adds	r1, r4, r5
 800c9a8:	42a3      	cmp	r3, r4
 800c9aa:	6025      	str	r5, [r4, #0]
 800c9ac:	bf18      	it	ne
 800c9ae:	6059      	strne	r1, [r3, #4]
 800c9b0:	6863      	ldr	r3, [r4, #4]
 800c9b2:	bf08      	it	eq
 800c9b4:	f8c8 1000 	streq.w	r1, [r8]
 800c9b8:	5162      	str	r2, [r4, r5]
 800c9ba:	604b      	str	r3, [r1, #4]
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f000 f82f 	bl	800ca20 <__malloc_unlock>
 800c9c2:	f104 000b 	add.w	r0, r4, #11
 800c9c6:	1d23      	adds	r3, r4, #4
 800c9c8:	f020 0007 	bic.w	r0, r0, #7
 800c9cc:	1ac2      	subs	r2, r0, r3
 800c9ce:	bf1c      	itt	ne
 800c9d0:	1a1b      	subne	r3, r3, r0
 800c9d2:	50a3      	strne	r3, [r4, r2]
 800c9d4:	e7af      	b.n	800c936 <_malloc_r+0x22>
 800c9d6:	6862      	ldr	r2, [r4, #4]
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	bf0c      	ite	eq
 800c9dc:	f8c8 2000 	streq.w	r2, [r8]
 800c9e0:	605a      	strne	r2, [r3, #4]
 800c9e2:	e7eb      	b.n	800c9bc <_malloc_r+0xa8>
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	6864      	ldr	r4, [r4, #4]
 800c9e8:	e7ae      	b.n	800c948 <_malloc_r+0x34>
 800c9ea:	463c      	mov	r4, r7
 800c9ec:	687f      	ldr	r7, [r7, #4]
 800c9ee:	e7b6      	b.n	800c95e <_malloc_r+0x4a>
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d1fb      	bne.n	800c9f0 <_malloc_r+0xdc>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	6053      	str	r3, [r2, #4]
 800c9fc:	e7de      	b.n	800c9bc <_malloc_r+0xa8>
 800c9fe:	230c      	movs	r3, #12
 800ca00:	6033      	str	r3, [r6, #0]
 800ca02:	4630      	mov	r0, r6
 800ca04:	f000 f80c 	bl	800ca20 <__malloc_unlock>
 800ca08:	e794      	b.n	800c934 <_malloc_r+0x20>
 800ca0a:	6005      	str	r5, [r0, #0]
 800ca0c:	e7d6      	b.n	800c9bc <_malloc_r+0xa8>
 800ca0e:	bf00      	nop
 800ca10:	20003c88 	.word	0x20003c88

0800ca14 <__malloc_lock>:
 800ca14:	4801      	ldr	r0, [pc, #4]	@ (800ca1c <__malloc_lock+0x8>)
 800ca16:	f001 ba38 	b.w	800de8a <__retarget_lock_acquire_recursive>
 800ca1a:	bf00      	nop
 800ca1c:	20003dcc 	.word	0x20003dcc

0800ca20 <__malloc_unlock>:
 800ca20:	4801      	ldr	r0, [pc, #4]	@ (800ca28 <__malloc_unlock+0x8>)
 800ca22:	f001 ba33 	b.w	800de8c <__retarget_lock_release_recursive>
 800ca26:	bf00      	nop
 800ca28:	20003dcc 	.word	0x20003dcc

0800ca2c <_strtol_l.isra.0>:
 800ca2c:	2b24      	cmp	r3, #36	@ 0x24
 800ca2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca32:	4686      	mov	lr, r0
 800ca34:	4690      	mov	r8, r2
 800ca36:	d801      	bhi.n	800ca3c <_strtol_l.isra.0+0x10>
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d106      	bne.n	800ca4a <_strtol_l.isra.0+0x1e>
 800ca3c:	f001 f9fa 	bl	800de34 <__errno>
 800ca40:	2316      	movs	r3, #22
 800ca42:	6003      	str	r3, [r0, #0]
 800ca44:	2000      	movs	r0, #0
 800ca46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4a:	4834      	ldr	r0, [pc, #208]	@ (800cb1c <_strtol_l.isra.0+0xf0>)
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	462a      	mov	r2, r5
 800ca50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca54:	5d06      	ldrb	r6, [r0, r4]
 800ca56:	f016 0608 	ands.w	r6, r6, #8
 800ca5a:	d1f8      	bne.n	800ca4e <_strtol_l.isra.0+0x22>
 800ca5c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ca5e:	d110      	bne.n	800ca82 <_strtol_l.isra.0+0x56>
 800ca60:	782c      	ldrb	r4, [r5, #0]
 800ca62:	2601      	movs	r6, #1
 800ca64:	1c95      	adds	r5, r2, #2
 800ca66:	f033 0210 	bics.w	r2, r3, #16
 800ca6a:	d115      	bne.n	800ca98 <_strtol_l.isra.0+0x6c>
 800ca6c:	2c30      	cmp	r4, #48	@ 0x30
 800ca6e:	d10d      	bne.n	800ca8c <_strtol_l.isra.0+0x60>
 800ca70:	782a      	ldrb	r2, [r5, #0]
 800ca72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca76:	2a58      	cmp	r2, #88	@ 0x58
 800ca78:	d108      	bne.n	800ca8c <_strtol_l.isra.0+0x60>
 800ca7a:	786c      	ldrb	r4, [r5, #1]
 800ca7c:	3502      	adds	r5, #2
 800ca7e:	2310      	movs	r3, #16
 800ca80:	e00a      	b.n	800ca98 <_strtol_l.isra.0+0x6c>
 800ca82:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca84:	bf04      	itt	eq
 800ca86:	782c      	ldrbeq	r4, [r5, #0]
 800ca88:	1c95      	addeq	r5, r2, #2
 800ca8a:	e7ec      	b.n	800ca66 <_strtol_l.isra.0+0x3a>
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1f6      	bne.n	800ca7e <_strtol_l.isra.0+0x52>
 800ca90:	2c30      	cmp	r4, #48	@ 0x30
 800ca92:	bf14      	ite	ne
 800ca94:	230a      	movne	r3, #10
 800ca96:	2308      	moveq	r3, #8
 800ca98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ca9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800caa0:	2200      	movs	r2, #0
 800caa2:	fbbc f9f3 	udiv	r9, ip, r3
 800caa6:	4610      	mov	r0, r2
 800caa8:	fb03 ca19 	mls	sl, r3, r9, ip
 800caac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cab0:	2f09      	cmp	r7, #9
 800cab2:	d80f      	bhi.n	800cad4 <_strtol_l.isra.0+0xa8>
 800cab4:	463c      	mov	r4, r7
 800cab6:	42a3      	cmp	r3, r4
 800cab8:	dd1b      	ble.n	800caf2 <_strtol_l.isra.0+0xc6>
 800caba:	1c57      	adds	r7, r2, #1
 800cabc:	d007      	beq.n	800cace <_strtol_l.isra.0+0xa2>
 800cabe:	4581      	cmp	r9, r0
 800cac0:	d314      	bcc.n	800caec <_strtol_l.isra.0+0xc0>
 800cac2:	d101      	bne.n	800cac8 <_strtol_l.isra.0+0x9c>
 800cac4:	45a2      	cmp	sl, r4
 800cac6:	db11      	blt.n	800caec <_strtol_l.isra.0+0xc0>
 800cac8:	fb00 4003 	mla	r0, r0, r3, r4
 800cacc:	2201      	movs	r2, #1
 800cace:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cad2:	e7eb      	b.n	800caac <_strtol_l.isra.0+0x80>
 800cad4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cad8:	2f19      	cmp	r7, #25
 800cada:	d801      	bhi.n	800cae0 <_strtol_l.isra.0+0xb4>
 800cadc:	3c37      	subs	r4, #55	@ 0x37
 800cade:	e7ea      	b.n	800cab6 <_strtol_l.isra.0+0x8a>
 800cae0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cae4:	2f19      	cmp	r7, #25
 800cae6:	d804      	bhi.n	800caf2 <_strtol_l.isra.0+0xc6>
 800cae8:	3c57      	subs	r4, #87	@ 0x57
 800caea:	e7e4      	b.n	800cab6 <_strtol_l.isra.0+0x8a>
 800caec:	f04f 32ff 	mov.w	r2, #4294967295
 800caf0:	e7ed      	b.n	800cace <_strtol_l.isra.0+0xa2>
 800caf2:	1c53      	adds	r3, r2, #1
 800caf4:	d108      	bne.n	800cb08 <_strtol_l.isra.0+0xdc>
 800caf6:	2322      	movs	r3, #34	@ 0x22
 800caf8:	f8ce 3000 	str.w	r3, [lr]
 800cafc:	4660      	mov	r0, ip
 800cafe:	f1b8 0f00 	cmp.w	r8, #0
 800cb02:	d0a0      	beq.n	800ca46 <_strtol_l.isra.0+0x1a>
 800cb04:	1e69      	subs	r1, r5, #1
 800cb06:	e006      	b.n	800cb16 <_strtol_l.isra.0+0xea>
 800cb08:	b106      	cbz	r6, 800cb0c <_strtol_l.isra.0+0xe0>
 800cb0a:	4240      	negs	r0, r0
 800cb0c:	f1b8 0f00 	cmp.w	r8, #0
 800cb10:	d099      	beq.n	800ca46 <_strtol_l.isra.0+0x1a>
 800cb12:	2a00      	cmp	r2, #0
 800cb14:	d1f6      	bne.n	800cb04 <_strtol_l.isra.0+0xd8>
 800cb16:	f8c8 1000 	str.w	r1, [r8]
 800cb1a:	e794      	b.n	800ca46 <_strtol_l.isra.0+0x1a>
 800cb1c:	08010c5f 	.word	0x08010c5f

0800cb20 <_strtol_r>:
 800cb20:	f7ff bf84 	b.w	800ca2c <_strtol_l.isra.0>

0800cb24 <__cvt>:
 800cb24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb28:	ec57 6b10 	vmov	r6, r7, d0
 800cb2c:	2f00      	cmp	r7, #0
 800cb2e:	460c      	mov	r4, r1
 800cb30:	4619      	mov	r1, r3
 800cb32:	463b      	mov	r3, r7
 800cb34:	bfbb      	ittet	lt
 800cb36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb3a:	461f      	movlt	r7, r3
 800cb3c:	2300      	movge	r3, #0
 800cb3e:	232d      	movlt	r3, #45	@ 0x2d
 800cb40:	700b      	strb	r3, [r1, #0]
 800cb42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb48:	4691      	mov	r9, r2
 800cb4a:	f023 0820 	bic.w	r8, r3, #32
 800cb4e:	bfbc      	itt	lt
 800cb50:	4632      	movlt	r2, r6
 800cb52:	4616      	movlt	r6, r2
 800cb54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb58:	d005      	beq.n	800cb66 <__cvt+0x42>
 800cb5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb5e:	d100      	bne.n	800cb62 <__cvt+0x3e>
 800cb60:	3401      	adds	r4, #1
 800cb62:	2102      	movs	r1, #2
 800cb64:	e000      	b.n	800cb68 <__cvt+0x44>
 800cb66:	2103      	movs	r1, #3
 800cb68:	ab03      	add	r3, sp, #12
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	ab02      	add	r3, sp, #8
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	ec47 6b10 	vmov	d0, r6, r7
 800cb74:	4653      	mov	r3, sl
 800cb76:	4622      	mov	r2, r4
 800cb78:	f001 fa26 	bl	800dfc8 <_dtoa_r>
 800cb7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb80:	4605      	mov	r5, r0
 800cb82:	d119      	bne.n	800cbb8 <__cvt+0x94>
 800cb84:	f019 0f01 	tst.w	r9, #1
 800cb88:	d00e      	beq.n	800cba8 <__cvt+0x84>
 800cb8a:	eb00 0904 	add.w	r9, r0, r4
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2300      	movs	r3, #0
 800cb92:	4630      	mov	r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	f7f3 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb9a:	b108      	cbz	r0, 800cba0 <__cvt+0x7c>
 800cb9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cba0:	2230      	movs	r2, #48	@ 0x30
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	454b      	cmp	r3, r9
 800cba6:	d31e      	bcc.n	800cbe6 <__cvt+0xc2>
 800cba8:	9b03      	ldr	r3, [sp, #12]
 800cbaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbac:	1b5b      	subs	r3, r3, r5
 800cbae:	4628      	mov	r0, r5
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	b004      	add	sp, #16
 800cbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbbc:	eb00 0904 	add.w	r9, r0, r4
 800cbc0:	d1e5      	bne.n	800cb8e <__cvt+0x6a>
 800cbc2:	7803      	ldrb	r3, [r0, #0]
 800cbc4:	2b30      	cmp	r3, #48	@ 0x30
 800cbc6:	d10a      	bne.n	800cbde <__cvt+0xba>
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2300      	movs	r3, #0
 800cbcc:	4630      	mov	r0, r6
 800cbce:	4639      	mov	r1, r7
 800cbd0:	f7f3 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbd4:	b918      	cbnz	r0, 800cbde <__cvt+0xba>
 800cbd6:	f1c4 0401 	rsb	r4, r4, #1
 800cbda:	f8ca 4000 	str.w	r4, [sl]
 800cbde:	f8da 3000 	ldr.w	r3, [sl]
 800cbe2:	4499      	add	r9, r3
 800cbe4:	e7d3      	b.n	800cb8e <__cvt+0x6a>
 800cbe6:	1c59      	adds	r1, r3, #1
 800cbe8:	9103      	str	r1, [sp, #12]
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	e7d9      	b.n	800cba2 <__cvt+0x7e>

0800cbee <__exponent>:
 800cbee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	bfba      	itte	lt
 800cbf4:	4249      	neglt	r1, r1
 800cbf6:	232d      	movlt	r3, #45	@ 0x2d
 800cbf8:	232b      	movge	r3, #43	@ 0x2b
 800cbfa:	2909      	cmp	r1, #9
 800cbfc:	7002      	strb	r2, [r0, #0]
 800cbfe:	7043      	strb	r3, [r0, #1]
 800cc00:	dd29      	ble.n	800cc56 <__exponent+0x68>
 800cc02:	f10d 0307 	add.w	r3, sp, #7
 800cc06:	461d      	mov	r5, r3
 800cc08:	270a      	movs	r7, #10
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc10:	fb07 1416 	mls	r4, r7, r6, r1
 800cc14:	3430      	adds	r4, #48	@ 0x30
 800cc16:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	2c63      	cmp	r4, #99	@ 0x63
 800cc1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc22:	4631      	mov	r1, r6
 800cc24:	dcf1      	bgt.n	800cc0a <__exponent+0x1c>
 800cc26:	3130      	adds	r1, #48	@ 0x30
 800cc28:	1e94      	subs	r4, r2, #2
 800cc2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc2e:	1c41      	adds	r1, r0, #1
 800cc30:	4623      	mov	r3, r4
 800cc32:	42ab      	cmp	r3, r5
 800cc34:	d30a      	bcc.n	800cc4c <__exponent+0x5e>
 800cc36:	f10d 0309 	add.w	r3, sp, #9
 800cc3a:	1a9b      	subs	r3, r3, r2
 800cc3c:	42ac      	cmp	r4, r5
 800cc3e:	bf88      	it	hi
 800cc40:	2300      	movhi	r3, #0
 800cc42:	3302      	adds	r3, #2
 800cc44:	4403      	add	r3, r0
 800cc46:	1a18      	subs	r0, r3, r0
 800cc48:	b003      	add	sp, #12
 800cc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc50:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc54:	e7ed      	b.n	800cc32 <__exponent+0x44>
 800cc56:	2330      	movs	r3, #48	@ 0x30
 800cc58:	3130      	adds	r1, #48	@ 0x30
 800cc5a:	7083      	strb	r3, [r0, #2]
 800cc5c:	70c1      	strb	r1, [r0, #3]
 800cc5e:	1d03      	adds	r3, r0, #4
 800cc60:	e7f1      	b.n	800cc46 <__exponent+0x58>
	...

0800cc64 <_printf_float>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	b08d      	sub	sp, #52	@ 0x34
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc70:	4616      	mov	r6, r2
 800cc72:	461f      	mov	r7, r3
 800cc74:	4605      	mov	r5, r0
 800cc76:	f001 f883 	bl	800dd80 <_localeconv_r>
 800cc7a:	6803      	ldr	r3, [r0, #0]
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f3 faf6 	bl	8000270 <strlen>
 800cc84:	2300      	movs	r3, #0
 800cc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc88:	f8d8 3000 	ldr.w	r3, [r8]
 800cc8c:	9005      	str	r0, [sp, #20]
 800cc8e:	3307      	adds	r3, #7
 800cc90:	f023 0307 	bic.w	r3, r3, #7
 800cc94:	f103 0208 	add.w	r2, r3, #8
 800cc98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc9c:	f8d4 b000 	ldr.w	fp, [r4]
 800cca0:	f8c8 2000 	str.w	r2, [r8]
 800cca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cca8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ccac:	9307      	str	r3, [sp, #28]
 800ccae:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ccb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccba:	4b9c      	ldr	r3, [pc, #624]	@ (800cf2c <_printf_float+0x2c8>)
 800ccbc:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc0:	f7f3 ff34 	bl	8000b2c <__aeabi_dcmpun>
 800ccc4:	bb70      	cbnz	r0, 800cd24 <_printf_float+0xc0>
 800ccc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccca:	4b98      	ldr	r3, [pc, #608]	@ (800cf2c <_printf_float+0x2c8>)
 800cccc:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd0:	f7f3 ff0e 	bl	8000af0 <__aeabi_dcmple>
 800ccd4:	bb30      	cbnz	r0, 800cd24 <_printf_float+0xc0>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4640      	mov	r0, r8
 800ccdc:	4649      	mov	r1, r9
 800ccde:	f7f3 fefd 	bl	8000adc <__aeabi_dcmplt>
 800cce2:	b110      	cbz	r0, 800ccea <_printf_float+0x86>
 800cce4:	232d      	movs	r3, #45	@ 0x2d
 800cce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccea:	4a91      	ldr	r2, [pc, #580]	@ (800cf30 <_printf_float+0x2cc>)
 800ccec:	4b91      	ldr	r3, [pc, #580]	@ (800cf34 <_printf_float+0x2d0>)
 800ccee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccf2:	bf8c      	ite	hi
 800ccf4:	4690      	movhi	r8, r2
 800ccf6:	4698      	movls	r8, r3
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	6123      	str	r3, [r4, #16]
 800ccfc:	f02b 0304 	bic.w	r3, fp, #4
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	f04f 0900 	mov.w	r9, #0
 800cd06:	9700      	str	r7, [sp, #0]
 800cd08:	4633      	mov	r3, r6
 800cd0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f000 fb14 	bl	800d33c <_printf_common>
 800cd14:	3001      	adds	r0, #1
 800cd16:	f040 808d 	bne.w	800ce34 <_printf_float+0x1d0>
 800cd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1e:	b00d      	add	sp, #52	@ 0x34
 800cd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	4642      	mov	r2, r8
 800cd26:	464b      	mov	r3, r9
 800cd28:	4640      	mov	r0, r8
 800cd2a:	4649      	mov	r1, r9
 800cd2c:	f7f3 fefe 	bl	8000b2c <__aeabi_dcmpun>
 800cd30:	b140      	cbz	r0, 800cd44 <_printf_float+0xe0>
 800cd32:	464b      	mov	r3, r9
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bfbc      	itt	lt
 800cd38:	232d      	movlt	r3, #45	@ 0x2d
 800cd3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd3e:	4a7e      	ldr	r2, [pc, #504]	@ (800cf38 <_printf_float+0x2d4>)
 800cd40:	4b7e      	ldr	r3, [pc, #504]	@ (800cf3c <_printf_float+0x2d8>)
 800cd42:	e7d4      	b.n	800ccee <_printf_float+0x8a>
 800cd44:	6863      	ldr	r3, [r4, #4]
 800cd46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd4a:	9206      	str	r2, [sp, #24]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	d13b      	bne.n	800cdc8 <_printf_float+0x164>
 800cd50:	2306      	movs	r3, #6
 800cd52:	6063      	str	r3, [r4, #4]
 800cd54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd58:	2300      	movs	r3, #0
 800cd5a:	6022      	str	r2, [r4, #0]
 800cd5c:	9303      	str	r3, [sp, #12]
 800cd5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd60:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd64:	ab09      	add	r3, sp, #36	@ 0x24
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	6861      	ldr	r1, [r4, #4]
 800cd6a:	ec49 8b10 	vmov	d0, r8, r9
 800cd6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd72:	4628      	mov	r0, r5
 800cd74:	f7ff fed6 	bl	800cb24 <__cvt>
 800cd78:	9b06      	ldr	r3, [sp, #24]
 800cd7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd7c:	2b47      	cmp	r3, #71	@ 0x47
 800cd7e:	4680      	mov	r8, r0
 800cd80:	d129      	bne.n	800cdd6 <_printf_float+0x172>
 800cd82:	1cc8      	adds	r0, r1, #3
 800cd84:	db02      	blt.n	800cd8c <_printf_float+0x128>
 800cd86:	6863      	ldr	r3, [r4, #4]
 800cd88:	4299      	cmp	r1, r3
 800cd8a:	dd41      	ble.n	800ce10 <_printf_float+0x1ac>
 800cd8c:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd90:	fa5f fa8a 	uxtb.w	sl, sl
 800cd94:	3901      	subs	r1, #1
 800cd96:	4652      	mov	r2, sl
 800cd98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd9e:	f7ff ff26 	bl	800cbee <__exponent>
 800cda2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cda4:	1813      	adds	r3, r2, r0
 800cda6:	2a01      	cmp	r2, #1
 800cda8:	4681      	mov	r9, r0
 800cdaa:	6123      	str	r3, [r4, #16]
 800cdac:	dc02      	bgt.n	800cdb4 <_printf_float+0x150>
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	07d2      	lsls	r2, r2, #31
 800cdb2:	d501      	bpl.n	800cdb8 <_printf_float+0x154>
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	6123      	str	r3, [r4, #16]
 800cdb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0a2      	beq.n	800cd06 <_printf_float+0xa2>
 800cdc0:	232d      	movs	r3, #45	@ 0x2d
 800cdc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdc6:	e79e      	b.n	800cd06 <_printf_float+0xa2>
 800cdc8:	9a06      	ldr	r2, [sp, #24]
 800cdca:	2a47      	cmp	r2, #71	@ 0x47
 800cdcc:	d1c2      	bne.n	800cd54 <_printf_float+0xf0>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1c0      	bne.n	800cd54 <_printf_float+0xf0>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e7bd      	b.n	800cd52 <_printf_float+0xee>
 800cdd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdda:	d9db      	bls.n	800cd94 <_printf_float+0x130>
 800cddc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cde0:	d118      	bne.n	800ce14 <_printf_float+0x1b0>
 800cde2:	2900      	cmp	r1, #0
 800cde4:	6863      	ldr	r3, [r4, #4]
 800cde6:	dd0b      	ble.n	800ce00 <_printf_float+0x19c>
 800cde8:	6121      	str	r1, [r4, #16]
 800cdea:	b913      	cbnz	r3, 800cdf2 <_printf_float+0x18e>
 800cdec:	6822      	ldr	r2, [r4, #0]
 800cdee:	07d0      	lsls	r0, r2, #31
 800cdf0:	d502      	bpl.n	800cdf8 <_printf_float+0x194>
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	440b      	add	r3, r1
 800cdf6:	6123      	str	r3, [r4, #16]
 800cdf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdfa:	f04f 0900 	mov.w	r9, #0
 800cdfe:	e7db      	b.n	800cdb8 <_printf_float+0x154>
 800ce00:	b913      	cbnz	r3, 800ce08 <_printf_float+0x1a4>
 800ce02:	6822      	ldr	r2, [r4, #0]
 800ce04:	07d2      	lsls	r2, r2, #31
 800ce06:	d501      	bpl.n	800ce0c <_printf_float+0x1a8>
 800ce08:	3302      	adds	r3, #2
 800ce0a:	e7f4      	b.n	800cdf6 <_printf_float+0x192>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e7f2      	b.n	800cdf6 <_printf_float+0x192>
 800ce10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce16:	4299      	cmp	r1, r3
 800ce18:	db05      	blt.n	800ce26 <_printf_float+0x1c2>
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	6121      	str	r1, [r4, #16]
 800ce1e:	07d8      	lsls	r0, r3, #31
 800ce20:	d5ea      	bpl.n	800cdf8 <_printf_float+0x194>
 800ce22:	1c4b      	adds	r3, r1, #1
 800ce24:	e7e7      	b.n	800cdf6 <_printf_float+0x192>
 800ce26:	2900      	cmp	r1, #0
 800ce28:	bfd4      	ite	le
 800ce2a:	f1c1 0202 	rsble	r2, r1, #2
 800ce2e:	2201      	movgt	r2, #1
 800ce30:	4413      	add	r3, r2
 800ce32:	e7e0      	b.n	800cdf6 <_printf_float+0x192>
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	055a      	lsls	r2, r3, #21
 800ce38:	d407      	bmi.n	800ce4a <_printf_float+0x1e6>
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	4642      	mov	r2, r8
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	d12b      	bne.n	800cea0 <_printf_float+0x23c>
 800ce48:	e767      	b.n	800cd1a <_printf_float+0xb6>
 800ce4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce4e:	f240 80dd 	bls.w	800d00c <_printf_float+0x3a8>
 800ce52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce56:	2200      	movs	r2, #0
 800ce58:	2300      	movs	r3, #0
 800ce5a:	f7f3 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d033      	beq.n	800ceca <_printf_float+0x266>
 800ce62:	4a37      	ldr	r2, [pc, #220]	@ (800cf40 <_printf_float+0x2dc>)
 800ce64:	2301      	movs	r3, #1
 800ce66:	4631      	mov	r1, r6
 800ce68:	4628      	mov	r0, r5
 800ce6a:	47b8      	blx	r7
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	f43f af54 	beq.w	800cd1a <_printf_float+0xb6>
 800ce72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce76:	4543      	cmp	r3, r8
 800ce78:	db02      	blt.n	800ce80 <_printf_float+0x21c>
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	07d8      	lsls	r0, r3, #31
 800ce7e:	d50f      	bpl.n	800cea0 <_printf_float+0x23c>
 800ce80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce84:	4631      	mov	r1, r6
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b8      	blx	r7
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f43f af45 	beq.w	800cd1a <_printf_float+0xb6>
 800ce90:	f04f 0900 	mov.w	r9, #0
 800ce94:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce98:	f104 0a1a 	add.w	sl, r4, #26
 800ce9c:	45c8      	cmp	r8, r9
 800ce9e:	dc09      	bgt.n	800ceb4 <_printf_float+0x250>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	079b      	lsls	r3, r3, #30
 800cea4:	f100 8103 	bmi.w	800d0ae <_printf_float+0x44a>
 800cea8:	68e0      	ldr	r0, [r4, #12]
 800ceaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceac:	4298      	cmp	r0, r3
 800ceae:	bfb8      	it	lt
 800ceb0:	4618      	movlt	r0, r3
 800ceb2:	e734      	b.n	800cd1e <_printf_float+0xba>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	4652      	mov	r2, sl
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f af2b 	beq.w	800cd1a <_printf_float+0xb6>
 800cec4:	f109 0901 	add.w	r9, r9, #1
 800cec8:	e7e8      	b.n	800ce9c <_printf_float+0x238>
 800ceca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dc39      	bgt.n	800cf44 <_printf_float+0x2e0>
 800ced0:	4a1b      	ldr	r2, [pc, #108]	@ (800cf40 <_printf_float+0x2dc>)
 800ced2:	2301      	movs	r3, #1
 800ced4:	4631      	mov	r1, r6
 800ced6:	4628      	mov	r0, r5
 800ced8:	47b8      	blx	r7
 800ceda:	3001      	adds	r0, #1
 800cedc:	f43f af1d 	beq.w	800cd1a <_printf_float+0xb6>
 800cee0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cee4:	ea59 0303 	orrs.w	r3, r9, r3
 800cee8:	d102      	bne.n	800cef0 <_printf_float+0x28c>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	07d9      	lsls	r1, r3, #31
 800ceee:	d5d7      	bpl.n	800cea0 <_printf_float+0x23c>
 800cef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef4:	4631      	mov	r1, r6
 800cef6:	4628      	mov	r0, r5
 800cef8:	47b8      	blx	r7
 800cefa:	3001      	adds	r0, #1
 800cefc:	f43f af0d 	beq.w	800cd1a <_printf_float+0xb6>
 800cf00:	f04f 0a00 	mov.w	sl, #0
 800cf04:	f104 0b1a 	add.w	fp, r4, #26
 800cf08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf0a:	425b      	negs	r3, r3
 800cf0c:	4553      	cmp	r3, sl
 800cf0e:	dc01      	bgt.n	800cf14 <_printf_float+0x2b0>
 800cf10:	464b      	mov	r3, r9
 800cf12:	e793      	b.n	800ce3c <_printf_float+0x1d8>
 800cf14:	2301      	movs	r3, #1
 800cf16:	465a      	mov	r2, fp
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b8      	blx	r7
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f43f aefb 	beq.w	800cd1a <_printf_float+0xb6>
 800cf24:	f10a 0a01 	add.w	sl, sl, #1
 800cf28:	e7ee      	b.n	800cf08 <_printf_float+0x2a4>
 800cf2a:	bf00      	nop
 800cf2c:	7fefffff 	.word	0x7fefffff
 800cf30:	08010b14 	.word	0x08010b14
 800cf34:	08010b10 	.word	0x08010b10
 800cf38:	08010b1c 	.word	0x08010b1c
 800cf3c:	08010b18 	.word	0x08010b18
 800cf40:	08010c4f 	.word	0x08010c4f
 800cf44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf4a:	4553      	cmp	r3, sl
 800cf4c:	bfa8      	it	ge
 800cf4e:	4653      	movge	r3, sl
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	4699      	mov	r9, r3
 800cf54:	dc36      	bgt.n	800cfc4 <_printf_float+0x360>
 800cf56:	f04f 0b00 	mov.w	fp, #0
 800cf5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf5e:	f104 021a 	add.w	r2, r4, #26
 800cf62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf64:	9306      	str	r3, [sp, #24]
 800cf66:	eba3 0309 	sub.w	r3, r3, r9
 800cf6a:	455b      	cmp	r3, fp
 800cf6c:	dc31      	bgt.n	800cfd2 <_printf_float+0x36e>
 800cf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf70:	459a      	cmp	sl, r3
 800cf72:	dc3a      	bgt.n	800cfea <_printf_float+0x386>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	07da      	lsls	r2, r3, #31
 800cf78:	d437      	bmi.n	800cfea <_printf_float+0x386>
 800cf7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf7c:	ebaa 0903 	sub.w	r9, sl, r3
 800cf80:	9b06      	ldr	r3, [sp, #24]
 800cf82:	ebaa 0303 	sub.w	r3, sl, r3
 800cf86:	4599      	cmp	r9, r3
 800cf88:	bfa8      	it	ge
 800cf8a:	4699      	movge	r9, r3
 800cf8c:	f1b9 0f00 	cmp.w	r9, #0
 800cf90:	dc33      	bgt.n	800cffa <_printf_float+0x396>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf9a:	f104 0b1a 	add.w	fp, r4, #26
 800cf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa0:	ebaa 0303 	sub.w	r3, sl, r3
 800cfa4:	eba3 0309 	sub.w	r3, r3, r9
 800cfa8:	4543      	cmp	r3, r8
 800cfaa:	f77f af79 	ble.w	800cea0 <_printf_float+0x23c>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	465a      	mov	r2, fp
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	f43f aeae 	beq.w	800cd1a <_printf_float+0xb6>
 800cfbe:	f108 0801 	add.w	r8, r8, #1
 800cfc2:	e7ec      	b.n	800cf9e <_printf_float+0x33a>
 800cfc4:	4642      	mov	r2, r8
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	d1c2      	bne.n	800cf56 <_printf_float+0x2f2>
 800cfd0:	e6a3      	b.n	800cd1a <_printf_float+0xb6>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	4631      	mov	r1, r6
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	9206      	str	r2, [sp, #24]
 800cfda:	47b8      	blx	r7
 800cfdc:	3001      	adds	r0, #1
 800cfde:	f43f ae9c 	beq.w	800cd1a <_printf_float+0xb6>
 800cfe2:	9a06      	ldr	r2, [sp, #24]
 800cfe4:	f10b 0b01 	add.w	fp, fp, #1
 800cfe8:	e7bb      	b.n	800cf62 <_printf_float+0x2fe>
 800cfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfee:	4631      	mov	r1, r6
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b8      	blx	r7
 800cff4:	3001      	adds	r0, #1
 800cff6:	d1c0      	bne.n	800cf7a <_printf_float+0x316>
 800cff8:	e68f      	b.n	800cd1a <_printf_float+0xb6>
 800cffa:	9a06      	ldr	r2, [sp, #24]
 800cffc:	464b      	mov	r3, r9
 800cffe:	4442      	add	r2, r8
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	47b8      	blx	r7
 800d006:	3001      	adds	r0, #1
 800d008:	d1c3      	bne.n	800cf92 <_printf_float+0x32e>
 800d00a:	e686      	b.n	800cd1a <_printf_float+0xb6>
 800d00c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d010:	f1ba 0f01 	cmp.w	sl, #1
 800d014:	dc01      	bgt.n	800d01a <_printf_float+0x3b6>
 800d016:	07db      	lsls	r3, r3, #31
 800d018:	d536      	bpl.n	800d088 <_printf_float+0x424>
 800d01a:	2301      	movs	r3, #1
 800d01c:	4642      	mov	r2, r8
 800d01e:	4631      	mov	r1, r6
 800d020:	4628      	mov	r0, r5
 800d022:	47b8      	blx	r7
 800d024:	3001      	adds	r0, #1
 800d026:	f43f ae78 	beq.w	800cd1a <_printf_float+0xb6>
 800d02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d02e:	4631      	mov	r1, r6
 800d030:	4628      	mov	r0, r5
 800d032:	47b8      	blx	r7
 800d034:	3001      	adds	r0, #1
 800d036:	f43f ae70 	beq.w	800cd1a <_printf_float+0xb6>
 800d03a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d03e:	2200      	movs	r2, #0
 800d040:	2300      	movs	r3, #0
 800d042:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d046:	f7f3 fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d04a:	b9c0      	cbnz	r0, 800d07e <_printf_float+0x41a>
 800d04c:	4653      	mov	r3, sl
 800d04e:	f108 0201 	add.w	r2, r8, #1
 800d052:	4631      	mov	r1, r6
 800d054:	4628      	mov	r0, r5
 800d056:	47b8      	blx	r7
 800d058:	3001      	adds	r0, #1
 800d05a:	d10c      	bne.n	800d076 <_printf_float+0x412>
 800d05c:	e65d      	b.n	800cd1a <_printf_float+0xb6>
 800d05e:	2301      	movs	r3, #1
 800d060:	465a      	mov	r2, fp
 800d062:	4631      	mov	r1, r6
 800d064:	4628      	mov	r0, r5
 800d066:	47b8      	blx	r7
 800d068:	3001      	adds	r0, #1
 800d06a:	f43f ae56 	beq.w	800cd1a <_printf_float+0xb6>
 800d06e:	f108 0801 	add.w	r8, r8, #1
 800d072:	45d0      	cmp	r8, sl
 800d074:	dbf3      	blt.n	800d05e <_printf_float+0x3fa>
 800d076:	464b      	mov	r3, r9
 800d078:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d07c:	e6df      	b.n	800ce3e <_printf_float+0x1da>
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	f104 0b1a 	add.w	fp, r4, #26
 800d086:	e7f4      	b.n	800d072 <_printf_float+0x40e>
 800d088:	2301      	movs	r3, #1
 800d08a:	4642      	mov	r2, r8
 800d08c:	e7e1      	b.n	800d052 <_printf_float+0x3ee>
 800d08e:	2301      	movs	r3, #1
 800d090:	464a      	mov	r2, r9
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f ae3e 	beq.w	800cd1a <_printf_float+0xb6>
 800d09e:	f108 0801 	add.w	r8, r8, #1
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0a6:	1a5b      	subs	r3, r3, r1
 800d0a8:	4543      	cmp	r3, r8
 800d0aa:	dcf0      	bgt.n	800d08e <_printf_float+0x42a>
 800d0ac:	e6fc      	b.n	800cea8 <_printf_float+0x244>
 800d0ae:	f04f 0800 	mov.w	r8, #0
 800d0b2:	f104 0919 	add.w	r9, r4, #25
 800d0b6:	e7f4      	b.n	800d0a2 <_printf_float+0x43e>

0800d0b8 <__sfputc_r>:
 800d0b8:	6893      	ldr	r3, [r2, #8]
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	b410      	push	{r4}
 800d0c0:	6093      	str	r3, [r2, #8]
 800d0c2:	da08      	bge.n	800d0d6 <__sfputc_r+0x1e>
 800d0c4:	6994      	ldr	r4, [r2, #24]
 800d0c6:	42a3      	cmp	r3, r4
 800d0c8:	db01      	blt.n	800d0ce <__sfputc_r+0x16>
 800d0ca:	290a      	cmp	r1, #10
 800d0cc:	d103      	bne.n	800d0d6 <__sfputc_r+0x1e>
 800d0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0d2:	f000 bd78 	b.w	800dbc6 <__swbuf_r>
 800d0d6:	6813      	ldr	r3, [r2, #0]
 800d0d8:	1c58      	adds	r0, r3, #1
 800d0da:	6010      	str	r0, [r2, #0]
 800d0dc:	7019      	strb	r1, [r3, #0]
 800d0de:	4608      	mov	r0, r1
 800d0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <__sfputs_r>:
 800d0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	460f      	mov	r7, r1
 800d0ec:	4614      	mov	r4, r2
 800d0ee:	18d5      	adds	r5, r2, r3
 800d0f0:	42ac      	cmp	r4, r5
 800d0f2:	d101      	bne.n	800d0f8 <__sfputs_r+0x12>
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	e007      	b.n	800d108 <__sfputs_r+0x22>
 800d0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0fc:	463a      	mov	r2, r7
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7ff ffda 	bl	800d0b8 <__sfputc_r>
 800d104:	1c43      	adds	r3, r0, #1
 800d106:	d1f3      	bne.n	800d0f0 <__sfputs_r+0xa>
 800d108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d10c <_vfiprintf_r>:
 800d10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d110:	460d      	mov	r5, r1
 800d112:	b09d      	sub	sp, #116	@ 0x74
 800d114:	4614      	mov	r4, r2
 800d116:	4698      	mov	r8, r3
 800d118:	4606      	mov	r6, r0
 800d11a:	b118      	cbz	r0, 800d124 <_vfiprintf_r+0x18>
 800d11c:	6a03      	ldr	r3, [r0, #32]
 800d11e:	b90b      	cbnz	r3, 800d124 <_vfiprintf_r+0x18>
 800d120:	f000 fbd0 	bl	800d8c4 <__sinit>
 800d124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d126:	07d9      	lsls	r1, r3, #31
 800d128:	d405      	bmi.n	800d136 <_vfiprintf_r+0x2a>
 800d12a:	89ab      	ldrh	r3, [r5, #12]
 800d12c:	059a      	lsls	r2, r3, #22
 800d12e:	d402      	bmi.n	800d136 <_vfiprintf_r+0x2a>
 800d130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d132:	f000 feaa 	bl	800de8a <__retarget_lock_acquire_recursive>
 800d136:	89ab      	ldrh	r3, [r5, #12]
 800d138:	071b      	lsls	r3, r3, #28
 800d13a:	d501      	bpl.n	800d140 <_vfiprintf_r+0x34>
 800d13c:	692b      	ldr	r3, [r5, #16]
 800d13e:	b99b      	cbnz	r3, 800d168 <_vfiprintf_r+0x5c>
 800d140:	4629      	mov	r1, r5
 800d142:	4630      	mov	r0, r6
 800d144:	f000 fd7e 	bl	800dc44 <__swsetup_r>
 800d148:	b170      	cbz	r0, 800d168 <_vfiprintf_r+0x5c>
 800d14a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d14c:	07dc      	lsls	r4, r3, #31
 800d14e:	d504      	bpl.n	800d15a <_vfiprintf_r+0x4e>
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	b01d      	add	sp, #116	@ 0x74
 800d156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	0598      	lsls	r0, r3, #22
 800d15e:	d4f7      	bmi.n	800d150 <_vfiprintf_r+0x44>
 800d160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d162:	f000 fe93 	bl	800de8c <__retarget_lock_release_recursive>
 800d166:	e7f3      	b.n	800d150 <_vfiprintf_r+0x44>
 800d168:	2300      	movs	r3, #0
 800d16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d16c:	2320      	movs	r3, #32
 800d16e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d172:	f8cd 800c 	str.w	r8, [sp, #12]
 800d176:	2330      	movs	r3, #48	@ 0x30
 800d178:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d328 <_vfiprintf_r+0x21c>
 800d17c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d180:	f04f 0901 	mov.w	r9, #1
 800d184:	4623      	mov	r3, r4
 800d186:	469a      	mov	sl, r3
 800d188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d18c:	b10a      	cbz	r2, 800d192 <_vfiprintf_r+0x86>
 800d18e:	2a25      	cmp	r2, #37	@ 0x25
 800d190:	d1f9      	bne.n	800d186 <_vfiprintf_r+0x7a>
 800d192:	ebba 0b04 	subs.w	fp, sl, r4
 800d196:	d00b      	beq.n	800d1b0 <_vfiprintf_r+0xa4>
 800d198:	465b      	mov	r3, fp
 800d19a:	4622      	mov	r2, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f7ff ffa1 	bl	800d0e6 <__sfputs_r>
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	f000 80a7 	beq.w	800d2f8 <_vfiprintf_r+0x1ec>
 800d1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1ac:	445a      	add	r2, fp
 800d1ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 809f 	beq.w	800d2f8 <_vfiprintf_r+0x1ec>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c4:	f10a 0a01 	add.w	sl, sl, #1
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	9307      	str	r3, [sp, #28]
 800d1cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1d2:	4654      	mov	r4, sl
 800d1d4:	2205      	movs	r2, #5
 800d1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1da:	4853      	ldr	r0, [pc, #332]	@ (800d328 <_vfiprintf_r+0x21c>)
 800d1dc:	f7f2 fff8 	bl	80001d0 <memchr>
 800d1e0:	9a04      	ldr	r2, [sp, #16]
 800d1e2:	b9d8      	cbnz	r0, 800d21c <_vfiprintf_r+0x110>
 800d1e4:	06d1      	lsls	r1, r2, #27
 800d1e6:	bf44      	itt	mi
 800d1e8:	2320      	movmi	r3, #32
 800d1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1ee:	0713      	lsls	r3, r2, #28
 800d1f0:	bf44      	itt	mi
 800d1f2:	232b      	movmi	r3, #43	@ 0x2b
 800d1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1fe:	d015      	beq.n	800d22c <_vfiprintf_r+0x120>
 800d200:	9a07      	ldr	r2, [sp, #28]
 800d202:	4654      	mov	r4, sl
 800d204:	2000      	movs	r0, #0
 800d206:	f04f 0c0a 	mov.w	ip, #10
 800d20a:	4621      	mov	r1, r4
 800d20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d210:	3b30      	subs	r3, #48	@ 0x30
 800d212:	2b09      	cmp	r3, #9
 800d214:	d94b      	bls.n	800d2ae <_vfiprintf_r+0x1a2>
 800d216:	b1b0      	cbz	r0, 800d246 <_vfiprintf_r+0x13a>
 800d218:	9207      	str	r2, [sp, #28]
 800d21a:	e014      	b.n	800d246 <_vfiprintf_r+0x13a>
 800d21c:	eba0 0308 	sub.w	r3, r0, r8
 800d220:	fa09 f303 	lsl.w	r3, r9, r3
 800d224:	4313      	orrs	r3, r2
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	46a2      	mov	sl, r4
 800d22a:	e7d2      	b.n	800d1d2 <_vfiprintf_r+0xc6>
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	1d19      	adds	r1, r3, #4
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	9103      	str	r1, [sp, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	bfbb      	ittet	lt
 800d238:	425b      	neglt	r3, r3
 800d23a:	f042 0202 	orrlt.w	r2, r2, #2
 800d23e:	9307      	strge	r3, [sp, #28]
 800d240:	9307      	strlt	r3, [sp, #28]
 800d242:	bfb8      	it	lt
 800d244:	9204      	strlt	r2, [sp, #16]
 800d246:	7823      	ldrb	r3, [r4, #0]
 800d248:	2b2e      	cmp	r3, #46	@ 0x2e
 800d24a:	d10a      	bne.n	800d262 <_vfiprintf_r+0x156>
 800d24c:	7863      	ldrb	r3, [r4, #1]
 800d24e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d250:	d132      	bne.n	800d2b8 <_vfiprintf_r+0x1ac>
 800d252:	9b03      	ldr	r3, [sp, #12]
 800d254:	1d1a      	adds	r2, r3, #4
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	9203      	str	r2, [sp, #12]
 800d25a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d25e:	3402      	adds	r4, #2
 800d260:	9305      	str	r3, [sp, #20]
 800d262:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d338 <_vfiprintf_r+0x22c>
 800d266:	7821      	ldrb	r1, [r4, #0]
 800d268:	2203      	movs	r2, #3
 800d26a:	4650      	mov	r0, sl
 800d26c:	f7f2 ffb0 	bl	80001d0 <memchr>
 800d270:	b138      	cbz	r0, 800d282 <_vfiprintf_r+0x176>
 800d272:	9b04      	ldr	r3, [sp, #16]
 800d274:	eba0 000a 	sub.w	r0, r0, sl
 800d278:	2240      	movs	r2, #64	@ 0x40
 800d27a:	4082      	lsls	r2, r0
 800d27c:	4313      	orrs	r3, r2
 800d27e:	3401      	adds	r4, #1
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d286:	4829      	ldr	r0, [pc, #164]	@ (800d32c <_vfiprintf_r+0x220>)
 800d288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d28c:	2206      	movs	r2, #6
 800d28e:	f7f2 ff9f 	bl	80001d0 <memchr>
 800d292:	2800      	cmp	r0, #0
 800d294:	d03f      	beq.n	800d316 <_vfiprintf_r+0x20a>
 800d296:	4b26      	ldr	r3, [pc, #152]	@ (800d330 <_vfiprintf_r+0x224>)
 800d298:	bb1b      	cbnz	r3, 800d2e2 <_vfiprintf_r+0x1d6>
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	3307      	adds	r3, #7
 800d29e:	f023 0307 	bic.w	r3, r3, #7
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	9303      	str	r3, [sp, #12]
 800d2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a8:	443b      	add	r3, r7
 800d2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ac:	e76a      	b.n	800d184 <_vfiprintf_r+0x78>
 800d2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	e7a8      	b.n	800d20a <_vfiprintf_r+0xfe>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	3401      	adds	r4, #1
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f04f 0c0a 	mov.w	ip, #10
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ca:	3a30      	subs	r2, #48	@ 0x30
 800d2cc:	2a09      	cmp	r2, #9
 800d2ce:	d903      	bls.n	800d2d8 <_vfiprintf_r+0x1cc>
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0c6      	beq.n	800d262 <_vfiprintf_r+0x156>
 800d2d4:	9105      	str	r1, [sp, #20]
 800d2d6:	e7c4      	b.n	800d262 <_vfiprintf_r+0x156>
 800d2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2dc:	4604      	mov	r4, r0
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e7f0      	b.n	800d2c4 <_vfiprintf_r+0x1b8>
 800d2e2:	ab03      	add	r3, sp, #12
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	4b12      	ldr	r3, [pc, #72]	@ (800d334 <_vfiprintf_r+0x228>)
 800d2ea:	a904      	add	r1, sp, #16
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	f7ff fcb9 	bl	800cc64 <_printf_float>
 800d2f2:	4607      	mov	r7, r0
 800d2f4:	1c78      	adds	r0, r7, #1
 800d2f6:	d1d6      	bne.n	800d2a6 <_vfiprintf_r+0x19a>
 800d2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2fa:	07d9      	lsls	r1, r3, #31
 800d2fc:	d405      	bmi.n	800d30a <_vfiprintf_r+0x1fe>
 800d2fe:	89ab      	ldrh	r3, [r5, #12]
 800d300:	059a      	lsls	r2, r3, #22
 800d302:	d402      	bmi.n	800d30a <_vfiprintf_r+0x1fe>
 800d304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d306:	f000 fdc1 	bl	800de8c <__retarget_lock_release_recursive>
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	065b      	lsls	r3, r3, #25
 800d30e:	f53f af1f 	bmi.w	800d150 <_vfiprintf_r+0x44>
 800d312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d314:	e71e      	b.n	800d154 <_vfiprintf_r+0x48>
 800d316:	ab03      	add	r3, sp, #12
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	462a      	mov	r2, r5
 800d31c:	4b05      	ldr	r3, [pc, #20]	@ (800d334 <_vfiprintf_r+0x228>)
 800d31e:	a904      	add	r1, sp, #16
 800d320:	4630      	mov	r0, r6
 800d322:	f000 f879 	bl	800d418 <_printf_i>
 800d326:	e7e4      	b.n	800d2f2 <_vfiprintf_r+0x1e6>
 800d328:	08010b20 	.word	0x08010b20
 800d32c:	08010b2a 	.word	0x08010b2a
 800d330:	0800cc65 	.word	0x0800cc65
 800d334:	0800d0e7 	.word	0x0800d0e7
 800d338:	08010b26 	.word	0x08010b26

0800d33c <_printf_common>:
 800d33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	4616      	mov	r6, r2
 800d342:	4698      	mov	r8, r3
 800d344:	688a      	ldr	r2, [r1, #8]
 800d346:	690b      	ldr	r3, [r1, #16]
 800d348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d34c:	4293      	cmp	r3, r2
 800d34e:	bfb8      	it	lt
 800d350:	4613      	movlt	r3, r2
 800d352:	6033      	str	r3, [r6, #0]
 800d354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d358:	4607      	mov	r7, r0
 800d35a:	460c      	mov	r4, r1
 800d35c:	b10a      	cbz	r2, 800d362 <_printf_common+0x26>
 800d35e:	3301      	adds	r3, #1
 800d360:	6033      	str	r3, [r6, #0]
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	0699      	lsls	r1, r3, #26
 800d366:	bf42      	ittt	mi
 800d368:	6833      	ldrmi	r3, [r6, #0]
 800d36a:	3302      	addmi	r3, #2
 800d36c:	6033      	strmi	r3, [r6, #0]
 800d36e:	6825      	ldr	r5, [r4, #0]
 800d370:	f015 0506 	ands.w	r5, r5, #6
 800d374:	d106      	bne.n	800d384 <_printf_common+0x48>
 800d376:	f104 0a19 	add.w	sl, r4, #25
 800d37a:	68e3      	ldr	r3, [r4, #12]
 800d37c:	6832      	ldr	r2, [r6, #0]
 800d37e:	1a9b      	subs	r3, r3, r2
 800d380:	42ab      	cmp	r3, r5
 800d382:	dc26      	bgt.n	800d3d2 <_printf_common+0x96>
 800d384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	3b00      	subs	r3, #0
 800d38c:	bf18      	it	ne
 800d38e:	2301      	movne	r3, #1
 800d390:	0692      	lsls	r2, r2, #26
 800d392:	d42b      	bmi.n	800d3ec <_printf_common+0xb0>
 800d394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d398:	4641      	mov	r1, r8
 800d39a:	4638      	mov	r0, r7
 800d39c:	47c8      	blx	r9
 800d39e:	3001      	adds	r0, #1
 800d3a0:	d01e      	beq.n	800d3e0 <_printf_common+0xa4>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	6922      	ldr	r2, [r4, #16]
 800d3a6:	f003 0306 	and.w	r3, r3, #6
 800d3aa:	2b04      	cmp	r3, #4
 800d3ac:	bf02      	ittt	eq
 800d3ae:	68e5      	ldreq	r5, [r4, #12]
 800d3b0:	6833      	ldreq	r3, [r6, #0]
 800d3b2:	1aed      	subeq	r5, r5, r3
 800d3b4:	68a3      	ldr	r3, [r4, #8]
 800d3b6:	bf0c      	ite	eq
 800d3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3bc:	2500      	movne	r5, #0
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	bfc4      	itt	gt
 800d3c2:	1a9b      	subgt	r3, r3, r2
 800d3c4:	18ed      	addgt	r5, r5, r3
 800d3c6:	2600      	movs	r6, #0
 800d3c8:	341a      	adds	r4, #26
 800d3ca:	42b5      	cmp	r5, r6
 800d3cc:	d11a      	bne.n	800d404 <_printf_common+0xc8>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e008      	b.n	800d3e4 <_printf_common+0xa8>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4652      	mov	r2, sl
 800d3d6:	4641      	mov	r1, r8
 800d3d8:	4638      	mov	r0, r7
 800d3da:	47c8      	blx	r9
 800d3dc:	3001      	adds	r0, #1
 800d3de:	d103      	bne.n	800d3e8 <_printf_common+0xac>
 800d3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e8:	3501      	adds	r5, #1
 800d3ea:	e7c6      	b.n	800d37a <_printf_common+0x3e>
 800d3ec:	18e1      	adds	r1, r4, r3
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	2030      	movs	r0, #48	@ 0x30
 800d3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d3f6:	4422      	add	r2, r4
 800d3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d3fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d400:	3302      	adds	r3, #2
 800d402:	e7c7      	b.n	800d394 <_printf_common+0x58>
 800d404:	2301      	movs	r3, #1
 800d406:	4622      	mov	r2, r4
 800d408:	4641      	mov	r1, r8
 800d40a:	4638      	mov	r0, r7
 800d40c:	47c8      	blx	r9
 800d40e:	3001      	adds	r0, #1
 800d410:	d0e6      	beq.n	800d3e0 <_printf_common+0xa4>
 800d412:	3601      	adds	r6, #1
 800d414:	e7d9      	b.n	800d3ca <_printf_common+0x8e>
	...

0800d418 <_printf_i>:
 800d418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d41c:	7e0f      	ldrb	r7, [r1, #24]
 800d41e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d420:	2f78      	cmp	r7, #120	@ 0x78
 800d422:	4691      	mov	r9, r2
 800d424:	4680      	mov	r8, r0
 800d426:	460c      	mov	r4, r1
 800d428:	469a      	mov	sl, r3
 800d42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d42e:	d807      	bhi.n	800d440 <_printf_i+0x28>
 800d430:	2f62      	cmp	r7, #98	@ 0x62
 800d432:	d80a      	bhi.n	800d44a <_printf_i+0x32>
 800d434:	2f00      	cmp	r7, #0
 800d436:	f000 80d1 	beq.w	800d5dc <_printf_i+0x1c4>
 800d43a:	2f58      	cmp	r7, #88	@ 0x58
 800d43c:	f000 80b8 	beq.w	800d5b0 <_printf_i+0x198>
 800d440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d448:	e03a      	b.n	800d4c0 <_printf_i+0xa8>
 800d44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d44e:	2b15      	cmp	r3, #21
 800d450:	d8f6      	bhi.n	800d440 <_printf_i+0x28>
 800d452:	a101      	add	r1, pc, #4	@ (adr r1, 800d458 <_printf_i+0x40>)
 800d454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d458:	0800d4b1 	.word	0x0800d4b1
 800d45c:	0800d4c5 	.word	0x0800d4c5
 800d460:	0800d441 	.word	0x0800d441
 800d464:	0800d441 	.word	0x0800d441
 800d468:	0800d441 	.word	0x0800d441
 800d46c:	0800d441 	.word	0x0800d441
 800d470:	0800d4c5 	.word	0x0800d4c5
 800d474:	0800d441 	.word	0x0800d441
 800d478:	0800d441 	.word	0x0800d441
 800d47c:	0800d441 	.word	0x0800d441
 800d480:	0800d441 	.word	0x0800d441
 800d484:	0800d5c3 	.word	0x0800d5c3
 800d488:	0800d4ef 	.word	0x0800d4ef
 800d48c:	0800d57d 	.word	0x0800d57d
 800d490:	0800d441 	.word	0x0800d441
 800d494:	0800d441 	.word	0x0800d441
 800d498:	0800d5e5 	.word	0x0800d5e5
 800d49c:	0800d441 	.word	0x0800d441
 800d4a0:	0800d4ef 	.word	0x0800d4ef
 800d4a4:	0800d441 	.word	0x0800d441
 800d4a8:	0800d441 	.word	0x0800d441
 800d4ac:	0800d585 	.word	0x0800d585
 800d4b0:	6833      	ldr	r3, [r6, #0]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6032      	str	r2, [r6, #0]
 800d4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e09c      	b.n	800d5fe <_printf_i+0x1e6>
 800d4c4:	6833      	ldr	r3, [r6, #0]
 800d4c6:	6820      	ldr	r0, [r4, #0]
 800d4c8:	1d19      	adds	r1, r3, #4
 800d4ca:	6031      	str	r1, [r6, #0]
 800d4cc:	0606      	lsls	r6, r0, #24
 800d4ce:	d501      	bpl.n	800d4d4 <_printf_i+0xbc>
 800d4d0:	681d      	ldr	r5, [r3, #0]
 800d4d2:	e003      	b.n	800d4dc <_printf_i+0xc4>
 800d4d4:	0645      	lsls	r5, r0, #25
 800d4d6:	d5fb      	bpl.n	800d4d0 <_printf_i+0xb8>
 800d4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d4dc:	2d00      	cmp	r5, #0
 800d4de:	da03      	bge.n	800d4e8 <_printf_i+0xd0>
 800d4e0:	232d      	movs	r3, #45	@ 0x2d
 800d4e2:	426d      	negs	r5, r5
 800d4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4e8:	4858      	ldr	r0, [pc, #352]	@ (800d64c <_printf_i+0x234>)
 800d4ea:	230a      	movs	r3, #10
 800d4ec:	e011      	b.n	800d512 <_printf_i+0xfa>
 800d4ee:	6821      	ldr	r1, [r4, #0]
 800d4f0:	6833      	ldr	r3, [r6, #0]
 800d4f2:	0608      	lsls	r0, r1, #24
 800d4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d4f8:	d402      	bmi.n	800d500 <_printf_i+0xe8>
 800d4fa:	0649      	lsls	r1, r1, #25
 800d4fc:	bf48      	it	mi
 800d4fe:	b2ad      	uxthmi	r5, r5
 800d500:	2f6f      	cmp	r7, #111	@ 0x6f
 800d502:	4852      	ldr	r0, [pc, #328]	@ (800d64c <_printf_i+0x234>)
 800d504:	6033      	str	r3, [r6, #0]
 800d506:	bf14      	ite	ne
 800d508:	230a      	movne	r3, #10
 800d50a:	2308      	moveq	r3, #8
 800d50c:	2100      	movs	r1, #0
 800d50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d512:	6866      	ldr	r6, [r4, #4]
 800d514:	60a6      	str	r6, [r4, #8]
 800d516:	2e00      	cmp	r6, #0
 800d518:	db05      	blt.n	800d526 <_printf_i+0x10e>
 800d51a:	6821      	ldr	r1, [r4, #0]
 800d51c:	432e      	orrs	r6, r5
 800d51e:	f021 0104 	bic.w	r1, r1, #4
 800d522:	6021      	str	r1, [r4, #0]
 800d524:	d04b      	beq.n	800d5be <_printf_i+0x1a6>
 800d526:	4616      	mov	r6, r2
 800d528:	fbb5 f1f3 	udiv	r1, r5, r3
 800d52c:	fb03 5711 	mls	r7, r3, r1, r5
 800d530:	5dc7      	ldrb	r7, [r0, r7]
 800d532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d536:	462f      	mov	r7, r5
 800d538:	42bb      	cmp	r3, r7
 800d53a:	460d      	mov	r5, r1
 800d53c:	d9f4      	bls.n	800d528 <_printf_i+0x110>
 800d53e:	2b08      	cmp	r3, #8
 800d540:	d10b      	bne.n	800d55a <_printf_i+0x142>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	07df      	lsls	r7, r3, #31
 800d546:	d508      	bpl.n	800d55a <_printf_i+0x142>
 800d548:	6923      	ldr	r3, [r4, #16]
 800d54a:	6861      	ldr	r1, [r4, #4]
 800d54c:	4299      	cmp	r1, r3
 800d54e:	bfde      	ittt	le
 800d550:	2330      	movle	r3, #48	@ 0x30
 800d552:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d55a:	1b92      	subs	r2, r2, r6
 800d55c:	6122      	str	r2, [r4, #16]
 800d55e:	f8cd a000 	str.w	sl, [sp]
 800d562:	464b      	mov	r3, r9
 800d564:	aa03      	add	r2, sp, #12
 800d566:	4621      	mov	r1, r4
 800d568:	4640      	mov	r0, r8
 800d56a:	f7ff fee7 	bl	800d33c <_printf_common>
 800d56e:	3001      	adds	r0, #1
 800d570:	d14a      	bne.n	800d608 <_printf_i+0x1f0>
 800d572:	f04f 30ff 	mov.w	r0, #4294967295
 800d576:	b004      	add	sp, #16
 800d578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	f043 0320 	orr.w	r3, r3, #32
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	4832      	ldr	r0, [pc, #200]	@ (800d650 <_printf_i+0x238>)
 800d586:	2778      	movs	r7, #120	@ 0x78
 800d588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	6831      	ldr	r1, [r6, #0]
 800d590:	061f      	lsls	r7, r3, #24
 800d592:	f851 5b04 	ldr.w	r5, [r1], #4
 800d596:	d402      	bmi.n	800d59e <_printf_i+0x186>
 800d598:	065f      	lsls	r7, r3, #25
 800d59a:	bf48      	it	mi
 800d59c:	b2ad      	uxthmi	r5, r5
 800d59e:	6031      	str	r1, [r6, #0]
 800d5a0:	07d9      	lsls	r1, r3, #31
 800d5a2:	bf44      	itt	mi
 800d5a4:	f043 0320 	orrmi.w	r3, r3, #32
 800d5a8:	6023      	strmi	r3, [r4, #0]
 800d5aa:	b11d      	cbz	r5, 800d5b4 <_printf_i+0x19c>
 800d5ac:	2310      	movs	r3, #16
 800d5ae:	e7ad      	b.n	800d50c <_printf_i+0xf4>
 800d5b0:	4826      	ldr	r0, [pc, #152]	@ (800d64c <_printf_i+0x234>)
 800d5b2:	e7e9      	b.n	800d588 <_printf_i+0x170>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	f023 0320 	bic.w	r3, r3, #32
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	e7f6      	b.n	800d5ac <_printf_i+0x194>
 800d5be:	4616      	mov	r6, r2
 800d5c0:	e7bd      	b.n	800d53e <_printf_i+0x126>
 800d5c2:	6833      	ldr	r3, [r6, #0]
 800d5c4:	6825      	ldr	r5, [r4, #0]
 800d5c6:	6961      	ldr	r1, [r4, #20]
 800d5c8:	1d18      	adds	r0, r3, #4
 800d5ca:	6030      	str	r0, [r6, #0]
 800d5cc:	062e      	lsls	r6, r5, #24
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	d501      	bpl.n	800d5d6 <_printf_i+0x1be>
 800d5d2:	6019      	str	r1, [r3, #0]
 800d5d4:	e002      	b.n	800d5dc <_printf_i+0x1c4>
 800d5d6:	0668      	lsls	r0, r5, #25
 800d5d8:	d5fb      	bpl.n	800d5d2 <_printf_i+0x1ba>
 800d5da:	8019      	strh	r1, [r3, #0]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	4616      	mov	r6, r2
 800d5e2:	e7bc      	b.n	800d55e <_printf_i+0x146>
 800d5e4:	6833      	ldr	r3, [r6, #0]
 800d5e6:	1d1a      	adds	r2, r3, #4
 800d5e8:	6032      	str	r2, [r6, #0]
 800d5ea:	681e      	ldr	r6, [r3, #0]
 800d5ec:	6862      	ldr	r2, [r4, #4]
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f7f2 fded 	bl	80001d0 <memchr>
 800d5f6:	b108      	cbz	r0, 800d5fc <_printf_i+0x1e4>
 800d5f8:	1b80      	subs	r0, r0, r6
 800d5fa:	6060      	str	r0, [r4, #4]
 800d5fc:	6863      	ldr	r3, [r4, #4]
 800d5fe:	6123      	str	r3, [r4, #16]
 800d600:	2300      	movs	r3, #0
 800d602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d606:	e7aa      	b.n	800d55e <_printf_i+0x146>
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	4632      	mov	r2, r6
 800d60c:	4649      	mov	r1, r9
 800d60e:	4640      	mov	r0, r8
 800d610:	47d0      	blx	sl
 800d612:	3001      	adds	r0, #1
 800d614:	d0ad      	beq.n	800d572 <_printf_i+0x15a>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	079b      	lsls	r3, r3, #30
 800d61a:	d413      	bmi.n	800d644 <_printf_i+0x22c>
 800d61c:	68e0      	ldr	r0, [r4, #12]
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	4298      	cmp	r0, r3
 800d622:	bfb8      	it	lt
 800d624:	4618      	movlt	r0, r3
 800d626:	e7a6      	b.n	800d576 <_printf_i+0x15e>
 800d628:	2301      	movs	r3, #1
 800d62a:	4632      	mov	r2, r6
 800d62c:	4649      	mov	r1, r9
 800d62e:	4640      	mov	r0, r8
 800d630:	47d0      	blx	sl
 800d632:	3001      	adds	r0, #1
 800d634:	d09d      	beq.n	800d572 <_printf_i+0x15a>
 800d636:	3501      	adds	r5, #1
 800d638:	68e3      	ldr	r3, [r4, #12]
 800d63a:	9903      	ldr	r1, [sp, #12]
 800d63c:	1a5b      	subs	r3, r3, r1
 800d63e:	42ab      	cmp	r3, r5
 800d640:	dcf2      	bgt.n	800d628 <_printf_i+0x210>
 800d642:	e7eb      	b.n	800d61c <_printf_i+0x204>
 800d644:	2500      	movs	r5, #0
 800d646:	f104 0619 	add.w	r6, r4, #25
 800d64a:	e7f5      	b.n	800d638 <_printf_i+0x220>
 800d64c:	08010b31 	.word	0x08010b31
 800d650:	08010b42 	.word	0x08010b42

0800d654 <__sflush_r>:
 800d654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65c:	0716      	lsls	r6, r2, #28
 800d65e:	4605      	mov	r5, r0
 800d660:	460c      	mov	r4, r1
 800d662:	d454      	bmi.n	800d70e <__sflush_r+0xba>
 800d664:	684b      	ldr	r3, [r1, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	dc02      	bgt.n	800d670 <__sflush_r+0x1c>
 800d66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	dd48      	ble.n	800d702 <__sflush_r+0xae>
 800d670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d672:	2e00      	cmp	r6, #0
 800d674:	d045      	beq.n	800d702 <__sflush_r+0xae>
 800d676:	2300      	movs	r3, #0
 800d678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d67c:	682f      	ldr	r7, [r5, #0]
 800d67e:	6a21      	ldr	r1, [r4, #32]
 800d680:	602b      	str	r3, [r5, #0]
 800d682:	d030      	beq.n	800d6e6 <__sflush_r+0x92>
 800d684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	0759      	lsls	r1, r3, #29
 800d68a:	d505      	bpl.n	800d698 <__sflush_r+0x44>
 800d68c:	6863      	ldr	r3, [r4, #4]
 800d68e:	1ad2      	subs	r2, r2, r3
 800d690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d692:	b10b      	cbz	r3, 800d698 <__sflush_r+0x44>
 800d694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d696:	1ad2      	subs	r2, r2, r3
 800d698:	2300      	movs	r3, #0
 800d69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d69c:	6a21      	ldr	r1, [r4, #32]
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b0      	blx	r6
 800d6a2:	1c43      	adds	r3, r0, #1
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	d106      	bne.n	800d6b6 <__sflush_r+0x62>
 800d6a8:	6829      	ldr	r1, [r5, #0]
 800d6aa:	291d      	cmp	r1, #29
 800d6ac:	d82b      	bhi.n	800d706 <__sflush_r+0xb2>
 800d6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d758 <__sflush_r+0x104>)
 800d6b0:	40ca      	lsrs	r2, r1
 800d6b2:	07d6      	lsls	r6, r2, #31
 800d6b4:	d527      	bpl.n	800d706 <__sflush_r+0xb2>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	6062      	str	r2, [r4, #4]
 800d6ba:	04d9      	lsls	r1, r3, #19
 800d6bc:	6922      	ldr	r2, [r4, #16]
 800d6be:	6022      	str	r2, [r4, #0]
 800d6c0:	d504      	bpl.n	800d6cc <__sflush_r+0x78>
 800d6c2:	1c42      	adds	r2, r0, #1
 800d6c4:	d101      	bne.n	800d6ca <__sflush_r+0x76>
 800d6c6:	682b      	ldr	r3, [r5, #0]
 800d6c8:	b903      	cbnz	r3, 800d6cc <__sflush_r+0x78>
 800d6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6ce:	602f      	str	r7, [r5, #0]
 800d6d0:	b1b9      	cbz	r1, 800d702 <__sflush_r+0xae>
 800d6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	d002      	beq.n	800d6e0 <__sflush_r+0x8c>
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f001 fa44 	bl	800eb68 <_free_r>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6e4:	e00d      	b.n	800d702 <__sflush_r+0xae>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	47b0      	blx	r6
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	1c50      	adds	r0, r2, #1
 800d6f0:	d1c9      	bne.n	800d686 <__sflush_r+0x32>
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d0c6      	beq.n	800d686 <__sflush_r+0x32>
 800d6f8:	2b1d      	cmp	r3, #29
 800d6fa:	d001      	beq.n	800d700 <__sflush_r+0xac>
 800d6fc:	2b16      	cmp	r3, #22
 800d6fe:	d11e      	bne.n	800d73e <__sflush_r+0xea>
 800d700:	602f      	str	r7, [r5, #0]
 800d702:	2000      	movs	r0, #0
 800d704:	e022      	b.n	800d74c <__sflush_r+0xf8>
 800d706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d70a:	b21b      	sxth	r3, r3
 800d70c:	e01b      	b.n	800d746 <__sflush_r+0xf2>
 800d70e:	690f      	ldr	r7, [r1, #16]
 800d710:	2f00      	cmp	r7, #0
 800d712:	d0f6      	beq.n	800d702 <__sflush_r+0xae>
 800d714:	0793      	lsls	r3, r2, #30
 800d716:	680e      	ldr	r6, [r1, #0]
 800d718:	bf08      	it	eq
 800d71a:	694b      	ldreq	r3, [r1, #20]
 800d71c:	600f      	str	r7, [r1, #0]
 800d71e:	bf18      	it	ne
 800d720:	2300      	movne	r3, #0
 800d722:	eba6 0807 	sub.w	r8, r6, r7
 800d726:	608b      	str	r3, [r1, #8]
 800d728:	f1b8 0f00 	cmp.w	r8, #0
 800d72c:	dde9      	ble.n	800d702 <__sflush_r+0xae>
 800d72e:	6a21      	ldr	r1, [r4, #32]
 800d730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d732:	4643      	mov	r3, r8
 800d734:	463a      	mov	r2, r7
 800d736:	4628      	mov	r0, r5
 800d738:	47b0      	blx	r6
 800d73a:	2800      	cmp	r0, #0
 800d73c:	dc08      	bgt.n	800d750 <__sflush_r+0xfc>
 800d73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d746:	81a3      	strh	r3, [r4, #12]
 800d748:	f04f 30ff 	mov.w	r0, #4294967295
 800d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d750:	4407      	add	r7, r0
 800d752:	eba8 0800 	sub.w	r8, r8, r0
 800d756:	e7e7      	b.n	800d728 <__sflush_r+0xd4>
 800d758:	20400001 	.word	0x20400001

0800d75c <_fflush_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	690b      	ldr	r3, [r1, #16]
 800d760:	4605      	mov	r5, r0
 800d762:	460c      	mov	r4, r1
 800d764:	b913      	cbnz	r3, 800d76c <_fflush_r+0x10>
 800d766:	2500      	movs	r5, #0
 800d768:	4628      	mov	r0, r5
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	b118      	cbz	r0, 800d776 <_fflush_r+0x1a>
 800d76e:	6a03      	ldr	r3, [r0, #32]
 800d770:	b90b      	cbnz	r3, 800d776 <_fflush_r+0x1a>
 800d772:	f000 f8a7 	bl	800d8c4 <__sinit>
 800d776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0f3      	beq.n	800d766 <_fflush_r+0xa>
 800d77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d780:	07d0      	lsls	r0, r2, #31
 800d782:	d404      	bmi.n	800d78e <_fflush_r+0x32>
 800d784:	0599      	lsls	r1, r3, #22
 800d786:	d402      	bmi.n	800d78e <_fflush_r+0x32>
 800d788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d78a:	f000 fb7e 	bl	800de8a <__retarget_lock_acquire_recursive>
 800d78e:	4628      	mov	r0, r5
 800d790:	4621      	mov	r1, r4
 800d792:	f7ff ff5f 	bl	800d654 <__sflush_r>
 800d796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d798:	07da      	lsls	r2, r3, #31
 800d79a:	4605      	mov	r5, r0
 800d79c:	d4e4      	bmi.n	800d768 <_fflush_r+0xc>
 800d79e:	89a3      	ldrh	r3, [r4, #12]
 800d7a0:	059b      	lsls	r3, r3, #22
 800d7a2:	d4e1      	bmi.n	800d768 <_fflush_r+0xc>
 800d7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7a6:	f000 fb71 	bl	800de8c <__retarget_lock_release_recursive>
 800d7aa:	e7dd      	b.n	800d768 <_fflush_r+0xc>

0800d7ac <std>:
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7ba:	6083      	str	r3, [r0, #8]
 800d7bc:	8181      	strh	r1, [r0, #12]
 800d7be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7c0:	81c2      	strh	r2, [r0, #14]
 800d7c2:	6183      	str	r3, [r0, #24]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	2208      	movs	r2, #8
 800d7c8:	305c      	adds	r0, #92	@ 0x5c
 800d7ca:	f000 fabb 	bl	800dd44 <memset>
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d804 <std+0x58>)
 800d7d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d808 <std+0x5c>)
 800d7d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d80c <std+0x60>)
 800d7d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7da:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <std+0x64>)
 800d7dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7de:	4b0d      	ldr	r3, [pc, #52]	@ (800d814 <std+0x68>)
 800d7e0:	6224      	str	r4, [r4, #32]
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d006      	beq.n	800d7f4 <std+0x48>
 800d7e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d7ea:	4294      	cmp	r4, r2
 800d7ec:	d002      	beq.n	800d7f4 <std+0x48>
 800d7ee:	33d0      	adds	r3, #208	@ 0xd0
 800d7f0:	429c      	cmp	r4, r3
 800d7f2:	d105      	bne.n	800d800 <std+0x54>
 800d7f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7fc:	f000 bb44 	b.w	800de88 <__retarget_lock_init_recursive>
 800d800:	bd10      	pop	{r4, pc}
 800d802:	bf00      	nop
 800d804:	0800db3d 	.word	0x0800db3d
 800d808:	0800db63 	.word	0x0800db63
 800d80c:	0800db9b 	.word	0x0800db9b
 800d810:	0800dbbf 	.word	0x0800dbbf
 800d814:	20003c8c 	.word	0x20003c8c

0800d818 <stdio_exit_handler>:
 800d818:	4a02      	ldr	r2, [pc, #8]	@ (800d824 <stdio_exit_handler+0xc>)
 800d81a:	4903      	ldr	r1, [pc, #12]	@ (800d828 <stdio_exit_handler+0x10>)
 800d81c:	4803      	ldr	r0, [pc, #12]	@ (800d82c <stdio_exit_handler+0x14>)
 800d81e:	f000 b87b 	b.w	800d918 <_fwalk_sglue>
 800d822:	bf00      	nop
 800d824:	20000024 	.word	0x20000024
 800d828:	0800d75d 	.word	0x0800d75d
 800d82c:	20000034 	.word	0x20000034

0800d830 <cleanup_stdio>:
 800d830:	6841      	ldr	r1, [r0, #4]
 800d832:	4b0c      	ldr	r3, [pc, #48]	@ (800d864 <cleanup_stdio+0x34>)
 800d834:	4299      	cmp	r1, r3
 800d836:	b510      	push	{r4, lr}
 800d838:	4604      	mov	r4, r0
 800d83a:	d001      	beq.n	800d840 <cleanup_stdio+0x10>
 800d83c:	f7ff ff8e 	bl	800d75c <_fflush_r>
 800d840:	68a1      	ldr	r1, [r4, #8]
 800d842:	4b09      	ldr	r3, [pc, #36]	@ (800d868 <cleanup_stdio+0x38>)
 800d844:	4299      	cmp	r1, r3
 800d846:	d002      	beq.n	800d84e <cleanup_stdio+0x1e>
 800d848:	4620      	mov	r0, r4
 800d84a:	f7ff ff87 	bl	800d75c <_fflush_r>
 800d84e:	68e1      	ldr	r1, [r4, #12]
 800d850:	4b06      	ldr	r3, [pc, #24]	@ (800d86c <cleanup_stdio+0x3c>)
 800d852:	4299      	cmp	r1, r3
 800d854:	d004      	beq.n	800d860 <cleanup_stdio+0x30>
 800d856:	4620      	mov	r0, r4
 800d858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d85c:	f7ff bf7e 	b.w	800d75c <_fflush_r>
 800d860:	bd10      	pop	{r4, pc}
 800d862:	bf00      	nop
 800d864:	20003c8c 	.word	0x20003c8c
 800d868:	20003cf4 	.word	0x20003cf4
 800d86c:	20003d5c 	.word	0x20003d5c

0800d870 <global_stdio_init.part.0>:
 800d870:	b510      	push	{r4, lr}
 800d872:	4b0b      	ldr	r3, [pc, #44]	@ (800d8a0 <global_stdio_init.part.0+0x30>)
 800d874:	4c0b      	ldr	r4, [pc, #44]	@ (800d8a4 <global_stdio_init.part.0+0x34>)
 800d876:	4a0c      	ldr	r2, [pc, #48]	@ (800d8a8 <global_stdio_init.part.0+0x38>)
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	4620      	mov	r0, r4
 800d87c:	2200      	movs	r2, #0
 800d87e:	2104      	movs	r1, #4
 800d880:	f7ff ff94 	bl	800d7ac <std>
 800d884:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d888:	2201      	movs	r2, #1
 800d88a:	2109      	movs	r1, #9
 800d88c:	f7ff ff8e 	bl	800d7ac <std>
 800d890:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d894:	2202      	movs	r2, #2
 800d896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d89a:	2112      	movs	r1, #18
 800d89c:	f7ff bf86 	b.w	800d7ac <std>
 800d8a0:	20003dc4 	.word	0x20003dc4
 800d8a4:	20003c8c 	.word	0x20003c8c
 800d8a8:	0800d819 	.word	0x0800d819

0800d8ac <__sfp_lock_acquire>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	@ (800d8b4 <__sfp_lock_acquire+0x8>)
 800d8ae:	f000 baec 	b.w	800de8a <__retarget_lock_acquire_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	20003dcd 	.word	0x20003dcd

0800d8b8 <__sfp_lock_release>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	@ (800d8c0 <__sfp_lock_release+0x8>)
 800d8ba:	f000 bae7 	b.w	800de8c <__retarget_lock_release_recursive>
 800d8be:	bf00      	nop
 800d8c0:	20003dcd 	.word	0x20003dcd

0800d8c4 <__sinit>:
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	f7ff fff0 	bl	800d8ac <__sfp_lock_acquire>
 800d8cc:	6a23      	ldr	r3, [r4, #32]
 800d8ce:	b11b      	cbz	r3, 800d8d8 <__sinit+0x14>
 800d8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d4:	f7ff bff0 	b.w	800d8b8 <__sfp_lock_release>
 800d8d8:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <__sinit+0x28>)
 800d8da:	6223      	str	r3, [r4, #32]
 800d8dc:	4b04      	ldr	r3, [pc, #16]	@ (800d8f0 <__sinit+0x2c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1f5      	bne.n	800d8d0 <__sinit+0xc>
 800d8e4:	f7ff ffc4 	bl	800d870 <global_stdio_init.part.0>
 800d8e8:	e7f2      	b.n	800d8d0 <__sinit+0xc>
 800d8ea:	bf00      	nop
 800d8ec:	0800d831 	.word	0x0800d831
 800d8f0:	20003dc4 	.word	0x20003dc4

0800d8f4 <fiprintf>:
 800d8f4:	b40e      	push	{r1, r2, r3}
 800d8f6:	b503      	push	{r0, r1, lr}
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	ab03      	add	r3, sp, #12
 800d8fc:	4805      	ldr	r0, [pc, #20]	@ (800d914 <fiprintf+0x20>)
 800d8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d902:	6800      	ldr	r0, [r0, #0]
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	f7ff fc01 	bl	800d10c <_vfiprintf_r>
 800d90a:	b002      	add	sp, #8
 800d90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d910:	b003      	add	sp, #12
 800d912:	4770      	bx	lr
 800d914:	20000030 	.word	0x20000030

0800d918 <_fwalk_sglue>:
 800d918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d91c:	4607      	mov	r7, r0
 800d91e:	4688      	mov	r8, r1
 800d920:	4614      	mov	r4, r2
 800d922:	2600      	movs	r6, #0
 800d924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d928:	f1b9 0901 	subs.w	r9, r9, #1
 800d92c:	d505      	bpl.n	800d93a <_fwalk_sglue+0x22>
 800d92e:	6824      	ldr	r4, [r4, #0]
 800d930:	2c00      	cmp	r4, #0
 800d932:	d1f7      	bne.n	800d924 <_fwalk_sglue+0xc>
 800d934:	4630      	mov	r0, r6
 800d936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d93a:	89ab      	ldrh	r3, [r5, #12]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d907      	bls.n	800d950 <_fwalk_sglue+0x38>
 800d940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d944:	3301      	adds	r3, #1
 800d946:	d003      	beq.n	800d950 <_fwalk_sglue+0x38>
 800d948:	4629      	mov	r1, r5
 800d94a:	4638      	mov	r0, r7
 800d94c:	47c0      	blx	r8
 800d94e:	4306      	orrs	r6, r0
 800d950:	3568      	adds	r5, #104	@ 0x68
 800d952:	e7e9      	b.n	800d928 <_fwalk_sglue+0x10>

0800d954 <iprintf>:
 800d954:	b40f      	push	{r0, r1, r2, r3}
 800d956:	b507      	push	{r0, r1, r2, lr}
 800d958:	4906      	ldr	r1, [pc, #24]	@ (800d974 <iprintf+0x20>)
 800d95a:	ab04      	add	r3, sp, #16
 800d95c:	6808      	ldr	r0, [r1, #0]
 800d95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d962:	6881      	ldr	r1, [r0, #8]
 800d964:	9301      	str	r3, [sp, #4]
 800d966:	f7ff fbd1 	bl	800d10c <_vfiprintf_r>
 800d96a:	b003      	add	sp, #12
 800d96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d970:	b004      	add	sp, #16
 800d972:	4770      	bx	lr
 800d974:	20000030 	.word	0x20000030

0800d978 <_puts_r>:
 800d978:	6a03      	ldr	r3, [r0, #32]
 800d97a:	b570      	push	{r4, r5, r6, lr}
 800d97c:	6884      	ldr	r4, [r0, #8]
 800d97e:	4605      	mov	r5, r0
 800d980:	460e      	mov	r6, r1
 800d982:	b90b      	cbnz	r3, 800d988 <_puts_r+0x10>
 800d984:	f7ff ff9e 	bl	800d8c4 <__sinit>
 800d988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d98a:	07db      	lsls	r3, r3, #31
 800d98c:	d405      	bmi.n	800d99a <_puts_r+0x22>
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	0598      	lsls	r0, r3, #22
 800d992:	d402      	bmi.n	800d99a <_puts_r+0x22>
 800d994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d996:	f000 fa78 	bl	800de8a <__retarget_lock_acquire_recursive>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	0719      	lsls	r1, r3, #28
 800d99e:	d502      	bpl.n	800d9a6 <_puts_r+0x2e>
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d135      	bne.n	800da12 <_puts_r+0x9a>
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	f000 f94b 	bl	800dc44 <__swsetup_r>
 800d9ae:	b380      	cbz	r0, 800da12 <_puts_r+0x9a>
 800d9b0:	f04f 35ff 	mov.w	r5, #4294967295
 800d9b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9b6:	07da      	lsls	r2, r3, #31
 800d9b8:	d405      	bmi.n	800d9c6 <_puts_r+0x4e>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	059b      	lsls	r3, r3, #22
 800d9be:	d402      	bmi.n	800d9c6 <_puts_r+0x4e>
 800d9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9c2:	f000 fa63 	bl	800de8c <__retarget_lock_release_recursive>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	da04      	bge.n	800d9d8 <_puts_r+0x60>
 800d9ce:	69a2      	ldr	r2, [r4, #24]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	dc17      	bgt.n	800da04 <_puts_r+0x8c>
 800d9d4:	290a      	cmp	r1, #10
 800d9d6:	d015      	beq.n	800da04 <_puts_r+0x8c>
 800d9d8:	6823      	ldr	r3, [r4, #0]
 800d9da:	1c5a      	adds	r2, r3, #1
 800d9dc:	6022      	str	r2, [r4, #0]
 800d9de:	7019      	strb	r1, [r3, #0]
 800d9e0:	68a3      	ldr	r3, [r4, #8]
 800d9e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	60a3      	str	r3, [r4, #8]
 800d9ea:	2900      	cmp	r1, #0
 800d9ec:	d1ed      	bne.n	800d9ca <_puts_r+0x52>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	da11      	bge.n	800da16 <_puts_r+0x9e>
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	210a      	movs	r1, #10
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f000 f8e5 	bl	800dbc6 <__swbuf_r>
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	d0d7      	beq.n	800d9b0 <_puts_r+0x38>
 800da00:	250a      	movs	r5, #10
 800da02:	e7d7      	b.n	800d9b4 <_puts_r+0x3c>
 800da04:	4622      	mov	r2, r4
 800da06:	4628      	mov	r0, r5
 800da08:	f000 f8dd 	bl	800dbc6 <__swbuf_r>
 800da0c:	3001      	adds	r0, #1
 800da0e:	d1e7      	bne.n	800d9e0 <_puts_r+0x68>
 800da10:	e7ce      	b.n	800d9b0 <_puts_r+0x38>
 800da12:	3e01      	subs	r6, #1
 800da14:	e7e4      	b.n	800d9e0 <_puts_r+0x68>
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	1c5a      	adds	r2, r3, #1
 800da1a:	6022      	str	r2, [r4, #0]
 800da1c:	220a      	movs	r2, #10
 800da1e:	701a      	strb	r2, [r3, #0]
 800da20:	e7ee      	b.n	800da00 <_puts_r+0x88>
	...

0800da24 <puts>:
 800da24:	4b02      	ldr	r3, [pc, #8]	@ (800da30 <puts+0xc>)
 800da26:	4601      	mov	r1, r0
 800da28:	6818      	ldr	r0, [r3, #0]
 800da2a:	f7ff bfa5 	b.w	800d978 <_puts_r>
 800da2e:	bf00      	nop
 800da30:	20000030 	.word	0x20000030

0800da34 <sniprintf>:
 800da34:	b40c      	push	{r2, r3}
 800da36:	b530      	push	{r4, r5, lr}
 800da38:	4b18      	ldr	r3, [pc, #96]	@ (800da9c <sniprintf+0x68>)
 800da3a:	1e0c      	subs	r4, r1, #0
 800da3c:	681d      	ldr	r5, [r3, #0]
 800da3e:	b09d      	sub	sp, #116	@ 0x74
 800da40:	da08      	bge.n	800da54 <sniprintf+0x20>
 800da42:	238b      	movs	r3, #139	@ 0x8b
 800da44:	602b      	str	r3, [r5, #0]
 800da46:	f04f 30ff 	mov.w	r0, #4294967295
 800da4a:	b01d      	add	sp, #116	@ 0x74
 800da4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da50:	b002      	add	sp, #8
 800da52:	4770      	bx	lr
 800da54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da5c:	f04f 0300 	mov.w	r3, #0
 800da60:	931b      	str	r3, [sp, #108]	@ 0x6c
 800da62:	bf14      	ite	ne
 800da64:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da68:	4623      	moveq	r3, r4
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	9307      	str	r3, [sp, #28]
 800da6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da72:	9002      	str	r0, [sp, #8]
 800da74:	9006      	str	r0, [sp, #24]
 800da76:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da7c:	ab21      	add	r3, sp, #132	@ 0x84
 800da7e:	a902      	add	r1, sp, #8
 800da80:	4628      	mov	r0, r5
 800da82:	9301      	str	r3, [sp, #4]
 800da84:	f001 fcbe 	bl	800f404 <_svfiprintf_r>
 800da88:	1c43      	adds	r3, r0, #1
 800da8a:	bfbc      	itt	lt
 800da8c:	238b      	movlt	r3, #139	@ 0x8b
 800da8e:	602b      	strlt	r3, [r5, #0]
 800da90:	2c00      	cmp	r4, #0
 800da92:	d0da      	beq.n	800da4a <sniprintf+0x16>
 800da94:	9b02      	ldr	r3, [sp, #8]
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	e7d6      	b.n	800da4a <sniprintf+0x16>
 800da9c:	20000030 	.word	0x20000030

0800daa0 <siprintf>:
 800daa0:	b40e      	push	{r1, r2, r3}
 800daa2:	b510      	push	{r4, lr}
 800daa4:	b09d      	sub	sp, #116	@ 0x74
 800daa6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800daa8:	9002      	str	r0, [sp, #8]
 800daaa:	9006      	str	r0, [sp, #24]
 800daac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dab0:	480a      	ldr	r0, [pc, #40]	@ (800dadc <siprintf+0x3c>)
 800dab2:	9107      	str	r1, [sp, #28]
 800dab4:	9104      	str	r1, [sp, #16]
 800dab6:	490a      	ldr	r1, [pc, #40]	@ (800dae0 <siprintf+0x40>)
 800dab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dabc:	9105      	str	r1, [sp, #20]
 800dabe:	2400      	movs	r4, #0
 800dac0:	a902      	add	r1, sp, #8
 800dac2:	6800      	ldr	r0, [r0, #0]
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800dac8:	f001 fc9c 	bl	800f404 <_svfiprintf_r>
 800dacc:	9b02      	ldr	r3, [sp, #8]
 800dace:	701c      	strb	r4, [r3, #0]
 800dad0:	b01d      	add	sp, #116	@ 0x74
 800dad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dad6:	b003      	add	sp, #12
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	20000030 	.word	0x20000030
 800dae0:	ffff0208 	.word	0xffff0208

0800dae4 <siscanf>:
 800dae4:	b40e      	push	{r1, r2, r3}
 800dae6:	b570      	push	{r4, r5, r6, lr}
 800dae8:	b09d      	sub	sp, #116	@ 0x74
 800daea:	ac21      	add	r4, sp, #132	@ 0x84
 800daec:	2500      	movs	r5, #0
 800daee:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800daf2:	f854 6b04 	ldr.w	r6, [r4], #4
 800daf6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800dafa:	951b      	str	r5, [sp, #108]	@ 0x6c
 800dafc:	9002      	str	r0, [sp, #8]
 800dafe:	9006      	str	r0, [sp, #24]
 800db00:	f7f2 fbb6 	bl	8000270 <strlen>
 800db04:	4b0b      	ldr	r3, [pc, #44]	@ (800db34 <siscanf+0x50>)
 800db06:	9003      	str	r0, [sp, #12]
 800db08:	9007      	str	r0, [sp, #28]
 800db0a:	480b      	ldr	r0, [pc, #44]	@ (800db38 <siscanf+0x54>)
 800db0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db12:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db16:	4632      	mov	r2, r6
 800db18:	4623      	mov	r3, r4
 800db1a:	a902      	add	r1, sp, #8
 800db1c:	6800      	ldr	r0, [r0, #0]
 800db1e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800db20:	9514      	str	r5, [sp, #80]	@ 0x50
 800db22:	9401      	str	r4, [sp, #4]
 800db24:	f001 fdc4 	bl	800f6b0 <__ssvfiscanf_r>
 800db28:	b01d      	add	sp, #116	@ 0x74
 800db2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db2e:	b003      	add	sp, #12
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	0800db5f 	.word	0x0800db5f
 800db38:	20000030 	.word	0x20000030

0800db3c <__sread>:
 800db3c:	b510      	push	{r4, lr}
 800db3e:	460c      	mov	r4, r1
 800db40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db44:	f000 f942 	bl	800ddcc <_read_r>
 800db48:	2800      	cmp	r0, #0
 800db4a:	bfab      	itete	ge
 800db4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db4e:	89a3      	ldrhlt	r3, [r4, #12]
 800db50:	181b      	addge	r3, r3, r0
 800db52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db56:	bfac      	ite	ge
 800db58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db5a:	81a3      	strhlt	r3, [r4, #12]
 800db5c:	bd10      	pop	{r4, pc}

0800db5e <__seofread>:
 800db5e:	2000      	movs	r0, #0
 800db60:	4770      	bx	lr

0800db62 <__swrite>:
 800db62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db66:	461f      	mov	r7, r3
 800db68:	898b      	ldrh	r3, [r1, #12]
 800db6a:	05db      	lsls	r3, r3, #23
 800db6c:	4605      	mov	r5, r0
 800db6e:	460c      	mov	r4, r1
 800db70:	4616      	mov	r6, r2
 800db72:	d505      	bpl.n	800db80 <__swrite+0x1e>
 800db74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db78:	2302      	movs	r3, #2
 800db7a:	2200      	movs	r2, #0
 800db7c:	f000 f914 	bl	800dda8 <_lseek_r>
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	4632      	mov	r2, r6
 800db8e:	463b      	mov	r3, r7
 800db90:	4628      	mov	r0, r5
 800db92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db96:	f000 b93b 	b.w	800de10 <_write_r>

0800db9a <__sseek>:
 800db9a:	b510      	push	{r4, lr}
 800db9c:	460c      	mov	r4, r1
 800db9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba2:	f000 f901 	bl	800dda8 <_lseek_r>
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	bf15      	itete	ne
 800dbac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbb6:	81a3      	strheq	r3, [r4, #12]
 800dbb8:	bf18      	it	ne
 800dbba:	81a3      	strhne	r3, [r4, #12]
 800dbbc:	bd10      	pop	{r4, pc}

0800dbbe <__sclose>:
 800dbbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc2:	f000 b8e1 	b.w	800dd88 <_close_r>

0800dbc6 <__swbuf_r>:
 800dbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc8:	460e      	mov	r6, r1
 800dbca:	4614      	mov	r4, r2
 800dbcc:	4605      	mov	r5, r0
 800dbce:	b118      	cbz	r0, 800dbd8 <__swbuf_r+0x12>
 800dbd0:	6a03      	ldr	r3, [r0, #32]
 800dbd2:	b90b      	cbnz	r3, 800dbd8 <__swbuf_r+0x12>
 800dbd4:	f7ff fe76 	bl	800d8c4 <__sinit>
 800dbd8:	69a3      	ldr	r3, [r4, #24]
 800dbda:	60a3      	str	r3, [r4, #8]
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	071a      	lsls	r2, r3, #28
 800dbe0:	d501      	bpl.n	800dbe6 <__swbuf_r+0x20>
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	b943      	cbnz	r3, 800dbf8 <__swbuf_r+0x32>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f000 f82b 	bl	800dc44 <__swsetup_r>
 800dbee:	b118      	cbz	r0, 800dbf8 <__swbuf_r+0x32>
 800dbf0:	f04f 37ff 	mov.w	r7, #4294967295
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	6922      	ldr	r2, [r4, #16]
 800dbfc:	1a98      	subs	r0, r3, r2
 800dbfe:	6963      	ldr	r3, [r4, #20]
 800dc00:	b2f6      	uxtb	r6, r6
 800dc02:	4283      	cmp	r3, r0
 800dc04:	4637      	mov	r7, r6
 800dc06:	dc05      	bgt.n	800dc14 <__swbuf_r+0x4e>
 800dc08:	4621      	mov	r1, r4
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f7ff fda6 	bl	800d75c <_fflush_r>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1ed      	bne.n	800dbf0 <__swbuf_r+0x2a>
 800dc14:	68a3      	ldr	r3, [r4, #8]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	60a3      	str	r3, [r4, #8]
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	6022      	str	r2, [r4, #0]
 800dc20:	701e      	strb	r6, [r3, #0]
 800dc22:	6962      	ldr	r2, [r4, #20]
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d004      	beq.n	800dc34 <__swbuf_r+0x6e>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	07db      	lsls	r3, r3, #31
 800dc2e:	d5e1      	bpl.n	800dbf4 <__swbuf_r+0x2e>
 800dc30:	2e0a      	cmp	r6, #10
 800dc32:	d1df      	bne.n	800dbf4 <__swbuf_r+0x2e>
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f7ff fd90 	bl	800d75c <_fflush_r>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0d9      	beq.n	800dbf4 <__swbuf_r+0x2e>
 800dc40:	e7d6      	b.n	800dbf0 <__swbuf_r+0x2a>
	...

0800dc44 <__swsetup_r>:
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4b29      	ldr	r3, [pc, #164]	@ (800dcec <__swsetup_r+0xa8>)
 800dc48:	4605      	mov	r5, r0
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	b118      	cbz	r0, 800dc58 <__swsetup_r+0x14>
 800dc50:	6a03      	ldr	r3, [r0, #32]
 800dc52:	b90b      	cbnz	r3, 800dc58 <__swsetup_r+0x14>
 800dc54:	f7ff fe36 	bl	800d8c4 <__sinit>
 800dc58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5c:	0719      	lsls	r1, r3, #28
 800dc5e:	d422      	bmi.n	800dca6 <__swsetup_r+0x62>
 800dc60:	06da      	lsls	r2, r3, #27
 800dc62:	d407      	bmi.n	800dc74 <__swsetup_r+0x30>
 800dc64:	2209      	movs	r2, #9
 800dc66:	602a      	str	r2, [r5, #0]
 800dc68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc72:	e033      	b.n	800dcdc <__swsetup_r+0x98>
 800dc74:	0758      	lsls	r0, r3, #29
 800dc76:	d512      	bpl.n	800dc9e <__swsetup_r+0x5a>
 800dc78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc7a:	b141      	cbz	r1, 800dc8e <__swsetup_r+0x4a>
 800dc7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc80:	4299      	cmp	r1, r3
 800dc82:	d002      	beq.n	800dc8a <__swsetup_r+0x46>
 800dc84:	4628      	mov	r0, r5
 800dc86:	f000 ff6f 	bl	800eb68 <_free_r>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc8e:	89a3      	ldrh	r3, [r4, #12]
 800dc90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc94:	81a3      	strh	r3, [r4, #12]
 800dc96:	2300      	movs	r3, #0
 800dc98:	6063      	str	r3, [r4, #4]
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	f043 0308 	orr.w	r3, r3, #8
 800dca4:	81a3      	strh	r3, [r4, #12]
 800dca6:	6923      	ldr	r3, [r4, #16]
 800dca8:	b94b      	cbnz	r3, 800dcbe <__swsetup_r+0x7a>
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcb4:	d003      	beq.n	800dcbe <__swsetup_r+0x7a>
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f001 ffe3 	bl	800fc84 <__smakebuf_r>
 800dcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcc2:	f013 0201 	ands.w	r2, r3, #1
 800dcc6:	d00a      	beq.n	800dcde <__swsetup_r+0x9a>
 800dcc8:	2200      	movs	r2, #0
 800dcca:	60a2      	str	r2, [r4, #8]
 800dccc:	6962      	ldr	r2, [r4, #20]
 800dcce:	4252      	negs	r2, r2
 800dcd0:	61a2      	str	r2, [r4, #24]
 800dcd2:	6922      	ldr	r2, [r4, #16]
 800dcd4:	b942      	cbnz	r2, 800dce8 <__swsetup_r+0xa4>
 800dcd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dcda:	d1c5      	bne.n	800dc68 <__swsetup_r+0x24>
 800dcdc:	bd38      	pop	{r3, r4, r5, pc}
 800dcde:	0799      	lsls	r1, r3, #30
 800dce0:	bf58      	it	pl
 800dce2:	6962      	ldrpl	r2, [r4, #20]
 800dce4:	60a2      	str	r2, [r4, #8]
 800dce6:	e7f4      	b.n	800dcd2 <__swsetup_r+0x8e>
 800dce8:	2000      	movs	r0, #0
 800dcea:	e7f7      	b.n	800dcdc <__swsetup_r+0x98>
 800dcec:	20000030 	.word	0x20000030

0800dcf0 <memcmp>:
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	3901      	subs	r1, #1
 800dcf4:	4402      	add	r2, r0
 800dcf6:	4290      	cmp	r0, r2
 800dcf8:	d101      	bne.n	800dcfe <memcmp+0xe>
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	e005      	b.n	800dd0a <memcmp+0x1a>
 800dcfe:	7803      	ldrb	r3, [r0, #0]
 800dd00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dd04:	42a3      	cmp	r3, r4
 800dd06:	d001      	beq.n	800dd0c <memcmp+0x1c>
 800dd08:	1b18      	subs	r0, r3, r4
 800dd0a:	bd10      	pop	{r4, pc}
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	e7f2      	b.n	800dcf6 <memcmp+0x6>

0800dd10 <memmove>:
 800dd10:	4288      	cmp	r0, r1
 800dd12:	b510      	push	{r4, lr}
 800dd14:	eb01 0402 	add.w	r4, r1, r2
 800dd18:	d902      	bls.n	800dd20 <memmove+0x10>
 800dd1a:	4284      	cmp	r4, r0
 800dd1c:	4623      	mov	r3, r4
 800dd1e:	d807      	bhi.n	800dd30 <memmove+0x20>
 800dd20:	1e43      	subs	r3, r0, #1
 800dd22:	42a1      	cmp	r1, r4
 800dd24:	d008      	beq.n	800dd38 <memmove+0x28>
 800dd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd2e:	e7f8      	b.n	800dd22 <memmove+0x12>
 800dd30:	4402      	add	r2, r0
 800dd32:	4601      	mov	r1, r0
 800dd34:	428a      	cmp	r2, r1
 800dd36:	d100      	bne.n	800dd3a <memmove+0x2a>
 800dd38:	bd10      	pop	{r4, pc}
 800dd3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd42:	e7f7      	b.n	800dd34 <memmove+0x24>

0800dd44 <memset>:
 800dd44:	4402      	add	r2, r0
 800dd46:	4603      	mov	r3, r0
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d100      	bne.n	800dd4e <memset+0xa>
 800dd4c:	4770      	bx	lr
 800dd4e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd52:	e7f9      	b.n	800dd48 <memset+0x4>

0800dd54 <strstr>:
 800dd54:	780a      	ldrb	r2, [r1, #0]
 800dd56:	b570      	push	{r4, r5, r6, lr}
 800dd58:	b96a      	cbnz	r2, 800dd76 <strstr+0x22>
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d109      	bne.n	800dd74 <strstr+0x20>
 800dd60:	460c      	mov	r4, r1
 800dd62:	4605      	mov	r5, r0
 800dd64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d0f6      	beq.n	800dd5a <strstr+0x6>
 800dd6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dd70:	429e      	cmp	r6, r3
 800dd72:	d0f7      	beq.n	800dd64 <strstr+0x10>
 800dd74:	3001      	adds	r0, #1
 800dd76:	7803      	ldrb	r3, [r0, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d1ef      	bne.n	800dd5c <strstr+0x8>
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	e7ec      	b.n	800dd5a <strstr+0x6>

0800dd80 <_localeconv_r>:
 800dd80:	4800      	ldr	r0, [pc, #0]	@ (800dd84 <_localeconv_r+0x4>)
 800dd82:	4770      	bx	lr
 800dd84:	20000170 	.word	0x20000170

0800dd88 <_close_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4d06      	ldr	r5, [pc, #24]	@ (800dda4 <_close_r+0x1c>)
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4604      	mov	r4, r0
 800dd90:	4608      	mov	r0, r1
 800dd92:	602b      	str	r3, [r5, #0]
 800dd94:	f7f5 fb84 	bl	80034a0 <_close>
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	d102      	bne.n	800dda2 <_close_r+0x1a>
 800dd9c:	682b      	ldr	r3, [r5, #0]
 800dd9e:	b103      	cbz	r3, 800dda2 <_close_r+0x1a>
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	bd38      	pop	{r3, r4, r5, pc}
 800dda4:	20003dc8 	.word	0x20003dc8

0800dda8 <_lseek_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d07      	ldr	r5, [pc, #28]	@ (800ddc8 <_lseek_r+0x20>)
 800ddac:	4604      	mov	r4, r0
 800ddae:	4608      	mov	r0, r1
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	602a      	str	r2, [r5, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f7f5 fb99 	bl	80034ee <_lseek>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_lseek_r+0x1e>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_lseek_r+0x1e>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20003dc8 	.word	0x20003dc8

0800ddcc <_read_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4d07      	ldr	r5, [pc, #28]	@ (800ddec <_read_r+0x20>)
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	4608      	mov	r0, r1
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	602a      	str	r2, [r5, #0]
 800ddda:	461a      	mov	r2, r3
 800dddc:	f7f5 fb43 	bl	8003466 <_read>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	d102      	bne.n	800ddea <_read_r+0x1e>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	b103      	cbz	r3, 800ddea <_read_r+0x1e>
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	20003dc8 	.word	0x20003dc8

0800ddf0 <_sbrk_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d06      	ldr	r5, [pc, #24]	@ (800de0c <_sbrk_r+0x1c>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	602b      	str	r3, [r5, #0]
 800ddfc:	f7f5 fb84 	bl	8003508 <_sbrk>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_sbrk_r+0x1a>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_sbrk_r+0x1a>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20003dc8 	.word	0x20003dc8

0800de10 <_write_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d07      	ldr	r5, [pc, #28]	@ (800de30 <_write_r+0x20>)
 800de14:	4604      	mov	r4, r0
 800de16:	4608      	mov	r0, r1
 800de18:	4611      	mov	r1, r2
 800de1a:	2200      	movs	r2, #0
 800de1c:	602a      	str	r2, [r5, #0]
 800de1e:	461a      	mov	r2, r3
 800de20:	f7f3 fb22 	bl	8001468 <_write>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_write_r+0x1e>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_write_r+0x1e>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	20003dc8 	.word	0x20003dc8

0800de34 <__errno>:
 800de34:	4b01      	ldr	r3, [pc, #4]	@ (800de3c <__errno+0x8>)
 800de36:	6818      	ldr	r0, [r3, #0]
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	20000030 	.word	0x20000030

0800de40 <__libc_init_array>:
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	4d0d      	ldr	r5, [pc, #52]	@ (800de78 <__libc_init_array+0x38>)
 800de44:	4c0d      	ldr	r4, [pc, #52]	@ (800de7c <__libc_init_array+0x3c>)
 800de46:	1b64      	subs	r4, r4, r5
 800de48:	10a4      	asrs	r4, r4, #2
 800de4a:	2600      	movs	r6, #0
 800de4c:	42a6      	cmp	r6, r4
 800de4e:	d109      	bne.n	800de64 <__libc_init_array+0x24>
 800de50:	4d0b      	ldr	r5, [pc, #44]	@ (800de80 <__libc_init_array+0x40>)
 800de52:	4c0c      	ldr	r4, [pc, #48]	@ (800de84 <__libc_init_array+0x44>)
 800de54:	f002 f8d8 	bl	8010008 <_init>
 800de58:	1b64      	subs	r4, r4, r5
 800de5a:	10a4      	asrs	r4, r4, #2
 800de5c:	2600      	movs	r6, #0
 800de5e:	42a6      	cmp	r6, r4
 800de60:	d105      	bne.n	800de6e <__libc_init_array+0x2e>
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	f855 3b04 	ldr.w	r3, [r5], #4
 800de68:	4798      	blx	r3
 800de6a:	3601      	adds	r6, #1
 800de6c:	e7ee      	b.n	800de4c <__libc_init_array+0xc>
 800de6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de72:	4798      	blx	r3
 800de74:	3601      	adds	r6, #1
 800de76:	e7f2      	b.n	800de5e <__libc_init_array+0x1e>
 800de78:	08010e68 	.word	0x08010e68
 800de7c:	08010e68 	.word	0x08010e68
 800de80:	08010e68 	.word	0x08010e68
 800de84:	08010e6c 	.word	0x08010e6c

0800de88 <__retarget_lock_init_recursive>:
 800de88:	4770      	bx	lr

0800de8a <__retarget_lock_acquire_recursive>:
 800de8a:	4770      	bx	lr

0800de8c <__retarget_lock_release_recursive>:
 800de8c:	4770      	bx	lr

0800de8e <memcpy>:
 800de8e:	440a      	add	r2, r1
 800de90:	4291      	cmp	r1, r2
 800de92:	f100 33ff 	add.w	r3, r0, #4294967295
 800de96:	d100      	bne.n	800de9a <memcpy+0xc>
 800de98:	4770      	bx	lr
 800de9a:	b510      	push	{r4, lr}
 800de9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dea4:	4291      	cmp	r1, r2
 800dea6:	d1f9      	bne.n	800de9c <memcpy+0xe>
 800dea8:	bd10      	pop	{r4, pc}

0800deaa <abort>:
 800deaa:	b508      	push	{r3, lr}
 800deac:	2006      	movs	r0, #6
 800deae:	f001 ffc1 	bl	800fe34 <raise>
 800deb2:	2001      	movs	r0, #1
 800deb4:	f7f5 facc 	bl	8003450 <_exit>

0800deb8 <quorem>:
 800deb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	6903      	ldr	r3, [r0, #16]
 800debe:	690c      	ldr	r4, [r1, #16]
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	4607      	mov	r7, r0
 800dec4:	db7e      	blt.n	800dfc4 <quorem+0x10c>
 800dec6:	3c01      	subs	r4, #1
 800dec8:	f101 0814 	add.w	r8, r1, #20
 800decc:	00a3      	lsls	r3, r4, #2
 800dece:	f100 0514 	add.w	r5, r0, #20
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dee2:	3301      	adds	r3, #1
 800dee4:	429a      	cmp	r2, r3
 800dee6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800deea:	fbb2 f6f3 	udiv	r6, r2, r3
 800deee:	d32e      	bcc.n	800df4e <quorem+0x96>
 800def0:	f04f 0a00 	mov.w	sl, #0
 800def4:	46c4      	mov	ip, r8
 800def6:	46ae      	mov	lr, r5
 800def8:	46d3      	mov	fp, sl
 800defa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800defe:	b298      	uxth	r0, r3
 800df00:	fb06 a000 	mla	r0, r6, r0, sl
 800df04:	0c02      	lsrs	r2, r0, #16
 800df06:	0c1b      	lsrs	r3, r3, #16
 800df08:	fb06 2303 	mla	r3, r6, r3, r2
 800df0c:	f8de 2000 	ldr.w	r2, [lr]
 800df10:	b280      	uxth	r0, r0
 800df12:	b292      	uxth	r2, r2
 800df14:	1a12      	subs	r2, r2, r0
 800df16:	445a      	add	r2, fp
 800df18:	f8de 0000 	ldr.w	r0, [lr]
 800df1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df20:	b29b      	uxth	r3, r3
 800df22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df2a:	b292      	uxth	r2, r2
 800df2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df30:	45e1      	cmp	r9, ip
 800df32:	f84e 2b04 	str.w	r2, [lr], #4
 800df36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df3a:	d2de      	bcs.n	800defa <quorem+0x42>
 800df3c:	9b00      	ldr	r3, [sp, #0]
 800df3e:	58eb      	ldr	r3, [r5, r3]
 800df40:	b92b      	cbnz	r3, 800df4e <quorem+0x96>
 800df42:	9b01      	ldr	r3, [sp, #4]
 800df44:	3b04      	subs	r3, #4
 800df46:	429d      	cmp	r5, r3
 800df48:	461a      	mov	r2, r3
 800df4a:	d32f      	bcc.n	800dfac <quorem+0xf4>
 800df4c:	613c      	str	r4, [r7, #16]
 800df4e:	4638      	mov	r0, r7
 800df50:	f001 f8c6 	bl	800f0e0 <__mcmp>
 800df54:	2800      	cmp	r0, #0
 800df56:	db25      	blt.n	800dfa4 <quorem+0xec>
 800df58:	4629      	mov	r1, r5
 800df5a:	2000      	movs	r0, #0
 800df5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800df60:	f8d1 c000 	ldr.w	ip, [r1]
 800df64:	fa1f fe82 	uxth.w	lr, r2
 800df68:	fa1f f38c 	uxth.w	r3, ip
 800df6c:	eba3 030e 	sub.w	r3, r3, lr
 800df70:	4403      	add	r3, r0
 800df72:	0c12      	lsrs	r2, r2, #16
 800df74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df82:	45c1      	cmp	r9, r8
 800df84:	f841 3b04 	str.w	r3, [r1], #4
 800df88:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df8c:	d2e6      	bcs.n	800df5c <quorem+0xa4>
 800df8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df96:	b922      	cbnz	r2, 800dfa2 <quorem+0xea>
 800df98:	3b04      	subs	r3, #4
 800df9a:	429d      	cmp	r5, r3
 800df9c:	461a      	mov	r2, r3
 800df9e:	d30b      	bcc.n	800dfb8 <quorem+0x100>
 800dfa0:	613c      	str	r4, [r7, #16]
 800dfa2:	3601      	adds	r6, #1
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	6812      	ldr	r2, [r2, #0]
 800dfae:	3b04      	subs	r3, #4
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	d1cb      	bne.n	800df4c <quorem+0x94>
 800dfb4:	3c01      	subs	r4, #1
 800dfb6:	e7c6      	b.n	800df46 <quorem+0x8e>
 800dfb8:	6812      	ldr	r2, [r2, #0]
 800dfba:	3b04      	subs	r3, #4
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	d1ef      	bne.n	800dfa0 <quorem+0xe8>
 800dfc0:	3c01      	subs	r4, #1
 800dfc2:	e7ea      	b.n	800df9a <quorem+0xe2>
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	e7ee      	b.n	800dfa6 <quorem+0xee>

0800dfc8 <_dtoa_r>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	69c7      	ldr	r7, [r0, #28]
 800dfce:	b097      	sub	sp, #92	@ 0x5c
 800dfd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dfd4:	ec55 4b10 	vmov	r4, r5, d0
 800dfd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dfda:	9107      	str	r1, [sp, #28]
 800dfdc:	4681      	mov	r9, r0
 800dfde:	920c      	str	r2, [sp, #48]	@ 0x30
 800dfe0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfe2:	b97f      	cbnz	r7, 800e004 <_dtoa_r+0x3c>
 800dfe4:	2010      	movs	r0, #16
 800dfe6:	f7fe fc6b 	bl	800c8c0 <malloc>
 800dfea:	4602      	mov	r2, r0
 800dfec:	f8c9 001c 	str.w	r0, [r9, #28]
 800dff0:	b920      	cbnz	r0, 800dffc <_dtoa_r+0x34>
 800dff2:	4ba9      	ldr	r3, [pc, #676]	@ (800e298 <_dtoa_r+0x2d0>)
 800dff4:	21ef      	movs	r1, #239	@ 0xef
 800dff6:	48a9      	ldr	r0, [pc, #676]	@ (800e29c <_dtoa_r+0x2d4>)
 800dff8:	f7fe fc44 	bl	800c884 <__assert_func>
 800dffc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e000:	6007      	str	r7, [r0, #0]
 800e002:	60c7      	str	r7, [r0, #12]
 800e004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e008:	6819      	ldr	r1, [r3, #0]
 800e00a:	b159      	cbz	r1, 800e024 <_dtoa_r+0x5c>
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	604a      	str	r2, [r1, #4]
 800e010:	2301      	movs	r3, #1
 800e012:	4093      	lsls	r3, r2
 800e014:	608b      	str	r3, [r1, #8]
 800e016:	4648      	mov	r0, r9
 800e018:	f000 fe30 	bl	800ec7c <_Bfree>
 800e01c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	1e2b      	subs	r3, r5, #0
 800e026:	bfb9      	ittee	lt
 800e028:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e02c:	9305      	strlt	r3, [sp, #20]
 800e02e:	2300      	movge	r3, #0
 800e030:	6033      	strge	r3, [r6, #0]
 800e032:	9f05      	ldr	r7, [sp, #20]
 800e034:	4b9a      	ldr	r3, [pc, #616]	@ (800e2a0 <_dtoa_r+0x2d8>)
 800e036:	bfbc      	itt	lt
 800e038:	2201      	movlt	r2, #1
 800e03a:	6032      	strlt	r2, [r6, #0]
 800e03c:	43bb      	bics	r3, r7
 800e03e:	d112      	bne.n	800e066 <_dtoa_r+0x9e>
 800e040:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e042:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e04c:	4323      	orrs	r3, r4
 800e04e:	f000 855a 	beq.w	800eb06 <_dtoa_r+0xb3e>
 800e052:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e054:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e2b4 <_dtoa_r+0x2ec>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 855c 	beq.w	800eb16 <_dtoa_r+0xb4e>
 800e05e:	f10a 0303 	add.w	r3, sl, #3
 800e062:	f000 bd56 	b.w	800eb12 <_dtoa_r+0xb4a>
 800e066:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e06a:	2200      	movs	r2, #0
 800e06c:	ec51 0b17 	vmov	r0, r1, d7
 800e070:	2300      	movs	r3, #0
 800e072:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e076:	f7f2 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800e07a:	4680      	mov	r8, r0
 800e07c:	b158      	cbz	r0, 800e096 <_dtoa_r+0xce>
 800e07e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e080:	2301      	movs	r3, #1
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e086:	b113      	cbz	r3, 800e08e <_dtoa_r+0xc6>
 800e088:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e08a:	4b86      	ldr	r3, [pc, #536]	@ (800e2a4 <_dtoa_r+0x2dc>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e2b8 <_dtoa_r+0x2f0>
 800e092:	f000 bd40 	b.w	800eb16 <_dtoa_r+0xb4e>
 800e096:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e09a:	aa14      	add	r2, sp, #80	@ 0x50
 800e09c:	a915      	add	r1, sp, #84	@ 0x54
 800e09e:	4648      	mov	r0, r9
 800e0a0:	f001 f8ce 	bl	800f240 <__d2b>
 800e0a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0a8:	9002      	str	r0, [sp, #8]
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	d078      	beq.n	800e1a0 <_dtoa_r+0x1d8>
 800e0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e0b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e0bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4b76      	ldr	r3, [pc, #472]	@ (800e2a8 <_dtoa_r+0x2e0>)
 800e0ce:	f7f2 f8db 	bl	8000288 <__aeabi_dsub>
 800e0d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e280 <_dtoa_r+0x2b8>)
 800e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d8:	f7f2 fa8e 	bl	80005f8 <__aeabi_dmul>
 800e0dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e288 <_dtoa_r+0x2c0>)
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	f7f2 f8d3 	bl	800028c <__adddf3>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	f7f2 fa1a 	bl	8000524 <__aeabi_i2d>
 800e0f0:	a367      	add	r3, pc, #412	@ (adr r3, 800e290 <_dtoa_r+0x2c8>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 fa7f 	bl	80005f8 <__aeabi_dmul>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 f8c3 	bl	800028c <__adddf3>
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	f7f2 fd25 	bl	8000b58 <__aeabi_d2iz>
 800e10e:	2200      	movs	r2, #0
 800e110:	4607      	mov	r7, r0
 800e112:	2300      	movs	r3, #0
 800e114:	4620      	mov	r0, r4
 800e116:	4629      	mov	r1, r5
 800e118:	f7f2 fce0 	bl	8000adc <__aeabi_dcmplt>
 800e11c:	b140      	cbz	r0, 800e130 <_dtoa_r+0x168>
 800e11e:	4638      	mov	r0, r7
 800e120:	f7f2 fa00 	bl	8000524 <__aeabi_i2d>
 800e124:	4622      	mov	r2, r4
 800e126:	462b      	mov	r3, r5
 800e128:	f7f2 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800e12c:	b900      	cbnz	r0, 800e130 <_dtoa_r+0x168>
 800e12e:	3f01      	subs	r7, #1
 800e130:	2f16      	cmp	r7, #22
 800e132:	d852      	bhi.n	800e1da <_dtoa_r+0x212>
 800e134:	4b5d      	ldr	r3, [pc, #372]	@ (800e2ac <_dtoa_r+0x2e4>)
 800e136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e142:	f7f2 fccb 	bl	8000adc <__aeabi_dcmplt>
 800e146:	2800      	cmp	r0, #0
 800e148:	d049      	beq.n	800e1de <_dtoa_r+0x216>
 800e14a:	3f01      	subs	r7, #1
 800e14c:	2300      	movs	r3, #0
 800e14e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e150:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e152:	1b9b      	subs	r3, r3, r6
 800e154:	1e5a      	subs	r2, r3, #1
 800e156:	bf45      	ittet	mi
 800e158:	f1c3 0301 	rsbmi	r3, r3, #1
 800e15c:	9300      	strmi	r3, [sp, #0]
 800e15e:	2300      	movpl	r3, #0
 800e160:	2300      	movmi	r3, #0
 800e162:	9206      	str	r2, [sp, #24]
 800e164:	bf54      	ite	pl
 800e166:	9300      	strpl	r3, [sp, #0]
 800e168:	9306      	strmi	r3, [sp, #24]
 800e16a:	2f00      	cmp	r7, #0
 800e16c:	db39      	blt.n	800e1e2 <_dtoa_r+0x21a>
 800e16e:	9b06      	ldr	r3, [sp, #24]
 800e170:	970d      	str	r7, [sp, #52]	@ 0x34
 800e172:	443b      	add	r3, r7
 800e174:	9306      	str	r3, [sp, #24]
 800e176:	2300      	movs	r3, #0
 800e178:	9308      	str	r3, [sp, #32]
 800e17a:	9b07      	ldr	r3, [sp, #28]
 800e17c:	2b09      	cmp	r3, #9
 800e17e:	d863      	bhi.n	800e248 <_dtoa_r+0x280>
 800e180:	2b05      	cmp	r3, #5
 800e182:	bfc4      	itt	gt
 800e184:	3b04      	subgt	r3, #4
 800e186:	9307      	strgt	r3, [sp, #28]
 800e188:	9b07      	ldr	r3, [sp, #28]
 800e18a:	f1a3 0302 	sub.w	r3, r3, #2
 800e18e:	bfcc      	ite	gt
 800e190:	2400      	movgt	r4, #0
 800e192:	2401      	movle	r4, #1
 800e194:	2b03      	cmp	r3, #3
 800e196:	d863      	bhi.n	800e260 <_dtoa_r+0x298>
 800e198:	e8df f003 	tbb	[pc, r3]
 800e19c:	2b375452 	.word	0x2b375452
 800e1a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e1a4:	441e      	add	r6, r3
 800e1a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e1aa:	2b20      	cmp	r3, #32
 800e1ac:	bfc1      	itttt	gt
 800e1ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1b2:	409f      	lslgt	r7, r3
 800e1b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1bc:	bfd6      	itet	le
 800e1be:	f1c3 0320 	rsble	r3, r3, #32
 800e1c2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1c6:	fa04 f003 	lslle.w	r0, r4, r3
 800e1ca:	f7f2 f99b 	bl	8000504 <__aeabi_ui2d>
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1d4:	3e01      	subs	r6, #1
 800e1d6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e1d8:	e776      	b.n	800e0c8 <_dtoa_r+0x100>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7b7      	b.n	800e14e <_dtoa_r+0x186>
 800e1de:	9010      	str	r0, [sp, #64]	@ 0x40
 800e1e0:	e7b6      	b.n	800e150 <_dtoa_r+0x188>
 800e1e2:	9b00      	ldr	r3, [sp, #0]
 800e1e4:	1bdb      	subs	r3, r3, r7
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	427b      	negs	r3, r7
 800e1ea:	9308      	str	r3, [sp, #32]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1f0:	e7c3      	b.n	800e17a <_dtoa_r+0x1b2>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1f8:	eb07 0b03 	add.w	fp, r7, r3
 800e1fc:	f10b 0301 	add.w	r3, fp, #1
 800e200:	2b01      	cmp	r3, #1
 800e202:	9303      	str	r3, [sp, #12]
 800e204:	bfb8      	it	lt
 800e206:	2301      	movlt	r3, #1
 800e208:	e006      	b.n	800e218 <_dtoa_r+0x250>
 800e20a:	2301      	movs	r3, #1
 800e20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e20e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e210:	2b00      	cmp	r3, #0
 800e212:	dd28      	ble.n	800e266 <_dtoa_r+0x29e>
 800e214:	469b      	mov	fp, r3
 800e216:	9303      	str	r3, [sp, #12]
 800e218:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e21c:	2100      	movs	r1, #0
 800e21e:	2204      	movs	r2, #4
 800e220:	f102 0514 	add.w	r5, r2, #20
 800e224:	429d      	cmp	r5, r3
 800e226:	d926      	bls.n	800e276 <_dtoa_r+0x2ae>
 800e228:	6041      	str	r1, [r0, #4]
 800e22a:	4648      	mov	r0, r9
 800e22c:	f000 fce6 	bl	800ebfc <_Balloc>
 800e230:	4682      	mov	sl, r0
 800e232:	2800      	cmp	r0, #0
 800e234:	d142      	bne.n	800e2bc <_dtoa_r+0x2f4>
 800e236:	4b1e      	ldr	r3, [pc, #120]	@ (800e2b0 <_dtoa_r+0x2e8>)
 800e238:	4602      	mov	r2, r0
 800e23a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e23e:	e6da      	b.n	800dff6 <_dtoa_r+0x2e>
 800e240:	2300      	movs	r3, #0
 800e242:	e7e3      	b.n	800e20c <_dtoa_r+0x244>
 800e244:	2300      	movs	r3, #0
 800e246:	e7d5      	b.n	800e1f4 <_dtoa_r+0x22c>
 800e248:	2401      	movs	r4, #1
 800e24a:	2300      	movs	r3, #0
 800e24c:	9307      	str	r3, [sp, #28]
 800e24e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e250:	f04f 3bff 	mov.w	fp, #4294967295
 800e254:	2200      	movs	r2, #0
 800e256:	f8cd b00c 	str.w	fp, [sp, #12]
 800e25a:	2312      	movs	r3, #18
 800e25c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e25e:	e7db      	b.n	800e218 <_dtoa_r+0x250>
 800e260:	2301      	movs	r3, #1
 800e262:	9309      	str	r3, [sp, #36]	@ 0x24
 800e264:	e7f4      	b.n	800e250 <_dtoa_r+0x288>
 800e266:	f04f 0b01 	mov.w	fp, #1
 800e26a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e26e:	465b      	mov	r3, fp
 800e270:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e274:	e7d0      	b.n	800e218 <_dtoa_r+0x250>
 800e276:	3101      	adds	r1, #1
 800e278:	0052      	lsls	r2, r2, #1
 800e27a:	e7d1      	b.n	800e220 <_dtoa_r+0x258>
 800e27c:	f3af 8000 	nop.w
 800e280:	636f4361 	.word	0x636f4361
 800e284:	3fd287a7 	.word	0x3fd287a7
 800e288:	8b60c8b3 	.word	0x8b60c8b3
 800e28c:	3fc68a28 	.word	0x3fc68a28
 800e290:	509f79fb 	.word	0x509f79fb
 800e294:	3fd34413 	.word	0x3fd34413
 800e298:	08010b60 	.word	0x08010b60
 800e29c:	08010b77 	.word	0x08010b77
 800e2a0:	7ff00000 	.word	0x7ff00000
 800e2a4:	08010c50 	.word	0x08010c50
 800e2a8:	3ff80000 	.word	0x3ff80000
 800e2ac:	08010d98 	.word	0x08010d98
 800e2b0:	08010bcf 	.word	0x08010bcf
 800e2b4:	08010b5c 	.word	0x08010b5c
 800e2b8:	08010c4f 	.word	0x08010c4f
 800e2bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2c0:	6018      	str	r0, [r3, #0]
 800e2c2:	9b03      	ldr	r3, [sp, #12]
 800e2c4:	2b0e      	cmp	r3, #14
 800e2c6:	f200 80a1 	bhi.w	800e40c <_dtoa_r+0x444>
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	f000 809e 	beq.w	800e40c <_dtoa_r+0x444>
 800e2d0:	2f00      	cmp	r7, #0
 800e2d2:	dd33      	ble.n	800e33c <_dtoa_r+0x374>
 800e2d4:	4b9c      	ldr	r3, [pc, #624]	@ (800e548 <_dtoa_r+0x580>)
 800e2d6:	f007 020f 	and.w	r2, r7, #15
 800e2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2de:	ed93 7b00 	vldr	d7, [r3]
 800e2e2:	05f8      	lsls	r0, r7, #23
 800e2e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e2e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2ec:	d516      	bpl.n	800e31c <_dtoa_r+0x354>
 800e2ee:	4b97      	ldr	r3, [pc, #604]	@ (800e54c <_dtoa_r+0x584>)
 800e2f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e2f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2f8:	f7f2 faa8 	bl	800084c <__aeabi_ddiv>
 800e2fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e300:	f004 040f 	and.w	r4, r4, #15
 800e304:	2603      	movs	r6, #3
 800e306:	4d91      	ldr	r5, [pc, #580]	@ (800e54c <_dtoa_r+0x584>)
 800e308:	b954      	cbnz	r4, 800e320 <_dtoa_r+0x358>
 800e30a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e30e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e312:	f7f2 fa9b 	bl	800084c <__aeabi_ddiv>
 800e316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e31a:	e028      	b.n	800e36e <_dtoa_r+0x3a6>
 800e31c:	2602      	movs	r6, #2
 800e31e:	e7f2      	b.n	800e306 <_dtoa_r+0x33e>
 800e320:	07e1      	lsls	r1, r4, #31
 800e322:	d508      	bpl.n	800e336 <_dtoa_r+0x36e>
 800e324:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e32c:	f7f2 f964 	bl	80005f8 <__aeabi_dmul>
 800e330:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e334:	3601      	adds	r6, #1
 800e336:	1064      	asrs	r4, r4, #1
 800e338:	3508      	adds	r5, #8
 800e33a:	e7e5      	b.n	800e308 <_dtoa_r+0x340>
 800e33c:	f000 80af 	beq.w	800e49e <_dtoa_r+0x4d6>
 800e340:	427c      	negs	r4, r7
 800e342:	4b81      	ldr	r3, [pc, #516]	@ (800e548 <_dtoa_r+0x580>)
 800e344:	4d81      	ldr	r5, [pc, #516]	@ (800e54c <_dtoa_r+0x584>)
 800e346:	f004 020f 	and.w	r2, r4, #15
 800e34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e356:	f7f2 f94f 	bl	80005f8 <__aeabi_dmul>
 800e35a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e35e:	1124      	asrs	r4, r4, #4
 800e360:	2300      	movs	r3, #0
 800e362:	2602      	movs	r6, #2
 800e364:	2c00      	cmp	r4, #0
 800e366:	f040 808f 	bne.w	800e488 <_dtoa_r+0x4c0>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1d3      	bne.n	800e316 <_dtoa_r+0x34e>
 800e36e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e370:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 8094 	beq.w	800e4a2 <_dtoa_r+0x4da>
 800e37a:	4b75      	ldr	r3, [pc, #468]	@ (800e550 <_dtoa_r+0x588>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	4620      	mov	r0, r4
 800e380:	4629      	mov	r1, r5
 800e382:	f7f2 fbab 	bl	8000adc <__aeabi_dcmplt>
 800e386:	2800      	cmp	r0, #0
 800e388:	f000 808b 	beq.w	800e4a2 <_dtoa_r+0x4da>
 800e38c:	9b03      	ldr	r3, [sp, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 8087 	beq.w	800e4a2 <_dtoa_r+0x4da>
 800e394:	f1bb 0f00 	cmp.w	fp, #0
 800e398:	dd34      	ble.n	800e404 <_dtoa_r+0x43c>
 800e39a:	4620      	mov	r0, r4
 800e39c:	4b6d      	ldr	r3, [pc, #436]	@ (800e554 <_dtoa_r+0x58c>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f2 f929 	bl	80005f8 <__aeabi_dmul>
 800e3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3aa:	f107 38ff 	add.w	r8, r7, #4294967295
 800e3ae:	3601      	adds	r6, #1
 800e3b0:	465c      	mov	r4, fp
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7f2 f8b6 	bl	8000524 <__aeabi_i2d>
 800e3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3bc:	f7f2 f91c 	bl	80005f8 <__aeabi_dmul>
 800e3c0:	4b65      	ldr	r3, [pc, #404]	@ (800e558 <_dtoa_r+0x590>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f7f1 ff62 	bl	800028c <__adddf3>
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3ce:	2c00      	cmp	r4, #0
 800e3d0:	d16a      	bne.n	800e4a8 <_dtoa_r+0x4e0>
 800e3d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3d6:	4b61      	ldr	r3, [pc, #388]	@ (800e55c <_dtoa_r+0x594>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f7f1 ff55 	bl	8000288 <__aeabi_dsub>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3e6:	462a      	mov	r2, r5
 800e3e8:	4633      	mov	r3, r6
 800e3ea:	f7f2 fb95 	bl	8000b18 <__aeabi_dcmpgt>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	f040 8298 	bne.w	800e924 <_dtoa_r+0x95c>
 800e3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f8:	462a      	mov	r2, r5
 800e3fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3fe:	f7f2 fb6d 	bl	8000adc <__aeabi_dcmplt>
 800e402:	bb38      	cbnz	r0, 800e454 <_dtoa_r+0x48c>
 800e404:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e408:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e40c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f2c0 8157 	blt.w	800e6c2 <_dtoa_r+0x6fa>
 800e414:	2f0e      	cmp	r7, #14
 800e416:	f300 8154 	bgt.w	800e6c2 <_dtoa_r+0x6fa>
 800e41a:	4b4b      	ldr	r3, [pc, #300]	@ (800e548 <_dtoa_r+0x580>)
 800e41c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e420:	ed93 7b00 	vldr	d7, [r3]
 800e424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e426:	2b00      	cmp	r3, #0
 800e428:	ed8d 7b00 	vstr	d7, [sp]
 800e42c:	f280 80e5 	bge.w	800e5fa <_dtoa_r+0x632>
 800e430:	9b03      	ldr	r3, [sp, #12]
 800e432:	2b00      	cmp	r3, #0
 800e434:	f300 80e1 	bgt.w	800e5fa <_dtoa_r+0x632>
 800e438:	d10c      	bne.n	800e454 <_dtoa_r+0x48c>
 800e43a:	4b48      	ldr	r3, [pc, #288]	@ (800e55c <_dtoa_r+0x594>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	ec51 0b17 	vmov	r0, r1, d7
 800e442:	f7f2 f8d9 	bl	80005f8 <__aeabi_dmul>
 800e446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e44a:	f7f2 fb5b 	bl	8000b04 <__aeabi_dcmpge>
 800e44e:	2800      	cmp	r0, #0
 800e450:	f000 8266 	beq.w	800e920 <_dtoa_r+0x958>
 800e454:	2400      	movs	r4, #0
 800e456:	4625      	mov	r5, r4
 800e458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e45a:	4656      	mov	r6, sl
 800e45c:	ea6f 0803 	mvn.w	r8, r3
 800e460:	2700      	movs	r7, #0
 800e462:	4621      	mov	r1, r4
 800e464:	4648      	mov	r0, r9
 800e466:	f000 fc09 	bl	800ec7c <_Bfree>
 800e46a:	2d00      	cmp	r5, #0
 800e46c:	f000 80bd 	beq.w	800e5ea <_dtoa_r+0x622>
 800e470:	b12f      	cbz	r7, 800e47e <_dtoa_r+0x4b6>
 800e472:	42af      	cmp	r7, r5
 800e474:	d003      	beq.n	800e47e <_dtoa_r+0x4b6>
 800e476:	4639      	mov	r1, r7
 800e478:	4648      	mov	r0, r9
 800e47a:	f000 fbff 	bl	800ec7c <_Bfree>
 800e47e:	4629      	mov	r1, r5
 800e480:	4648      	mov	r0, r9
 800e482:	f000 fbfb 	bl	800ec7c <_Bfree>
 800e486:	e0b0      	b.n	800e5ea <_dtoa_r+0x622>
 800e488:	07e2      	lsls	r2, r4, #31
 800e48a:	d505      	bpl.n	800e498 <_dtoa_r+0x4d0>
 800e48c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e490:	f7f2 f8b2 	bl	80005f8 <__aeabi_dmul>
 800e494:	3601      	adds	r6, #1
 800e496:	2301      	movs	r3, #1
 800e498:	1064      	asrs	r4, r4, #1
 800e49a:	3508      	adds	r5, #8
 800e49c:	e762      	b.n	800e364 <_dtoa_r+0x39c>
 800e49e:	2602      	movs	r6, #2
 800e4a0:	e765      	b.n	800e36e <_dtoa_r+0x3a6>
 800e4a2:	9c03      	ldr	r4, [sp, #12]
 800e4a4:	46b8      	mov	r8, r7
 800e4a6:	e784      	b.n	800e3b2 <_dtoa_r+0x3ea>
 800e4a8:	4b27      	ldr	r3, [pc, #156]	@ (800e548 <_dtoa_r+0x580>)
 800e4aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4b4:	4454      	add	r4, sl
 800e4b6:	2900      	cmp	r1, #0
 800e4b8:	d054      	beq.n	800e564 <_dtoa_r+0x59c>
 800e4ba:	4929      	ldr	r1, [pc, #164]	@ (800e560 <_dtoa_r+0x598>)
 800e4bc:	2000      	movs	r0, #0
 800e4be:	f7f2 f9c5 	bl	800084c <__aeabi_ddiv>
 800e4c2:	4633      	mov	r3, r6
 800e4c4:	462a      	mov	r2, r5
 800e4c6:	f7f1 fedf 	bl	8000288 <__aeabi_dsub>
 800e4ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4ce:	4656      	mov	r6, sl
 800e4d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4d4:	f7f2 fb40 	bl	8000b58 <__aeabi_d2iz>
 800e4d8:	4605      	mov	r5, r0
 800e4da:	f7f2 f823 	bl	8000524 <__aeabi_i2d>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4e6:	f7f1 fecf 	bl	8000288 <__aeabi_dsub>
 800e4ea:	3530      	adds	r5, #48	@ 0x30
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4f4:	f806 5b01 	strb.w	r5, [r6], #1
 800e4f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4fc:	f7f2 faee 	bl	8000adc <__aeabi_dcmplt>
 800e500:	2800      	cmp	r0, #0
 800e502:	d172      	bne.n	800e5ea <_dtoa_r+0x622>
 800e504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e508:	4911      	ldr	r1, [pc, #68]	@ (800e550 <_dtoa_r+0x588>)
 800e50a:	2000      	movs	r0, #0
 800e50c:	f7f1 febc 	bl	8000288 <__aeabi_dsub>
 800e510:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e514:	f7f2 fae2 	bl	8000adc <__aeabi_dcmplt>
 800e518:	2800      	cmp	r0, #0
 800e51a:	f040 80b4 	bne.w	800e686 <_dtoa_r+0x6be>
 800e51e:	42a6      	cmp	r6, r4
 800e520:	f43f af70 	beq.w	800e404 <_dtoa_r+0x43c>
 800e524:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e528:	4b0a      	ldr	r3, [pc, #40]	@ (800e554 <_dtoa_r+0x58c>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	f7f2 f864 	bl	80005f8 <__aeabi_dmul>
 800e530:	4b08      	ldr	r3, [pc, #32]	@ (800e554 <_dtoa_r+0x58c>)
 800e532:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e536:	2200      	movs	r2, #0
 800e538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e53c:	f7f2 f85c 	bl	80005f8 <__aeabi_dmul>
 800e540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e544:	e7c4      	b.n	800e4d0 <_dtoa_r+0x508>
 800e546:	bf00      	nop
 800e548:	08010d98 	.word	0x08010d98
 800e54c:	08010d70 	.word	0x08010d70
 800e550:	3ff00000 	.word	0x3ff00000
 800e554:	40240000 	.word	0x40240000
 800e558:	401c0000 	.word	0x401c0000
 800e55c:	40140000 	.word	0x40140000
 800e560:	3fe00000 	.word	0x3fe00000
 800e564:	4631      	mov	r1, r6
 800e566:	4628      	mov	r0, r5
 800e568:	f7f2 f846 	bl	80005f8 <__aeabi_dmul>
 800e56c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e570:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e572:	4656      	mov	r6, sl
 800e574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e578:	f7f2 faee 	bl	8000b58 <__aeabi_d2iz>
 800e57c:	4605      	mov	r5, r0
 800e57e:	f7f1 ffd1 	bl	8000524 <__aeabi_i2d>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e58a:	f7f1 fe7d 	bl	8000288 <__aeabi_dsub>
 800e58e:	3530      	adds	r5, #48	@ 0x30
 800e590:	f806 5b01 	strb.w	r5, [r6], #1
 800e594:	4602      	mov	r2, r0
 800e596:	460b      	mov	r3, r1
 800e598:	42a6      	cmp	r6, r4
 800e59a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e59e:	f04f 0200 	mov.w	r2, #0
 800e5a2:	d124      	bne.n	800e5ee <_dtoa_r+0x626>
 800e5a4:	4baf      	ldr	r3, [pc, #700]	@ (800e864 <_dtoa_r+0x89c>)
 800e5a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e5aa:	f7f1 fe6f 	bl	800028c <__adddf3>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5b6:	f7f2 faaf 	bl	8000b18 <__aeabi_dcmpgt>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d163      	bne.n	800e686 <_dtoa_r+0x6be>
 800e5be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5c2:	49a8      	ldr	r1, [pc, #672]	@ (800e864 <_dtoa_r+0x89c>)
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	f7f1 fe5f 	bl	8000288 <__aeabi_dsub>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5d2:	f7f2 fa83 	bl	8000adc <__aeabi_dcmplt>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	f43f af14 	beq.w	800e404 <_dtoa_r+0x43c>
 800e5dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e5de:	1e73      	subs	r3, r6, #1
 800e5e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5e6:	2b30      	cmp	r3, #48	@ 0x30
 800e5e8:	d0f8      	beq.n	800e5dc <_dtoa_r+0x614>
 800e5ea:	4647      	mov	r7, r8
 800e5ec:	e03b      	b.n	800e666 <_dtoa_r+0x69e>
 800e5ee:	4b9e      	ldr	r3, [pc, #632]	@ (800e868 <_dtoa_r+0x8a0>)
 800e5f0:	f7f2 f802 	bl	80005f8 <__aeabi_dmul>
 800e5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5f8:	e7bc      	b.n	800e574 <_dtoa_r+0x5ac>
 800e5fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e5fe:	4656      	mov	r6, sl
 800e600:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e604:	4620      	mov	r0, r4
 800e606:	4629      	mov	r1, r5
 800e608:	f7f2 f920 	bl	800084c <__aeabi_ddiv>
 800e60c:	f7f2 faa4 	bl	8000b58 <__aeabi_d2iz>
 800e610:	4680      	mov	r8, r0
 800e612:	f7f1 ff87 	bl	8000524 <__aeabi_i2d>
 800e616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e61a:	f7f1 ffed 	bl	80005f8 <__aeabi_dmul>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4620      	mov	r0, r4
 800e624:	4629      	mov	r1, r5
 800e626:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e62a:	f7f1 fe2d 	bl	8000288 <__aeabi_dsub>
 800e62e:	f806 4b01 	strb.w	r4, [r6], #1
 800e632:	9d03      	ldr	r5, [sp, #12]
 800e634:	eba6 040a 	sub.w	r4, r6, sl
 800e638:	42a5      	cmp	r5, r4
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	d133      	bne.n	800e6a8 <_dtoa_r+0x6e0>
 800e640:	f7f1 fe24 	bl	800028c <__adddf3>
 800e644:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e648:	4604      	mov	r4, r0
 800e64a:	460d      	mov	r5, r1
 800e64c:	f7f2 fa64 	bl	8000b18 <__aeabi_dcmpgt>
 800e650:	b9c0      	cbnz	r0, 800e684 <_dtoa_r+0x6bc>
 800e652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e656:	4620      	mov	r0, r4
 800e658:	4629      	mov	r1, r5
 800e65a:	f7f2 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800e65e:	b110      	cbz	r0, 800e666 <_dtoa_r+0x69e>
 800e660:	f018 0f01 	tst.w	r8, #1
 800e664:	d10e      	bne.n	800e684 <_dtoa_r+0x6bc>
 800e666:	9902      	ldr	r1, [sp, #8]
 800e668:	4648      	mov	r0, r9
 800e66a:	f000 fb07 	bl	800ec7c <_Bfree>
 800e66e:	2300      	movs	r3, #0
 800e670:	7033      	strb	r3, [r6, #0]
 800e672:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e674:	3701      	adds	r7, #1
 800e676:	601f      	str	r7, [r3, #0]
 800e678:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 824b 	beq.w	800eb16 <_dtoa_r+0xb4e>
 800e680:	601e      	str	r6, [r3, #0]
 800e682:	e248      	b.n	800eb16 <_dtoa_r+0xb4e>
 800e684:	46b8      	mov	r8, r7
 800e686:	4633      	mov	r3, r6
 800e688:	461e      	mov	r6, r3
 800e68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e68e:	2a39      	cmp	r2, #57	@ 0x39
 800e690:	d106      	bne.n	800e6a0 <_dtoa_r+0x6d8>
 800e692:	459a      	cmp	sl, r3
 800e694:	d1f8      	bne.n	800e688 <_dtoa_r+0x6c0>
 800e696:	2230      	movs	r2, #48	@ 0x30
 800e698:	f108 0801 	add.w	r8, r8, #1
 800e69c:	f88a 2000 	strb.w	r2, [sl]
 800e6a0:	781a      	ldrb	r2, [r3, #0]
 800e6a2:	3201      	adds	r2, #1
 800e6a4:	701a      	strb	r2, [r3, #0]
 800e6a6:	e7a0      	b.n	800e5ea <_dtoa_r+0x622>
 800e6a8:	4b6f      	ldr	r3, [pc, #444]	@ (800e868 <_dtoa_r+0x8a0>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f7f1 ffa4 	bl	80005f8 <__aeabi_dmul>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	460d      	mov	r5, r1
 800e6b8:	f7f2 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d09f      	beq.n	800e600 <_dtoa_r+0x638>
 800e6c0:	e7d1      	b.n	800e666 <_dtoa_r+0x69e>
 800e6c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	f000 80ea 	beq.w	800e89e <_dtoa_r+0x8d6>
 800e6ca:	9a07      	ldr	r2, [sp, #28]
 800e6cc:	2a01      	cmp	r2, #1
 800e6ce:	f300 80cd 	bgt.w	800e86c <_dtoa_r+0x8a4>
 800e6d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6d4:	2a00      	cmp	r2, #0
 800e6d6:	f000 80c1 	beq.w	800e85c <_dtoa_r+0x894>
 800e6da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6de:	9c08      	ldr	r4, [sp, #32]
 800e6e0:	9e00      	ldr	r6, [sp, #0]
 800e6e2:	9a00      	ldr	r2, [sp, #0]
 800e6e4:	441a      	add	r2, r3
 800e6e6:	9200      	str	r2, [sp, #0]
 800e6e8:	9a06      	ldr	r2, [sp, #24]
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	441a      	add	r2, r3
 800e6ee:	4648      	mov	r0, r9
 800e6f0:	9206      	str	r2, [sp, #24]
 800e6f2:	f000 fb77 	bl	800ede4 <__i2b>
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	b166      	cbz	r6, 800e714 <_dtoa_r+0x74c>
 800e6fa:	9b06      	ldr	r3, [sp, #24]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dd09      	ble.n	800e714 <_dtoa_r+0x74c>
 800e700:	42b3      	cmp	r3, r6
 800e702:	9a00      	ldr	r2, [sp, #0]
 800e704:	bfa8      	it	ge
 800e706:	4633      	movge	r3, r6
 800e708:	1ad2      	subs	r2, r2, r3
 800e70a:	9200      	str	r2, [sp, #0]
 800e70c:	9a06      	ldr	r2, [sp, #24]
 800e70e:	1af6      	subs	r6, r6, r3
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	9306      	str	r3, [sp, #24]
 800e714:	9b08      	ldr	r3, [sp, #32]
 800e716:	b30b      	cbz	r3, 800e75c <_dtoa_r+0x794>
 800e718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80c6 	beq.w	800e8ac <_dtoa_r+0x8e4>
 800e720:	2c00      	cmp	r4, #0
 800e722:	f000 80c0 	beq.w	800e8a6 <_dtoa_r+0x8de>
 800e726:	4629      	mov	r1, r5
 800e728:	4622      	mov	r2, r4
 800e72a:	4648      	mov	r0, r9
 800e72c:	f000 fc12 	bl	800ef54 <__pow5mult>
 800e730:	9a02      	ldr	r2, [sp, #8]
 800e732:	4601      	mov	r1, r0
 800e734:	4605      	mov	r5, r0
 800e736:	4648      	mov	r0, r9
 800e738:	f000 fb6a 	bl	800ee10 <__multiply>
 800e73c:	9902      	ldr	r1, [sp, #8]
 800e73e:	4680      	mov	r8, r0
 800e740:	4648      	mov	r0, r9
 800e742:	f000 fa9b 	bl	800ec7c <_Bfree>
 800e746:	9b08      	ldr	r3, [sp, #32]
 800e748:	1b1b      	subs	r3, r3, r4
 800e74a:	9308      	str	r3, [sp, #32]
 800e74c:	f000 80b1 	beq.w	800e8b2 <_dtoa_r+0x8ea>
 800e750:	9a08      	ldr	r2, [sp, #32]
 800e752:	4641      	mov	r1, r8
 800e754:	4648      	mov	r0, r9
 800e756:	f000 fbfd 	bl	800ef54 <__pow5mult>
 800e75a:	9002      	str	r0, [sp, #8]
 800e75c:	2101      	movs	r1, #1
 800e75e:	4648      	mov	r0, r9
 800e760:	f000 fb40 	bl	800ede4 <__i2b>
 800e764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e766:	4604      	mov	r4, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f000 81d8 	beq.w	800eb1e <_dtoa_r+0xb56>
 800e76e:	461a      	mov	r2, r3
 800e770:	4601      	mov	r1, r0
 800e772:	4648      	mov	r0, r9
 800e774:	f000 fbee 	bl	800ef54 <__pow5mult>
 800e778:	9b07      	ldr	r3, [sp, #28]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	4604      	mov	r4, r0
 800e77e:	f300 809f 	bgt.w	800e8c0 <_dtoa_r+0x8f8>
 800e782:	9b04      	ldr	r3, [sp, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f040 8097 	bne.w	800e8b8 <_dtoa_r+0x8f0>
 800e78a:	9b05      	ldr	r3, [sp, #20]
 800e78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e790:	2b00      	cmp	r3, #0
 800e792:	f040 8093 	bne.w	800e8bc <_dtoa_r+0x8f4>
 800e796:	9b05      	ldr	r3, [sp, #20]
 800e798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e79c:	0d1b      	lsrs	r3, r3, #20
 800e79e:	051b      	lsls	r3, r3, #20
 800e7a0:	b133      	cbz	r3, 800e7b0 <_dtoa_r+0x7e8>
 800e7a2:	9b00      	ldr	r3, [sp, #0]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	9306      	str	r3, [sp, #24]
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	9308      	str	r3, [sp, #32]
 800e7b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 81b8 	beq.w	800eb2a <_dtoa_r+0xb62>
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7c0:	6918      	ldr	r0, [r3, #16]
 800e7c2:	f000 fac3 	bl	800ed4c <__hi0bits>
 800e7c6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ca:	9b06      	ldr	r3, [sp, #24]
 800e7cc:	4418      	add	r0, r3
 800e7ce:	f010 001f 	ands.w	r0, r0, #31
 800e7d2:	f000 8082 	beq.w	800e8da <_dtoa_r+0x912>
 800e7d6:	f1c0 0320 	rsb	r3, r0, #32
 800e7da:	2b04      	cmp	r3, #4
 800e7dc:	dd73      	ble.n	800e8c6 <_dtoa_r+0x8fe>
 800e7de:	9b00      	ldr	r3, [sp, #0]
 800e7e0:	f1c0 001c 	rsb	r0, r0, #28
 800e7e4:	4403      	add	r3, r0
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	9b06      	ldr	r3, [sp, #24]
 800e7ea:	4403      	add	r3, r0
 800e7ec:	4406      	add	r6, r0
 800e7ee:	9306      	str	r3, [sp, #24]
 800e7f0:	9b00      	ldr	r3, [sp, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	dd05      	ble.n	800e802 <_dtoa_r+0x83a>
 800e7f6:	9902      	ldr	r1, [sp, #8]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	4648      	mov	r0, r9
 800e7fc:	f000 fc04 	bl	800f008 <__lshift>
 800e800:	9002      	str	r0, [sp, #8]
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	2b00      	cmp	r3, #0
 800e806:	dd05      	ble.n	800e814 <_dtoa_r+0x84c>
 800e808:	4621      	mov	r1, r4
 800e80a:	461a      	mov	r2, r3
 800e80c:	4648      	mov	r0, r9
 800e80e:	f000 fbfb 	bl	800f008 <__lshift>
 800e812:	4604      	mov	r4, r0
 800e814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e816:	2b00      	cmp	r3, #0
 800e818:	d061      	beq.n	800e8de <_dtoa_r+0x916>
 800e81a:	9802      	ldr	r0, [sp, #8]
 800e81c:	4621      	mov	r1, r4
 800e81e:	f000 fc5f 	bl	800f0e0 <__mcmp>
 800e822:	2800      	cmp	r0, #0
 800e824:	da5b      	bge.n	800e8de <_dtoa_r+0x916>
 800e826:	2300      	movs	r3, #0
 800e828:	9902      	ldr	r1, [sp, #8]
 800e82a:	220a      	movs	r2, #10
 800e82c:	4648      	mov	r0, r9
 800e82e:	f000 fa47 	bl	800ecc0 <__multadd>
 800e832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e834:	9002      	str	r0, [sp, #8]
 800e836:	f107 38ff 	add.w	r8, r7, #4294967295
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 8177 	beq.w	800eb2e <_dtoa_r+0xb66>
 800e840:	4629      	mov	r1, r5
 800e842:	2300      	movs	r3, #0
 800e844:	220a      	movs	r2, #10
 800e846:	4648      	mov	r0, r9
 800e848:	f000 fa3a 	bl	800ecc0 <__multadd>
 800e84c:	f1bb 0f00 	cmp.w	fp, #0
 800e850:	4605      	mov	r5, r0
 800e852:	dc6f      	bgt.n	800e934 <_dtoa_r+0x96c>
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	2b02      	cmp	r3, #2
 800e858:	dc49      	bgt.n	800e8ee <_dtoa_r+0x926>
 800e85a:	e06b      	b.n	800e934 <_dtoa_r+0x96c>
 800e85c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e85e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e862:	e73c      	b.n	800e6de <_dtoa_r+0x716>
 800e864:	3fe00000 	.word	0x3fe00000
 800e868:	40240000 	.word	0x40240000
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	1e5c      	subs	r4, r3, #1
 800e870:	9b08      	ldr	r3, [sp, #32]
 800e872:	42a3      	cmp	r3, r4
 800e874:	db09      	blt.n	800e88a <_dtoa_r+0x8c2>
 800e876:	1b1c      	subs	r4, r3, r4
 800e878:	9b03      	ldr	r3, [sp, #12]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f6bf af30 	bge.w	800e6e0 <_dtoa_r+0x718>
 800e880:	9b00      	ldr	r3, [sp, #0]
 800e882:	9a03      	ldr	r2, [sp, #12]
 800e884:	1a9e      	subs	r6, r3, r2
 800e886:	2300      	movs	r3, #0
 800e888:	e72b      	b.n	800e6e2 <_dtoa_r+0x71a>
 800e88a:	9b08      	ldr	r3, [sp, #32]
 800e88c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e88e:	9408      	str	r4, [sp, #32]
 800e890:	1ae3      	subs	r3, r4, r3
 800e892:	441a      	add	r2, r3
 800e894:	9e00      	ldr	r6, [sp, #0]
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	920d      	str	r2, [sp, #52]	@ 0x34
 800e89a:	2400      	movs	r4, #0
 800e89c:	e721      	b.n	800e6e2 <_dtoa_r+0x71a>
 800e89e:	9c08      	ldr	r4, [sp, #32]
 800e8a0:	9e00      	ldr	r6, [sp, #0]
 800e8a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e8a4:	e728      	b.n	800e6f8 <_dtoa_r+0x730>
 800e8a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e8aa:	e751      	b.n	800e750 <_dtoa_r+0x788>
 800e8ac:	9a08      	ldr	r2, [sp, #32]
 800e8ae:	9902      	ldr	r1, [sp, #8]
 800e8b0:	e750      	b.n	800e754 <_dtoa_r+0x78c>
 800e8b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e8b6:	e751      	b.n	800e75c <_dtoa_r+0x794>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e779      	b.n	800e7b0 <_dtoa_r+0x7e8>
 800e8bc:	9b04      	ldr	r3, [sp, #16]
 800e8be:	e777      	b.n	800e7b0 <_dtoa_r+0x7e8>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9308      	str	r3, [sp, #32]
 800e8c4:	e779      	b.n	800e7ba <_dtoa_r+0x7f2>
 800e8c6:	d093      	beq.n	800e7f0 <_dtoa_r+0x828>
 800e8c8:	9a00      	ldr	r2, [sp, #0]
 800e8ca:	331c      	adds	r3, #28
 800e8cc:	441a      	add	r2, r3
 800e8ce:	9200      	str	r2, [sp, #0]
 800e8d0:	9a06      	ldr	r2, [sp, #24]
 800e8d2:	441a      	add	r2, r3
 800e8d4:	441e      	add	r6, r3
 800e8d6:	9206      	str	r2, [sp, #24]
 800e8d8:	e78a      	b.n	800e7f0 <_dtoa_r+0x828>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	e7f4      	b.n	800e8c8 <_dtoa_r+0x900>
 800e8de:	9b03      	ldr	r3, [sp, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	46b8      	mov	r8, r7
 800e8e4:	dc20      	bgt.n	800e928 <_dtoa_r+0x960>
 800e8e6:	469b      	mov	fp, r3
 800e8e8:	9b07      	ldr	r3, [sp, #28]
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	dd1e      	ble.n	800e92c <_dtoa_r+0x964>
 800e8ee:	f1bb 0f00 	cmp.w	fp, #0
 800e8f2:	f47f adb1 	bne.w	800e458 <_dtoa_r+0x490>
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	465b      	mov	r3, fp
 800e8fa:	2205      	movs	r2, #5
 800e8fc:	4648      	mov	r0, r9
 800e8fe:	f000 f9df 	bl	800ecc0 <__multadd>
 800e902:	4601      	mov	r1, r0
 800e904:	4604      	mov	r4, r0
 800e906:	9802      	ldr	r0, [sp, #8]
 800e908:	f000 fbea 	bl	800f0e0 <__mcmp>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f77f ada3 	ble.w	800e458 <_dtoa_r+0x490>
 800e912:	4656      	mov	r6, sl
 800e914:	2331      	movs	r3, #49	@ 0x31
 800e916:	f806 3b01 	strb.w	r3, [r6], #1
 800e91a:	f108 0801 	add.w	r8, r8, #1
 800e91e:	e59f      	b.n	800e460 <_dtoa_r+0x498>
 800e920:	9c03      	ldr	r4, [sp, #12]
 800e922:	46b8      	mov	r8, r7
 800e924:	4625      	mov	r5, r4
 800e926:	e7f4      	b.n	800e912 <_dtoa_r+0x94a>
 800e928:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 8101 	beq.w	800eb36 <_dtoa_r+0xb6e>
 800e934:	2e00      	cmp	r6, #0
 800e936:	dd05      	ble.n	800e944 <_dtoa_r+0x97c>
 800e938:	4629      	mov	r1, r5
 800e93a:	4632      	mov	r2, r6
 800e93c:	4648      	mov	r0, r9
 800e93e:	f000 fb63 	bl	800f008 <__lshift>
 800e942:	4605      	mov	r5, r0
 800e944:	9b08      	ldr	r3, [sp, #32]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d05c      	beq.n	800ea04 <_dtoa_r+0xa3c>
 800e94a:	6869      	ldr	r1, [r5, #4]
 800e94c:	4648      	mov	r0, r9
 800e94e:	f000 f955 	bl	800ebfc <_Balloc>
 800e952:	4606      	mov	r6, r0
 800e954:	b928      	cbnz	r0, 800e962 <_dtoa_r+0x99a>
 800e956:	4b82      	ldr	r3, [pc, #520]	@ (800eb60 <_dtoa_r+0xb98>)
 800e958:	4602      	mov	r2, r0
 800e95a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e95e:	f7ff bb4a 	b.w	800dff6 <_dtoa_r+0x2e>
 800e962:	692a      	ldr	r2, [r5, #16]
 800e964:	3202      	adds	r2, #2
 800e966:	0092      	lsls	r2, r2, #2
 800e968:	f105 010c 	add.w	r1, r5, #12
 800e96c:	300c      	adds	r0, #12
 800e96e:	f7ff fa8e 	bl	800de8e <memcpy>
 800e972:	2201      	movs	r2, #1
 800e974:	4631      	mov	r1, r6
 800e976:	4648      	mov	r0, r9
 800e978:	f000 fb46 	bl	800f008 <__lshift>
 800e97c:	f10a 0301 	add.w	r3, sl, #1
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	eb0a 030b 	add.w	r3, sl, fp
 800e986:	9308      	str	r3, [sp, #32]
 800e988:	9b04      	ldr	r3, [sp, #16]
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	462f      	mov	r7, r5
 800e990:	9306      	str	r3, [sp, #24]
 800e992:	4605      	mov	r5, r0
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	9802      	ldr	r0, [sp, #8]
 800e998:	4621      	mov	r1, r4
 800e99a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e99e:	f7ff fa8b 	bl	800deb8 <quorem>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	3330      	adds	r3, #48	@ 0x30
 800e9a6:	9003      	str	r0, [sp, #12]
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	9802      	ldr	r0, [sp, #8]
 800e9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ae:	f000 fb97 	bl	800f0e0 <__mcmp>
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	9004      	str	r0, [sp, #16]
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	4648      	mov	r0, r9
 800e9ba:	f000 fbad 	bl	800f118 <__mdiff>
 800e9be:	68c2      	ldr	r2, [r0, #12]
 800e9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	bb02      	cbnz	r2, 800ea08 <_dtoa_r+0xa40>
 800e9c6:	4601      	mov	r1, r0
 800e9c8:	9802      	ldr	r0, [sp, #8]
 800e9ca:	f000 fb89 	bl	800f0e0 <__mcmp>
 800e9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4648      	mov	r0, r9
 800e9d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9da:	f000 f94f 	bl	800ec7c <_Bfree>
 800e9de:	9b07      	ldr	r3, [sp, #28]
 800e9e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e9e2:	9e00      	ldr	r6, [sp, #0]
 800e9e4:	ea42 0103 	orr.w	r1, r2, r3
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	4319      	orrs	r1, r3
 800e9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ee:	d10d      	bne.n	800ea0c <_dtoa_r+0xa44>
 800e9f0:	2b39      	cmp	r3, #57	@ 0x39
 800e9f2:	d027      	beq.n	800ea44 <_dtoa_r+0xa7c>
 800e9f4:	9a04      	ldr	r2, [sp, #16]
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	dd01      	ble.n	800e9fe <_dtoa_r+0xa36>
 800e9fa:	9b03      	ldr	r3, [sp, #12]
 800e9fc:	3331      	adds	r3, #49	@ 0x31
 800e9fe:	f88b 3000 	strb.w	r3, [fp]
 800ea02:	e52e      	b.n	800e462 <_dtoa_r+0x49a>
 800ea04:	4628      	mov	r0, r5
 800ea06:	e7b9      	b.n	800e97c <_dtoa_r+0x9b4>
 800ea08:	2201      	movs	r2, #1
 800ea0a:	e7e2      	b.n	800e9d2 <_dtoa_r+0xa0a>
 800ea0c:	9904      	ldr	r1, [sp, #16]
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	db04      	blt.n	800ea1c <_dtoa_r+0xa54>
 800ea12:	9807      	ldr	r0, [sp, #28]
 800ea14:	4301      	orrs	r1, r0
 800ea16:	9806      	ldr	r0, [sp, #24]
 800ea18:	4301      	orrs	r1, r0
 800ea1a:	d120      	bne.n	800ea5e <_dtoa_r+0xa96>
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	ddee      	ble.n	800e9fe <_dtoa_r+0xa36>
 800ea20:	9902      	ldr	r1, [sp, #8]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	2201      	movs	r2, #1
 800ea26:	4648      	mov	r0, r9
 800ea28:	f000 faee 	bl	800f008 <__lshift>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	9002      	str	r0, [sp, #8]
 800ea30:	f000 fb56 	bl	800f0e0 <__mcmp>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	9b00      	ldr	r3, [sp, #0]
 800ea38:	dc02      	bgt.n	800ea40 <_dtoa_r+0xa78>
 800ea3a:	d1e0      	bne.n	800e9fe <_dtoa_r+0xa36>
 800ea3c:	07da      	lsls	r2, r3, #31
 800ea3e:	d5de      	bpl.n	800e9fe <_dtoa_r+0xa36>
 800ea40:	2b39      	cmp	r3, #57	@ 0x39
 800ea42:	d1da      	bne.n	800e9fa <_dtoa_r+0xa32>
 800ea44:	2339      	movs	r3, #57	@ 0x39
 800ea46:	f88b 3000 	strb.w	r3, [fp]
 800ea4a:	4633      	mov	r3, r6
 800ea4c:	461e      	mov	r6, r3
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea54:	2a39      	cmp	r2, #57	@ 0x39
 800ea56:	d04e      	beq.n	800eaf6 <_dtoa_r+0xb2e>
 800ea58:	3201      	adds	r2, #1
 800ea5a:	701a      	strb	r2, [r3, #0]
 800ea5c:	e501      	b.n	800e462 <_dtoa_r+0x49a>
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	dd03      	ble.n	800ea6a <_dtoa_r+0xaa2>
 800ea62:	2b39      	cmp	r3, #57	@ 0x39
 800ea64:	d0ee      	beq.n	800ea44 <_dtoa_r+0xa7c>
 800ea66:	3301      	adds	r3, #1
 800ea68:	e7c9      	b.n	800e9fe <_dtoa_r+0xa36>
 800ea6a:	9a00      	ldr	r2, [sp, #0]
 800ea6c:	9908      	ldr	r1, [sp, #32]
 800ea6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea72:	428a      	cmp	r2, r1
 800ea74:	d028      	beq.n	800eac8 <_dtoa_r+0xb00>
 800ea76:	9902      	ldr	r1, [sp, #8]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	220a      	movs	r2, #10
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	f000 f91f 	bl	800ecc0 <__multadd>
 800ea82:	42af      	cmp	r7, r5
 800ea84:	9002      	str	r0, [sp, #8]
 800ea86:	f04f 0300 	mov.w	r3, #0
 800ea8a:	f04f 020a 	mov.w	r2, #10
 800ea8e:	4639      	mov	r1, r7
 800ea90:	4648      	mov	r0, r9
 800ea92:	d107      	bne.n	800eaa4 <_dtoa_r+0xadc>
 800ea94:	f000 f914 	bl	800ecc0 <__multadd>
 800ea98:	4607      	mov	r7, r0
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	9b00      	ldr	r3, [sp, #0]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	e777      	b.n	800e994 <_dtoa_r+0x9cc>
 800eaa4:	f000 f90c 	bl	800ecc0 <__multadd>
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	4607      	mov	r7, r0
 800eaac:	2300      	movs	r3, #0
 800eaae:	220a      	movs	r2, #10
 800eab0:	4648      	mov	r0, r9
 800eab2:	f000 f905 	bl	800ecc0 <__multadd>
 800eab6:	4605      	mov	r5, r0
 800eab8:	e7f0      	b.n	800ea9c <_dtoa_r+0xad4>
 800eaba:	f1bb 0f00 	cmp.w	fp, #0
 800eabe:	bfcc      	ite	gt
 800eac0:	465e      	movgt	r6, fp
 800eac2:	2601      	movle	r6, #1
 800eac4:	4456      	add	r6, sl
 800eac6:	2700      	movs	r7, #0
 800eac8:	9902      	ldr	r1, [sp, #8]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	2201      	movs	r2, #1
 800eace:	4648      	mov	r0, r9
 800ead0:	f000 fa9a 	bl	800f008 <__lshift>
 800ead4:	4621      	mov	r1, r4
 800ead6:	9002      	str	r0, [sp, #8]
 800ead8:	f000 fb02 	bl	800f0e0 <__mcmp>
 800eadc:	2800      	cmp	r0, #0
 800eade:	dcb4      	bgt.n	800ea4a <_dtoa_r+0xa82>
 800eae0:	d102      	bne.n	800eae8 <_dtoa_r+0xb20>
 800eae2:	9b00      	ldr	r3, [sp, #0]
 800eae4:	07db      	lsls	r3, r3, #31
 800eae6:	d4b0      	bmi.n	800ea4a <_dtoa_r+0xa82>
 800eae8:	4633      	mov	r3, r6
 800eaea:	461e      	mov	r6, r3
 800eaec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eaf0:	2a30      	cmp	r2, #48	@ 0x30
 800eaf2:	d0fa      	beq.n	800eaea <_dtoa_r+0xb22>
 800eaf4:	e4b5      	b.n	800e462 <_dtoa_r+0x49a>
 800eaf6:	459a      	cmp	sl, r3
 800eaf8:	d1a8      	bne.n	800ea4c <_dtoa_r+0xa84>
 800eafa:	2331      	movs	r3, #49	@ 0x31
 800eafc:	f108 0801 	add.w	r8, r8, #1
 800eb00:	f88a 3000 	strb.w	r3, [sl]
 800eb04:	e4ad      	b.n	800e462 <_dtoa_r+0x49a>
 800eb06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eb64 <_dtoa_r+0xb9c>
 800eb0c:	b11b      	cbz	r3, 800eb16 <_dtoa_r+0xb4e>
 800eb0e:	f10a 0308 	add.w	r3, sl, #8
 800eb12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	4650      	mov	r0, sl
 800eb18:	b017      	add	sp, #92	@ 0x5c
 800eb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb1e:	9b07      	ldr	r3, [sp, #28]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	f77f ae2e 	ble.w	800e782 <_dtoa_r+0x7ba>
 800eb26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb28:	9308      	str	r3, [sp, #32]
 800eb2a:	2001      	movs	r0, #1
 800eb2c:	e64d      	b.n	800e7ca <_dtoa_r+0x802>
 800eb2e:	f1bb 0f00 	cmp.w	fp, #0
 800eb32:	f77f aed9 	ble.w	800e8e8 <_dtoa_r+0x920>
 800eb36:	4656      	mov	r6, sl
 800eb38:	9802      	ldr	r0, [sp, #8]
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	f7ff f9bc 	bl	800deb8 <quorem>
 800eb40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb44:	f806 3b01 	strb.w	r3, [r6], #1
 800eb48:	eba6 020a 	sub.w	r2, r6, sl
 800eb4c:	4593      	cmp	fp, r2
 800eb4e:	ddb4      	ble.n	800eaba <_dtoa_r+0xaf2>
 800eb50:	9902      	ldr	r1, [sp, #8]
 800eb52:	2300      	movs	r3, #0
 800eb54:	220a      	movs	r2, #10
 800eb56:	4648      	mov	r0, r9
 800eb58:	f000 f8b2 	bl	800ecc0 <__multadd>
 800eb5c:	9002      	str	r0, [sp, #8]
 800eb5e:	e7eb      	b.n	800eb38 <_dtoa_r+0xb70>
 800eb60:	08010bcf 	.word	0x08010bcf
 800eb64:	08010b53 	.word	0x08010b53

0800eb68 <_free_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	d041      	beq.n	800ebf4 <_free_r+0x8c>
 800eb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb74:	1f0c      	subs	r4, r1, #4
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfb8      	it	lt
 800eb7a:	18e4      	addlt	r4, r4, r3
 800eb7c:	f7fd ff4a 	bl	800ca14 <__malloc_lock>
 800eb80:	4a1d      	ldr	r2, [pc, #116]	@ (800ebf8 <_free_r+0x90>)
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	b933      	cbnz	r3, 800eb94 <_free_r+0x2c>
 800eb86:	6063      	str	r3, [r4, #4]
 800eb88:	6014      	str	r4, [r2, #0]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb90:	f7fd bf46 	b.w	800ca20 <__malloc_unlock>
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d908      	bls.n	800ebaa <_free_r+0x42>
 800eb98:	6820      	ldr	r0, [r4, #0]
 800eb9a:	1821      	adds	r1, r4, r0
 800eb9c:	428b      	cmp	r3, r1
 800eb9e:	bf01      	itttt	eq
 800eba0:	6819      	ldreq	r1, [r3, #0]
 800eba2:	685b      	ldreq	r3, [r3, #4]
 800eba4:	1809      	addeq	r1, r1, r0
 800eba6:	6021      	streq	r1, [r4, #0]
 800eba8:	e7ed      	b.n	800eb86 <_free_r+0x1e>
 800ebaa:	461a      	mov	r2, r3
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	b10b      	cbz	r3, 800ebb4 <_free_r+0x4c>
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	d9fa      	bls.n	800ebaa <_free_r+0x42>
 800ebb4:	6811      	ldr	r1, [r2, #0]
 800ebb6:	1850      	adds	r0, r2, r1
 800ebb8:	42a0      	cmp	r0, r4
 800ebba:	d10b      	bne.n	800ebd4 <_free_r+0x6c>
 800ebbc:	6820      	ldr	r0, [r4, #0]
 800ebbe:	4401      	add	r1, r0
 800ebc0:	1850      	adds	r0, r2, r1
 800ebc2:	4283      	cmp	r3, r0
 800ebc4:	6011      	str	r1, [r2, #0]
 800ebc6:	d1e0      	bne.n	800eb8a <_free_r+0x22>
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	6053      	str	r3, [r2, #4]
 800ebce:	4408      	add	r0, r1
 800ebd0:	6010      	str	r0, [r2, #0]
 800ebd2:	e7da      	b.n	800eb8a <_free_r+0x22>
 800ebd4:	d902      	bls.n	800ebdc <_free_r+0x74>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	e7d6      	b.n	800eb8a <_free_r+0x22>
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	1821      	adds	r1, r4, r0
 800ebe0:	428b      	cmp	r3, r1
 800ebe2:	bf04      	itt	eq
 800ebe4:	6819      	ldreq	r1, [r3, #0]
 800ebe6:	685b      	ldreq	r3, [r3, #4]
 800ebe8:	6063      	str	r3, [r4, #4]
 800ebea:	bf04      	itt	eq
 800ebec:	1809      	addeq	r1, r1, r0
 800ebee:	6021      	streq	r1, [r4, #0]
 800ebf0:	6054      	str	r4, [r2, #4]
 800ebf2:	e7ca      	b.n	800eb8a <_free_r+0x22>
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20003c88 	.word	0x20003c88

0800ebfc <_Balloc>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	69c6      	ldr	r6, [r0, #28]
 800ec00:	4604      	mov	r4, r0
 800ec02:	460d      	mov	r5, r1
 800ec04:	b976      	cbnz	r6, 800ec24 <_Balloc+0x28>
 800ec06:	2010      	movs	r0, #16
 800ec08:	f7fd fe5a 	bl	800c8c0 <malloc>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	61e0      	str	r0, [r4, #28]
 800ec10:	b920      	cbnz	r0, 800ec1c <_Balloc+0x20>
 800ec12:	4b18      	ldr	r3, [pc, #96]	@ (800ec74 <_Balloc+0x78>)
 800ec14:	4818      	ldr	r0, [pc, #96]	@ (800ec78 <_Balloc+0x7c>)
 800ec16:	216b      	movs	r1, #107	@ 0x6b
 800ec18:	f7fd fe34 	bl	800c884 <__assert_func>
 800ec1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec20:	6006      	str	r6, [r0, #0]
 800ec22:	60c6      	str	r6, [r0, #12]
 800ec24:	69e6      	ldr	r6, [r4, #28]
 800ec26:	68f3      	ldr	r3, [r6, #12]
 800ec28:	b183      	cbz	r3, 800ec4c <_Balloc+0x50>
 800ec2a:	69e3      	ldr	r3, [r4, #28]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec32:	b9b8      	cbnz	r0, 800ec64 <_Balloc+0x68>
 800ec34:	2101      	movs	r1, #1
 800ec36:	fa01 f605 	lsl.w	r6, r1, r5
 800ec3a:	1d72      	adds	r2, r6, #5
 800ec3c:	0092      	lsls	r2, r2, #2
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f001 f936 	bl	800feb0 <_calloc_r>
 800ec44:	b160      	cbz	r0, 800ec60 <_Balloc+0x64>
 800ec46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec4a:	e00e      	b.n	800ec6a <_Balloc+0x6e>
 800ec4c:	2221      	movs	r2, #33	@ 0x21
 800ec4e:	2104      	movs	r1, #4
 800ec50:	4620      	mov	r0, r4
 800ec52:	f001 f92d 	bl	800feb0 <_calloc_r>
 800ec56:	69e3      	ldr	r3, [r4, #28]
 800ec58:	60f0      	str	r0, [r6, #12]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1e4      	bne.n	800ec2a <_Balloc+0x2e>
 800ec60:	2000      	movs	r0, #0
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	6802      	ldr	r2, [r0, #0]
 800ec66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec70:	e7f7      	b.n	800ec62 <_Balloc+0x66>
 800ec72:	bf00      	nop
 800ec74:	08010b60 	.word	0x08010b60
 800ec78:	08010be0 	.word	0x08010be0

0800ec7c <_Bfree>:
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	69c6      	ldr	r6, [r0, #28]
 800ec80:	4605      	mov	r5, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	b976      	cbnz	r6, 800eca4 <_Bfree+0x28>
 800ec86:	2010      	movs	r0, #16
 800ec88:	f7fd fe1a 	bl	800c8c0 <malloc>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	61e8      	str	r0, [r5, #28]
 800ec90:	b920      	cbnz	r0, 800ec9c <_Bfree+0x20>
 800ec92:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <_Bfree+0x3c>)
 800ec94:	4809      	ldr	r0, [pc, #36]	@ (800ecbc <_Bfree+0x40>)
 800ec96:	218f      	movs	r1, #143	@ 0x8f
 800ec98:	f7fd fdf4 	bl	800c884 <__assert_func>
 800ec9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eca0:	6006      	str	r6, [r0, #0]
 800eca2:	60c6      	str	r6, [r0, #12]
 800eca4:	b13c      	cbz	r4, 800ecb6 <_Bfree+0x3a>
 800eca6:	69eb      	ldr	r3, [r5, #28]
 800eca8:	6862      	ldr	r2, [r4, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecb0:	6021      	str	r1, [r4, #0]
 800ecb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	08010b60 	.word	0x08010b60
 800ecbc:	08010be0 	.word	0x08010be0

0800ecc0 <__multadd>:
 800ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc4:	690d      	ldr	r5, [r1, #16]
 800ecc6:	4607      	mov	r7, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	461e      	mov	r6, r3
 800eccc:	f101 0c14 	add.w	ip, r1, #20
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f8dc 3000 	ldr.w	r3, [ip]
 800ecd6:	b299      	uxth	r1, r3
 800ecd8:	fb02 6101 	mla	r1, r2, r1, r6
 800ecdc:	0c1e      	lsrs	r6, r3, #16
 800ecde:	0c0b      	lsrs	r3, r1, #16
 800ece0:	fb02 3306 	mla	r3, r2, r6, r3
 800ece4:	b289      	uxth	r1, r1
 800ece6:	3001      	adds	r0, #1
 800ece8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecec:	4285      	cmp	r5, r0
 800ecee:	f84c 1b04 	str.w	r1, [ip], #4
 800ecf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecf6:	dcec      	bgt.n	800ecd2 <__multadd+0x12>
 800ecf8:	b30e      	cbz	r6, 800ed3e <__multadd+0x7e>
 800ecfa:	68a3      	ldr	r3, [r4, #8]
 800ecfc:	42ab      	cmp	r3, r5
 800ecfe:	dc19      	bgt.n	800ed34 <__multadd+0x74>
 800ed00:	6861      	ldr	r1, [r4, #4]
 800ed02:	4638      	mov	r0, r7
 800ed04:	3101      	adds	r1, #1
 800ed06:	f7ff ff79 	bl	800ebfc <_Balloc>
 800ed0a:	4680      	mov	r8, r0
 800ed0c:	b928      	cbnz	r0, 800ed1a <__multadd+0x5a>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	4b0c      	ldr	r3, [pc, #48]	@ (800ed44 <__multadd+0x84>)
 800ed12:	480d      	ldr	r0, [pc, #52]	@ (800ed48 <__multadd+0x88>)
 800ed14:	21ba      	movs	r1, #186	@ 0xba
 800ed16:	f7fd fdb5 	bl	800c884 <__assert_func>
 800ed1a:	6922      	ldr	r2, [r4, #16]
 800ed1c:	3202      	adds	r2, #2
 800ed1e:	f104 010c 	add.w	r1, r4, #12
 800ed22:	0092      	lsls	r2, r2, #2
 800ed24:	300c      	adds	r0, #12
 800ed26:	f7ff f8b2 	bl	800de8e <memcpy>
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7ff ffa5 	bl	800ec7c <_Bfree>
 800ed32:	4644      	mov	r4, r8
 800ed34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed38:	3501      	adds	r5, #1
 800ed3a:	615e      	str	r6, [r3, #20]
 800ed3c:	6125      	str	r5, [r4, #16]
 800ed3e:	4620      	mov	r0, r4
 800ed40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed44:	08010bcf 	.word	0x08010bcf
 800ed48:	08010be0 	.word	0x08010be0

0800ed4c <__hi0bits>:
 800ed4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ed50:	4603      	mov	r3, r0
 800ed52:	bf36      	itet	cc
 800ed54:	0403      	lslcc	r3, r0, #16
 800ed56:	2000      	movcs	r0, #0
 800ed58:	2010      	movcc	r0, #16
 800ed5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed5e:	bf3c      	itt	cc
 800ed60:	021b      	lslcc	r3, r3, #8
 800ed62:	3008      	addcc	r0, #8
 800ed64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed68:	bf3c      	itt	cc
 800ed6a:	011b      	lslcc	r3, r3, #4
 800ed6c:	3004      	addcc	r0, #4
 800ed6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed72:	bf3c      	itt	cc
 800ed74:	009b      	lslcc	r3, r3, #2
 800ed76:	3002      	addcc	r0, #2
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	db05      	blt.n	800ed88 <__hi0bits+0x3c>
 800ed7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed80:	f100 0001 	add.w	r0, r0, #1
 800ed84:	bf08      	it	eq
 800ed86:	2020      	moveq	r0, #32
 800ed88:	4770      	bx	lr

0800ed8a <__lo0bits>:
 800ed8a:	6803      	ldr	r3, [r0, #0]
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	f013 0007 	ands.w	r0, r3, #7
 800ed92:	d00b      	beq.n	800edac <__lo0bits+0x22>
 800ed94:	07d9      	lsls	r1, r3, #31
 800ed96:	d421      	bmi.n	800eddc <__lo0bits+0x52>
 800ed98:	0798      	lsls	r0, r3, #30
 800ed9a:	bf49      	itett	mi
 800ed9c:	085b      	lsrmi	r3, r3, #1
 800ed9e:	089b      	lsrpl	r3, r3, #2
 800eda0:	2001      	movmi	r0, #1
 800eda2:	6013      	strmi	r3, [r2, #0]
 800eda4:	bf5c      	itt	pl
 800eda6:	6013      	strpl	r3, [r2, #0]
 800eda8:	2002      	movpl	r0, #2
 800edaa:	4770      	bx	lr
 800edac:	b299      	uxth	r1, r3
 800edae:	b909      	cbnz	r1, 800edb4 <__lo0bits+0x2a>
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	2010      	movs	r0, #16
 800edb4:	b2d9      	uxtb	r1, r3
 800edb6:	b909      	cbnz	r1, 800edbc <__lo0bits+0x32>
 800edb8:	3008      	adds	r0, #8
 800edba:	0a1b      	lsrs	r3, r3, #8
 800edbc:	0719      	lsls	r1, r3, #28
 800edbe:	bf04      	itt	eq
 800edc0:	091b      	lsreq	r3, r3, #4
 800edc2:	3004      	addeq	r0, #4
 800edc4:	0799      	lsls	r1, r3, #30
 800edc6:	bf04      	itt	eq
 800edc8:	089b      	lsreq	r3, r3, #2
 800edca:	3002      	addeq	r0, #2
 800edcc:	07d9      	lsls	r1, r3, #31
 800edce:	d403      	bmi.n	800edd8 <__lo0bits+0x4e>
 800edd0:	085b      	lsrs	r3, r3, #1
 800edd2:	f100 0001 	add.w	r0, r0, #1
 800edd6:	d003      	beq.n	800ede0 <__lo0bits+0x56>
 800edd8:	6013      	str	r3, [r2, #0]
 800edda:	4770      	bx	lr
 800eddc:	2000      	movs	r0, #0
 800edde:	4770      	bx	lr
 800ede0:	2020      	movs	r0, #32
 800ede2:	4770      	bx	lr

0800ede4 <__i2b>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	460c      	mov	r4, r1
 800ede8:	2101      	movs	r1, #1
 800edea:	f7ff ff07 	bl	800ebfc <_Balloc>
 800edee:	4602      	mov	r2, r0
 800edf0:	b928      	cbnz	r0, 800edfe <__i2b+0x1a>
 800edf2:	4b05      	ldr	r3, [pc, #20]	@ (800ee08 <__i2b+0x24>)
 800edf4:	4805      	ldr	r0, [pc, #20]	@ (800ee0c <__i2b+0x28>)
 800edf6:	f240 1145 	movw	r1, #325	@ 0x145
 800edfa:	f7fd fd43 	bl	800c884 <__assert_func>
 800edfe:	2301      	movs	r3, #1
 800ee00:	6144      	str	r4, [r0, #20]
 800ee02:	6103      	str	r3, [r0, #16]
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	bf00      	nop
 800ee08:	08010bcf 	.word	0x08010bcf
 800ee0c:	08010be0 	.word	0x08010be0

0800ee10 <__multiply>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	4617      	mov	r7, r2
 800ee16:	690a      	ldr	r2, [r1, #16]
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	bfa8      	it	ge
 800ee1e:	463b      	movge	r3, r7
 800ee20:	4689      	mov	r9, r1
 800ee22:	bfa4      	itt	ge
 800ee24:	460f      	movge	r7, r1
 800ee26:	4699      	movge	r9, r3
 800ee28:	693d      	ldr	r5, [r7, #16]
 800ee2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	6879      	ldr	r1, [r7, #4]
 800ee32:	eb05 060a 	add.w	r6, r5, sl
 800ee36:	42b3      	cmp	r3, r6
 800ee38:	b085      	sub	sp, #20
 800ee3a:	bfb8      	it	lt
 800ee3c:	3101      	addlt	r1, #1
 800ee3e:	f7ff fedd 	bl	800ebfc <_Balloc>
 800ee42:	b930      	cbnz	r0, 800ee52 <__multiply+0x42>
 800ee44:	4602      	mov	r2, r0
 800ee46:	4b41      	ldr	r3, [pc, #260]	@ (800ef4c <__multiply+0x13c>)
 800ee48:	4841      	ldr	r0, [pc, #260]	@ (800ef50 <__multiply+0x140>)
 800ee4a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ee4e:	f7fd fd19 	bl	800c884 <__assert_func>
 800ee52:	f100 0414 	add.w	r4, r0, #20
 800ee56:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ee5a:	4623      	mov	r3, r4
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4573      	cmp	r3, lr
 800ee60:	d320      	bcc.n	800eea4 <__multiply+0x94>
 800ee62:	f107 0814 	add.w	r8, r7, #20
 800ee66:	f109 0114 	add.w	r1, r9, #20
 800ee6a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ee6e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ee72:	9302      	str	r3, [sp, #8]
 800ee74:	1beb      	subs	r3, r5, r7
 800ee76:	3b15      	subs	r3, #21
 800ee78:	f023 0303 	bic.w	r3, r3, #3
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	3715      	adds	r7, #21
 800ee80:	42bd      	cmp	r5, r7
 800ee82:	bf38      	it	cc
 800ee84:	2304      	movcc	r3, #4
 800ee86:	9301      	str	r3, [sp, #4]
 800ee88:	9b02      	ldr	r3, [sp, #8]
 800ee8a:	9103      	str	r1, [sp, #12]
 800ee8c:	428b      	cmp	r3, r1
 800ee8e:	d80c      	bhi.n	800eeaa <__multiply+0x9a>
 800ee90:	2e00      	cmp	r6, #0
 800ee92:	dd03      	ble.n	800ee9c <__multiply+0x8c>
 800ee94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d055      	beq.n	800ef48 <__multiply+0x138>
 800ee9c:	6106      	str	r6, [r0, #16]
 800ee9e:	b005      	add	sp, #20
 800eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea4:	f843 2b04 	str.w	r2, [r3], #4
 800eea8:	e7d9      	b.n	800ee5e <__multiply+0x4e>
 800eeaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800eeae:	f1ba 0f00 	cmp.w	sl, #0
 800eeb2:	d01f      	beq.n	800eef4 <__multiply+0xe4>
 800eeb4:	46c4      	mov	ip, r8
 800eeb6:	46a1      	mov	r9, r4
 800eeb8:	2700      	movs	r7, #0
 800eeba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eebe:	f8d9 3000 	ldr.w	r3, [r9]
 800eec2:	fa1f fb82 	uxth.w	fp, r2
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	fb0a 330b 	mla	r3, sl, fp, r3
 800eecc:	443b      	add	r3, r7
 800eece:	f8d9 7000 	ldr.w	r7, [r9]
 800eed2:	0c12      	lsrs	r2, r2, #16
 800eed4:	0c3f      	lsrs	r7, r7, #16
 800eed6:	fb0a 7202 	mla	r2, sl, r2, r7
 800eeda:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eede:	b29b      	uxth	r3, r3
 800eee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eee4:	4565      	cmp	r5, ip
 800eee6:	f849 3b04 	str.w	r3, [r9], #4
 800eeea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eeee:	d8e4      	bhi.n	800eeba <__multiply+0xaa>
 800eef0:	9b01      	ldr	r3, [sp, #4]
 800eef2:	50e7      	str	r7, [r4, r3]
 800eef4:	9b03      	ldr	r3, [sp, #12]
 800eef6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eefa:	3104      	adds	r1, #4
 800eefc:	f1b9 0f00 	cmp.w	r9, #0
 800ef00:	d020      	beq.n	800ef44 <__multiply+0x134>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	4647      	mov	r7, r8
 800ef06:	46a4      	mov	ip, r4
 800ef08:	f04f 0a00 	mov.w	sl, #0
 800ef0c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ef10:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ef14:	fb09 220b 	mla	r2, r9, fp, r2
 800ef18:	4452      	add	r2, sl
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef20:	f84c 3b04 	str.w	r3, [ip], #4
 800ef24:	f857 3b04 	ldr.w	r3, [r7], #4
 800ef28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef2c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ef30:	fb09 330a 	mla	r3, r9, sl, r3
 800ef34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ef38:	42bd      	cmp	r5, r7
 800ef3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef3e:	d8e5      	bhi.n	800ef0c <__multiply+0xfc>
 800ef40:	9a01      	ldr	r2, [sp, #4]
 800ef42:	50a3      	str	r3, [r4, r2]
 800ef44:	3404      	adds	r4, #4
 800ef46:	e79f      	b.n	800ee88 <__multiply+0x78>
 800ef48:	3e01      	subs	r6, #1
 800ef4a:	e7a1      	b.n	800ee90 <__multiply+0x80>
 800ef4c:	08010bcf 	.word	0x08010bcf
 800ef50:	08010be0 	.word	0x08010be0

0800ef54 <__pow5mult>:
 800ef54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef58:	4615      	mov	r5, r2
 800ef5a:	f012 0203 	ands.w	r2, r2, #3
 800ef5e:	4607      	mov	r7, r0
 800ef60:	460e      	mov	r6, r1
 800ef62:	d007      	beq.n	800ef74 <__pow5mult+0x20>
 800ef64:	4c25      	ldr	r4, [pc, #148]	@ (800effc <__pow5mult+0xa8>)
 800ef66:	3a01      	subs	r2, #1
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef6e:	f7ff fea7 	bl	800ecc0 <__multadd>
 800ef72:	4606      	mov	r6, r0
 800ef74:	10ad      	asrs	r5, r5, #2
 800ef76:	d03d      	beq.n	800eff4 <__pow5mult+0xa0>
 800ef78:	69fc      	ldr	r4, [r7, #28]
 800ef7a:	b97c      	cbnz	r4, 800ef9c <__pow5mult+0x48>
 800ef7c:	2010      	movs	r0, #16
 800ef7e:	f7fd fc9f 	bl	800c8c0 <malloc>
 800ef82:	4602      	mov	r2, r0
 800ef84:	61f8      	str	r0, [r7, #28]
 800ef86:	b928      	cbnz	r0, 800ef94 <__pow5mult+0x40>
 800ef88:	4b1d      	ldr	r3, [pc, #116]	@ (800f000 <__pow5mult+0xac>)
 800ef8a:	481e      	ldr	r0, [pc, #120]	@ (800f004 <__pow5mult+0xb0>)
 800ef8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ef90:	f7fd fc78 	bl	800c884 <__assert_func>
 800ef94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef98:	6004      	str	r4, [r0, #0]
 800ef9a:	60c4      	str	r4, [r0, #12]
 800ef9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800efa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efa4:	b94c      	cbnz	r4, 800efba <__pow5mult+0x66>
 800efa6:	f240 2171 	movw	r1, #625	@ 0x271
 800efaa:	4638      	mov	r0, r7
 800efac:	f7ff ff1a 	bl	800ede4 <__i2b>
 800efb0:	2300      	movs	r3, #0
 800efb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800efb6:	4604      	mov	r4, r0
 800efb8:	6003      	str	r3, [r0, #0]
 800efba:	f04f 0900 	mov.w	r9, #0
 800efbe:	07eb      	lsls	r3, r5, #31
 800efc0:	d50a      	bpl.n	800efd8 <__pow5mult+0x84>
 800efc2:	4631      	mov	r1, r6
 800efc4:	4622      	mov	r2, r4
 800efc6:	4638      	mov	r0, r7
 800efc8:	f7ff ff22 	bl	800ee10 <__multiply>
 800efcc:	4631      	mov	r1, r6
 800efce:	4680      	mov	r8, r0
 800efd0:	4638      	mov	r0, r7
 800efd2:	f7ff fe53 	bl	800ec7c <_Bfree>
 800efd6:	4646      	mov	r6, r8
 800efd8:	106d      	asrs	r5, r5, #1
 800efda:	d00b      	beq.n	800eff4 <__pow5mult+0xa0>
 800efdc:	6820      	ldr	r0, [r4, #0]
 800efde:	b938      	cbnz	r0, 800eff0 <__pow5mult+0x9c>
 800efe0:	4622      	mov	r2, r4
 800efe2:	4621      	mov	r1, r4
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7ff ff13 	bl	800ee10 <__multiply>
 800efea:	6020      	str	r0, [r4, #0]
 800efec:	f8c0 9000 	str.w	r9, [r0]
 800eff0:	4604      	mov	r4, r0
 800eff2:	e7e4      	b.n	800efbe <__pow5mult+0x6a>
 800eff4:	4630      	mov	r0, r6
 800eff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effa:	bf00      	nop
 800effc:	08010d60 	.word	0x08010d60
 800f000:	08010b60 	.word	0x08010b60
 800f004:	08010be0 	.word	0x08010be0

0800f008 <__lshift>:
 800f008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f00c:	460c      	mov	r4, r1
 800f00e:	6849      	ldr	r1, [r1, #4]
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f016:	68a3      	ldr	r3, [r4, #8]
 800f018:	4607      	mov	r7, r0
 800f01a:	4691      	mov	r9, r2
 800f01c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f020:	f108 0601 	add.w	r6, r8, #1
 800f024:	42b3      	cmp	r3, r6
 800f026:	db0b      	blt.n	800f040 <__lshift+0x38>
 800f028:	4638      	mov	r0, r7
 800f02a:	f7ff fde7 	bl	800ebfc <_Balloc>
 800f02e:	4605      	mov	r5, r0
 800f030:	b948      	cbnz	r0, 800f046 <__lshift+0x3e>
 800f032:	4602      	mov	r2, r0
 800f034:	4b28      	ldr	r3, [pc, #160]	@ (800f0d8 <__lshift+0xd0>)
 800f036:	4829      	ldr	r0, [pc, #164]	@ (800f0dc <__lshift+0xd4>)
 800f038:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f03c:	f7fd fc22 	bl	800c884 <__assert_func>
 800f040:	3101      	adds	r1, #1
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	e7ee      	b.n	800f024 <__lshift+0x1c>
 800f046:	2300      	movs	r3, #0
 800f048:	f100 0114 	add.w	r1, r0, #20
 800f04c:	f100 0210 	add.w	r2, r0, #16
 800f050:	4618      	mov	r0, r3
 800f052:	4553      	cmp	r3, sl
 800f054:	db33      	blt.n	800f0be <__lshift+0xb6>
 800f056:	6920      	ldr	r0, [r4, #16]
 800f058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f05c:	f104 0314 	add.w	r3, r4, #20
 800f060:	f019 091f 	ands.w	r9, r9, #31
 800f064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f068:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f06c:	d02b      	beq.n	800f0c6 <__lshift+0xbe>
 800f06e:	f1c9 0e20 	rsb	lr, r9, #32
 800f072:	468a      	mov	sl, r1
 800f074:	2200      	movs	r2, #0
 800f076:	6818      	ldr	r0, [r3, #0]
 800f078:	fa00 f009 	lsl.w	r0, r0, r9
 800f07c:	4310      	orrs	r0, r2
 800f07e:	f84a 0b04 	str.w	r0, [sl], #4
 800f082:	f853 2b04 	ldr.w	r2, [r3], #4
 800f086:	459c      	cmp	ip, r3
 800f088:	fa22 f20e 	lsr.w	r2, r2, lr
 800f08c:	d8f3      	bhi.n	800f076 <__lshift+0x6e>
 800f08e:	ebac 0304 	sub.w	r3, ip, r4
 800f092:	3b15      	subs	r3, #21
 800f094:	f023 0303 	bic.w	r3, r3, #3
 800f098:	3304      	adds	r3, #4
 800f09a:	f104 0015 	add.w	r0, r4, #21
 800f09e:	4560      	cmp	r0, ip
 800f0a0:	bf88      	it	hi
 800f0a2:	2304      	movhi	r3, #4
 800f0a4:	50ca      	str	r2, [r1, r3]
 800f0a6:	b10a      	cbz	r2, 800f0ac <__lshift+0xa4>
 800f0a8:	f108 0602 	add.w	r6, r8, #2
 800f0ac:	3e01      	subs	r6, #1
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	612e      	str	r6, [r5, #16]
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	f7ff fde2 	bl	800ec7c <_Bfree>
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0be:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	e7c5      	b.n	800f052 <__lshift+0x4a>
 800f0c6:	3904      	subs	r1, #4
 800f0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0d0:	459c      	cmp	ip, r3
 800f0d2:	d8f9      	bhi.n	800f0c8 <__lshift+0xc0>
 800f0d4:	e7ea      	b.n	800f0ac <__lshift+0xa4>
 800f0d6:	bf00      	nop
 800f0d8:	08010bcf 	.word	0x08010bcf
 800f0dc:	08010be0 	.word	0x08010be0

0800f0e0 <__mcmp>:
 800f0e0:	690a      	ldr	r2, [r1, #16]
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	6900      	ldr	r0, [r0, #16]
 800f0e6:	1a80      	subs	r0, r0, r2
 800f0e8:	b530      	push	{r4, r5, lr}
 800f0ea:	d10e      	bne.n	800f10a <__mcmp+0x2a>
 800f0ec:	3314      	adds	r3, #20
 800f0ee:	3114      	adds	r1, #20
 800f0f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f0f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f0f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f0fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f100:	4295      	cmp	r5, r2
 800f102:	d003      	beq.n	800f10c <__mcmp+0x2c>
 800f104:	d205      	bcs.n	800f112 <__mcmp+0x32>
 800f106:	f04f 30ff 	mov.w	r0, #4294967295
 800f10a:	bd30      	pop	{r4, r5, pc}
 800f10c:	42a3      	cmp	r3, r4
 800f10e:	d3f3      	bcc.n	800f0f8 <__mcmp+0x18>
 800f110:	e7fb      	b.n	800f10a <__mcmp+0x2a>
 800f112:	2001      	movs	r0, #1
 800f114:	e7f9      	b.n	800f10a <__mcmp+0x2a>
	...

0800f118 <__mdiff>:
 800f118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	4689      	mov	r9, r1
 800f11e:	4606      	mov	r6, r0
 800f120:	4611      	mov	r1, r2
 800f122:	4648      	mov	r0, r9
 800f124:	4614      	mov	r4, r2
 800f126:	f7ff ffdb 	bl	800f0e0 <__mcmp>
 800f12a:	1e05      	subs	r5, r0, #0
 800f12c:	d112      	bne.n	800f154 <__mdiff+0x3c>
 800f12e:	4629      	mov	r1, r5
 800f130:	4630      	mov	r0, r6
 800f132:	f7ff fd63 	bl	800ebfc <_Balloc>
 800f136:	4602      	mov	r2, r0
 800f138:	b928      	cbnz	r0, 800f146 <__mdiff+0x2e>
 800f13a:	4b3f      	ldr	r3, [pc, #252]	@ (800f238 <__mdiff+0x120>)
 800f13c:	f240 2137 	movw	r1, #567	@ 0x237
 800f140:	483e      	ldr	r0, [pc, #248]	@ (800f23c <__mdiff+0x124>)
 800f142:	f7fd fb9f 	bl	800c884 <__assert_func>
 800f146:	2301      	movs	r3, #1
 800f148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f14c:	4610      	mov	r0, r2
 800f14e:	b003      	add	sp, #12
 800f150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f154:	bfbc      	itt	lt
 800f156:	464b      	movlt	r3, r9
 800f158:	46a1      	movlt	r9, r4
 800f15a:	4630      	mov	r0, r6
 800f15c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f160:	bfba      	itte	lt
 800f162:	461c      	movlt	r4, r3
 800f164:	2501      	movlt	r5, #1
 800f166:	2500      	movge	r5, #0
 800f168:	f7ff fd48 	bl	800ebfc <_Balloc>
 800f16c:	4602      	mov	r2, r0
 800f16e:	b918      	cbnz	r0, 800f178 <__mdiff+0x60>
 800f170:	4b31      	ldr	r3, [pc, #196]	@ (800f238 <__mdiff+0x120>)
 800f172:	f240 2145 	movw	r1, #581	@ 0x245
 800f176:	e7e3      	b.n	800f140 <__mdiff+0x28>
 800f178:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f17c:	6926      	ldr	r6, [r4, #16]
 800f17e:	60c5      	str	r5, [r0, #12]
 800f180:	f109 0310 	add.w	r3, r9, #16
 800f184:	f109 0514 	add.w	r5, r9, #20
 800f188:	f104 0e14 	add.w	lr, r4, #20
 800f18c:	f100 0b14 	add.w	fp, r0, #20
 800f190:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f194:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f198:	9301      	str	r3, [sp, #4]
 800f19a:	46d9      	mov	r9, fp
 800f19c:	f04f 0c00 	mov.w	ip, #0
 800f1a0:	9b01      	ldr	r3, [sp, #4]
 800f1a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f1a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f1aa:	9301      	str	r3, [sp, #4]
 800f1ac:	fa1f f38a 	uxth.w	r3, sl
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	b283      	uxth	r3, r0
 800f1b4:	1acb      	subs	r3, r1, r3
 800f1b6:	0c00      	lsrs	r0, r0, #16
 800f1b8:	4463      	add	r3, ip
 800f1ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f1be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f1c8:	4576      	cmp	r6, lr
 800f1ca:	f849 3b04 	str.w	r3, [r9], #4
 800f1ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1d2:	d8e5      	bhi.n	800f1a0 <__mdiff+0x88>
 800f1d4:	1b33      	subs	r3, r6, r4
 800f1d6:	3b15      	subs	r3, #21
 800f1d8:	f023 0303 	bic.w	r3, r3, #3
 800f1dc:	3415      	adds	r4, #21
 800f1de:	3304      	adds	r3, #4
 800f1e0:	42a6      	cmp	r6, r4
 800f1e2:	bf38      	it	cc
 800f1e4:	2304      	movcc	r3, #4
 800f1e6:	441d      	add	r5, r3
 800f1e8:	445b      	add	r3, fp
 800f1ea:	461e      	mov	r6, r3
 800f1ec:	462c      	mov	r4, r5
 800f1ee:	4544      	cmp	r4, r8
 800f1f0:	d30e      	bcc.n	800f210 <__mdiff+0xf8>
 800f1f2:	f108 0103 	add.w	r1, r8, #3
 800f1f6:	1b49      	subs	r1, r1, r5
 800f1f8:	f021 0103 	bic.w	r1, r1, #3
 800f1fc:	3d03      	subs	r5, #3
 800f1fe:	45a8      	cmp	r8, r5
 800f200:	bf38      	it	cc
 800f202:	2100      	movcc	r1, #0
 800f204:	440b      	add	r3, r1
 800f206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f20a:	b191      	cbz	r1, 800f232 <__mdiff+0x11a>
 800f20c:	6117      	str	r7, [r2, #16]
 800f20e:	e79d      	b.n	800f14c <__mdiff+0x34>
 800f210:	f854 1b04 	ldr.w	r1, [r4], #4
 800f214:	46e6      	mov	lr, ip
 800f216:	0c08      	lsrs	r0, r1, #16
 800f218:	fa1c fc81 	uxtah	ip, ip, r1
 800f21c:	4471      	add	r1, lr
 800f21e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f222:	b289      	uxth	r1, r1
 800f224:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f228:	f846 1b04 	str.w	r1, [r6], #4
 800f22c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f230:	e7dd      	b.n	800f1ee <__mdiff+0xd6>
 800f232:	3f01      	subs	r7, #1
 800f234:	e7e7      	b.n	800f206 <__mdiff+0xee>
 800f236:	bf00      	nop
 800f238:	08010bcf 	.word	0x08010bcf
 800f23c:	08010be0 	.word	0x08010be0

0800f240 <__d2b>:
 800f240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f244:	460f      	mov	r7, r1
 800f246:	2101      	movs	r1, #1
 800f248:	ec59 8b10 	vmov	r8, r9, d0
 800f24c:	4616      	mov	r6, r2
 800f24e:	f7ff fcd5 	bl	800ebfc <_Balloc>
 800f252:	4604      	mov	r4, r0
 800f254:	b930      	cbnz	r0, 800f264 <__d2b+0x24>
 800f256:	4602      	mov	r2, r0
 800f258:	4b23      	ldr	r3, [pc, #140]	@ (800f2e8 <__d2b+0xa8>)
 800f25a:	4824      	ldr	r0, [pc, #144]	@ (800f2ec <__d2b+0xac>)
 800f25c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f260:	f7fd fb10 	bl	800c884 <__assert_func>
 800f264:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f26c:	b10d      	cbz	r5, 800f272 <__d2b+0x32>
 800f26e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	f1b8 0300 	subs.w	r3, r8, #0
 800f278:	d023      	beq.n	800f2c2 <__d2b+0x82>
 800f27a:	4668      	mov	r0, sp
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	f7ff fd84 	bl	800ed8a <__lo0bits>
 800f282:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f286:	b1d0      	cbz	r0, 800f2be <__d2b+0x7e>
 800f288:	f1c0 0320 	rsb	r3, r0, #32
 800f28c:	fa02 f303 	lsl.w	r3, r2, r3
 800f290:	430b      	orrs	r3, r1
 800f292:	40c2      	lsrs	r2, r0
 800f294:	6163      	str	r3, [r4, #20]
 800f296:	9201      	str	r2, [sp, #4]
 800f298:	9b01      	ldr	r3, [sp, #4]
 800f29a:	61a3      	str	r3, [r4, #24]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	bf0c      	ite	eq
 800f2a0:	2201      	moveq	r2, #1
 800f2a2:	2202      	movne	r2, #2
 800f2a4:	6122      	str	r2, [r4, #16]
 800f2a6:	b1a5      	cbz	r5, 800f2d2 <__d2b+0x92>
 800f2a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f2ac:	4405      	add	r5, r0
 800f2ae:	603d      	str	r5, [r7, #0]
 800f2b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f2b4:	6030      	str	r0, [r6, #0]
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	b003      	add	sp, #12
 800f2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2be:	6161      	str	r1, [r4, #20]
 800f2c0:	e7ea      	b.n	800f298 <__d2b+0x58>
 800f2c2:	a801      	add	r0, sp, #4
 800f2c4:	f7ff fd61 	bl	800ed8a <__lo0bits>
 800f2c8:	9b01      	ldr	r3, [sp, #4]
 800f2ca:	6163      	str	r3, [r4, #20]
 800f2cc:	3020      	adds	r0, #32
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	e7e8      	b.n	800f2a4 <__d2b+0x64>
 800f2d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f2d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f2da:	6038      	str	r0, [r7, #0]
 800f2dc:	6918      	ldr	r0, [r3, #16]
 800f2de:	f7ff fd35 	bl	800ed4c <__hi0bits>
 800f2e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f2e6:	e7e5      	b.n	800f2b4 <__d2b+0x74>
 800f2e8:	08010bcf 	.word	0x08010bcf
 800f2ec:	08010be0 	.word	0x08010be0

0800f2f0 <_realloc_r>:
 800f2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f4:	4607      	mov	r7, r0
 800f2f6:	4614      	mov	r4, r2
 800f2f8:	460d      	mov	r5, r1
 800f2fa:	b921      	cbnz	r1, 800f306 <_realloc_r+0x16>
 800f2fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f300:	4611      	mov	r1, r2
 800f302:	f7fd bb07 	b.w	800c914 <_malloc_r>
 800f306:	b92a      	cbnz	r2, 800f314 <_realloc_r+0x24>
 800f308:	f7ff fc2e 	bl	800eb68 <_free_r>
 800f30c:	4625      	mov	r5, r4
 800f30e:	4628      	mov	r0, r5
 800f310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f314:	f000 fdf2 	bl	800fefc <_malloc_usable_size_r>
 800f318:	4284      	cmp	r4, r0
 800f31a:	4606      	mov	r6, r0
 800f31c:	d802      	bhi.n	800f324 <_realloc_r+0x34>
 800f31e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f322:	d8f4      	bhi.n	800f30e <_realloc_r+0x1e>
 800f324:	4621      	mov	r1, r4
 800f326:	4638      	mov	r0, r7
 800f328:	f7fd faf4 	bl	800c914 <_malloc_r>
 800f32c:	4680      	mov	r8, r0
 800f32e:	b908      	cbnz	r0, 800f334 <_realloc_r+0x44>
 800f330:	4645      	mov	r5, r8
 800f332:	e7ec      	b.n	800f30e <_realloc_r+0x1e>
 800f334:	42b4      	cmp	r4, r6
 800f336:	4622      	mov	r2, r4
 800f338:	4629      	mov	r1, r5
 800f33a:	bf28      	it	cs
 800f33c:	4632      	movcs	r2, r6
 800f33e:	f7fe fda6 	bl	800de8e <memcpy>
 800f342:	4629      	mov	r1, r5
 800f344:	4638      	mov	r0, r7
 800f346:	f7ff fc0f 	bl	800eb68 <_free_r>
 800f34a:	e7f1      	b.n	800f330 <_realloc_r+0x40>

0800f34c <__ssputs_r>:
 800f34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f350:	688e      	ldr	r6, [r1, #8]
 800f352:	461f      	mov	r7, r3
 800f354:	42be      	cmp	r6, r7
 800f356:	680b      	ldr	r3, [r1, #0]
 800f358:	4682      	mov	sl, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	4690      	mov	r8, r2
 800f35e:	d82d      	bhi.n	800f3bc <__ssputs_r+0x70>
 800f360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f368:	d026      	beq.n	800f3b8 <__ssputs_r+0x6c>
 800f36a:	6965      	ldr	r5, [r4, #20]
 800f36c:	6909      	ldr	r1, [r1, #16]
 800f36e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f372:	eba3 0901 	sub.w	r9, r3, r1
 800f376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f37a:	1c7b      	adds	r3, r7, #1
 800f37c:	444b      	add	r3, r9
 800f37e:	106d      	asrs	r5, r5, #1
 800f380:	429d      	cmp	r5, r3
 800f382:	bf38      	it	cc
 800f384:	461d      	movcc	r5, r3
 800f386:	0553      	lsls	r3, r2, #21
 800f388:	d527      	bpl.n	800f3da <__ssputs_r+0x8e>
 800f38a:	4629      	mov	r1, r5
 800f38c:	f7fd fac2 	bl	800c914 <_malloc_r>
 800f390:	4606      	mov	r6, r0
 800f392:	b360      	cbz	r0, 800f3ee <__ssputs_r+0xa2>
 800f394:	6921      	ldr	r1, [r4, #16]
 800f396:	464a      	mov	r2, r9
 800f398:	f7fe fd79 	bl	800de8e <memcpy>
 800f39c:	89a3      	ldrh	r3, [r4, #12]
 800f39e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	6126      	str	r6, [r4, #16]
 800f3aa:	6165      	str	r5, [r4, #20]
 800f3ac:	444e      	add	r6, r9
 800f3ae:	eba5 0509 	sub.w	r5, r5, r9
 800f3b2:	6026      	str	r6, [r4, #0]
 800f3b4:	60a5      	str	r5, [r4, #8]
 800f3b6:	463e      	mov	r6, r7
 800f3b8:	42be      	cmp	r6, r7
 800f3ba:	d900      	bls.n	800f3be <__ssputs_r+0x72>
 800f3bc:	463e      	mov	r6, r7
 800f3be:	6820      	ldr	r0, [r4, #0]
 800f3c0:	4632      	mov	r2, r6
 800f3c2:	4641      	mov	r1, r8
 800f3c4:	f7fe fca4 	bl	800dd10 <memmove>
 800f3c8:	68a3      	ldr	r3, [r4, #8]
 800f3ca:	1b9b      	subs	r3, r3, r6
 800f3cc:	60a3      	str	r3, [r4, #8]
 800f3ce:	6823      	ldr	r3, [r4, #0]
 800f3d0:	4433      	add	r3, r6
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3da:	462a      	mov	r2, r5
 800f3dc:	f7ff ff88 	bl	800f2f0 <_realloc_r>
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d1e0      	bne.n	800f3a8 <__ssputs_r+0x5c>
 800f3e6:	6921      	ldr	r1, [r4, #16]
 800f3e8:	4650      	mov	r0, sl
 800f3ea:	f7ff fbbd 	bl	800eb68 <_free_r>
 800f3ee:	230c      	movs	r3, #12
 800f3f0:	f8ca 3000 	str.w	r3, [sl]
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3fa:	81a3      	strh	r3, [r4, #12]
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	e7e9      	b.n	800f3d6 <__ssputs_r+0x8a>
	...

0800f404 <_svfiprintf_r>:
 800f404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f408:	4698      	mov	r8, r3
 800f40a:	898b      	ldrh	r3, [r1, #12]
 800f40c:	061b      	lsls	r3, r3, #24
 800f40e:	b09d      	sub	sp, #116	@ 0x74
 800f410:	4607      	mov	r7, r0
 800f412:	460d      	mov	r5, r1
 800f414:	4614      	mov	r4, r2
 800f416:	d510      	bpl.n	800f43a <_svfiprintf_r+0x36>
 800f418:	690b      	ldr	r3, [r1, #16]
 800f41a:	b973      	cbnz	r3, 800f43a <_svfiprintf_r+0x36>
 800f41c:	2140      	movs	r1, #64	@ 0x40
 800f41e:	f7fd fa79 	bl	800c914 <_malloc_r>
 800f422:	6028      	str	r0, [r5, #0]
 800f424:	6128      	str	r0, [r5, #16]
 800f426:	b930      	cbnz	r0, 800f436 <_svfiprintf_r+0x32>
 800f428:	230c      	movs	r3, #12
 800f42a:	603b      	str	r3, [r7, #0]
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	b01d      	add	sp, #116	@ 0x74
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	2340      	movs	r3, #64	@ 0x40
 800f438:	616b      	str	r3, [r5, #20]
 800f43a:	2300      	movs	r3, #0
 800f43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f43e:	2320      	movs	r3, #32
 800f440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f444:	f8cd 800c 	str.w	r8, [sp, #12]
 800f448:	2330      	movs	r3, #48	@ 0x30
 800f44a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5e8 <_svfiprintf_r+0x1e4>
 800f44e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f452:	f04f 0901 	mov.w	r9, #1
 800f456:	4623      	mov	r3, r4
 800f458:	469a      	mov	sl, r3
 800f45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f45e:	b10a      	cbz	r2, 800f464 <_svfiprintf_r+0x60>
 800f460:	2a25      	cmp	r2, #37	@ 0x25
 800f462:	d1f9      	bne.n	800f458 <_svfiprintf_r+0x54>
 800f464:	ebba 0b04 	subs.w	fp, sl, r4
 800f468:	d00b      	beq.n	800f482 <_svfiprintf_r+0x7e>
 800f46a:	465b      	mov	r3, fp
 800f46c:	4622      	mov	r2, r4
 800f46e:	4629      	mov	r1, r5
 800f470:	4638      	mov	r0, r7
 800f472:	f7ff ff6b 	bl	800f34c <__ssputs_r>
 800f476:	3001      	adds	r0, #1
 800f478:	f000 80a7 	beq.w	800f5ca <_svfiprintf_r+0x1c6>
 800f47c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f47e:	445a      	add	r2, fp
 800f480:	9209      	str	r2, [sp, #36]	@ 0x24
 800f482:	f89a 3000 	ldrb.w	r3, [sl]
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 809f 	beq.w	800f5ca <_svfiprintf_r+0x1c6>
 800f48c:	2300      	movs	r3, #0
 800f48e:	f04f 32ff 	mov.w	r2, #4294967295
 800f492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f496:	f10a 0a01 	add.w	sl, sl, #1
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	9307      	str	r3, [sp, #28]
 800f49e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4a4:	4654      	mov	r4, sl
 800f4a6:	2205      	movs	r2, #5
 800f4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ac:	484e      	ldr	r0, [pc, #312]	@ (800f5e8 <_svfiprintf_r+0x1e4>)
 800f4ae:	f7f0 fe8f 	bl	80001d0 <memchr>
 800f4b2:	9a04      	ldr	r2, [sp, #16]
 800f4b4:	b9d8      	cbnz	r0, 800f4ee <_svfiprintf_r+0xea>
 800f4b6:	06d0      	lsls	r0, r2, #27
 800f4b8:	bf44      	itt	mi
 800f4ba:	2320      	movmi	r3, #32
 800f4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4c0:	0711      	lsls	r1, r2, #28
 800f4c2:	bf44      	itt	mi
 800f4c4:	232b      	movmi	r3, #43	@ 0x2b
 800f4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4d0:	d015      	beq.n	800f4fe <_svfiprintf_r+0xfa>
 800f4d2:	9a07      	ldr	r2, [sp, #28]
 800f4d4:	4654      	mov	r4, sl
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	f04f 0c0a 	mov.w	ip, #10
 800f4dc:	4621      	mov	r1, r4
 800f4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4e2:	3b30      	subs	r3, #48	@ 0x30
 800f4e4:	2b09      	cmp	r3, #9
 800f4e6:	d94b      	bls.n	800f580 <_svfiprintf_r+0x17c>
 800f4e8:	b1b0      	cbz	r0, 800f518 <_svfiprintf_r+0x114>
 800f4ea:	9207      	str	r2, [sp, #28]
 800f4ec:	e014      	b.n	800f518 <_svfiprintf_r+0x114>
 800f4ee:	eba0 0308 	sub.w	r3, r0, r8
 800f4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	9304      	str	r3, [sp, #16]
 800f4fa:	46a2      	mov	sl, r4
 800f4fc:	e7d2      	b.n	800f4a4 <_svfiprintf_r+0xa0>
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	1d19      	adds	r1, r3, #4
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	9103      	str	r1, [sp, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	bfbb      	ittet	lt
 800f50a:	425b      	neglt	r3, r3
 800f50c:	f042 0202 	orrlt.w	r2, r2, #2
 800f510:	9307      	strge	r3, [sp, #28]
 800f512:	9307      	strlt	r3, [sp, #28]
 800f514:	bfb8      	it	lt
 800f516:	9204      	strlt	r2, [sp, #16]
 800f518:	7823      	ldrb	r3, [r4, #0]
 800f51a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f51c:	d10a      	bne.n	800f534 <_svfiprintf_r+0x130>
 800f51e:	7863      	ldrb	r3, [r4, #1]
 800f520:	2b2a      	cmp	r3, #42	@ 0x2a
 800f522:	d132      	bne.n	800f58a <_svfiprintf_r+0x186>
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	1d1a      	adds	r2, r3, #4
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	9203      	str	r2, [sp, #12]
 800f52c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f530:	3402      	adds	r4, #2
 800f532:	9305      	str	r3, [sp, #20]
 800f534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5f8 <_svfiprintf_r+0x1f4>
 800f538:	7821      	ldrb	r1, [r4, #0]
 800f53a:	2203      	movs	r2, #3
 800f53c:	4650      	mov	r0, sl
 800f53e:	f7f0 fe47 	bl	80001d0 <memchr>
 800f542:	b138      	cbz	r0, 800f554 <_svfiprintf_r+0x150>
 800f544:	9b04      	ldr	r3, [sp, #16]
 800f546:	eba0 000a 	sub.w	r0, r0, sl
 800f54a:	2240      	movs	r2, #64	@ 0x40
 800f54c:	4082      	lsls	r2, r0
 800f54e:	4313      	orrs	r3, r2
 800f550:	3401      	adds	r4, #1
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f558:	4824      	ldr	r0, [pc, #144]	@ (800f5ec <_svfiprintf_r+0x1e8>)
 800f55a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f55e:	2206      	movs	r2, #6
 800f560:	f7f0 fe36 	bl	80001d0 <memchr>
 800f564:	2800      	cmp	r0, #0
 800f566:	d036      	beq.n	800f5d6 <_svfiprintf_r+0x1d2>
 800f568:	4b21      	ldr	r3, [pc, #132]	@ (800f5f0 <_svfiprintf_r+0x1ec>)
 800f56a:	bb1b      	cbnz	r3, 800f5b4 <_svfiprintf_r+0x1b0>
 800f56c:	9b03      	ldr	r3, [sp, #12]
 800f56e:	3307      	adds	r3, #7
 800f570:	f023 0307 	bic.w	r3, r3, #7
 800f574:	3308      	adds	r3, #8
 800f576:	9303      	str	r3, [sp, #12]
 800f578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f57a:	4433      	add	r3, r6
 800f57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f57e:	e76a      	b.n	800f456 <_svfiprintf_r+0x52>
 800f580:	fb0c 3202 	mla	r2, ip, r2, r3
 800f584:	460c      	mov	r4, r1
 800f586:	2001      	movs	r0, #1
 800f588:	e7a8      	b.n	800f4dc <_svfiprintf_r+0xd8>
 800f58a:	2300      	movs	r3, #0
 800f58c:	3401      	adds	r4, #1
 800f58e:	9305      	str	r3, [sp, #20]
 800f590:	4619      	mov	r1, r3
 800f592:	f04f 0c0a 	mov.w	ip, #10
 800f596:	4620      	mov	r0, r4
 800f598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f59c:	3a30      	subs	r2, #48	@ 0x30
 800f59e:	2a09      	cmp	r2, #9
 800f5a0:	d903      	bls.n	800f5aa <_svfiprintf_r+0x1a6>
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0c6      	beq.n	800f534 <_svfiprintf_r+0x130>
 800f5a6:	9105      	str	r1, [sp, #20]
 800f5a8:	e7c4      	b.n	800f534 <_svfiprintf_r+0x130>
 800f5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e7f0      	b.n	800f596 <_svfiprintf_r+0x192>
 800f5b4:	ab03      	add	r3, sp, #12
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	462a      	mov	r2, r5
 800f5ba:	4b0e      	ldr	r3, [pc, #56]	@ (800f5f4 <_svfiprintf_r+0x1f0>)
 800f5bc:	a904      	add	r1, sp, #16
 800f5be:	4638      	mov	r0, r7
 800f5c0:	f7fd fb50 	bl	800cc64 <_printf_float>
 800f5c4:	1c42      	adds	r2, r0, #1
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	d1d6      	bne.n	800f578 <_svfiprintf_r+0x174>
 800f5ca:	89ab      	ldrh	r3, [r5, #12]
 800f5cc:	065b      	lsls	r3, r3, #25
 800f5ce:	f53f af2d 	bmi.w	800f42c <_svfiprintf_r+0x28>
 800f5d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5d4:	e72c      	b.n	800f430 <_svfiprintf_r+0x2c>
 800f5d6:	ab03      	add	r3, sp, #12
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	462a      	mov	r2, r5
 800f5dc:	4b05      	ldr	r3, [pc, #20]	@ (800f5f4 <_svfiprintf_r+0x1f0>)
 800f5de:	a904      	add	r1, sp, #16
 800f5e0:	4638      	mov	r0, r7
 800f5e2:	f7fd ff19 	bl	800d418 <_printf_i>
 800f5e6:	e7ed      	b.n	800f5c4 <_svfiprintf_r+0x1c0>
 800f5e8:	08010b20 	.word	0x08010b20
 800f5ec:	08010b2a 	.word	0x08010b2a
 800f5f0:	0800cc65 	.word	0x0800cc65
 800f5f4:	0800f34d 	.word	0x0800f34d
 800f5f8:	08010b26 	.word	0x08010b26

0800f5fc <_sungetc_r>:
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	1c4b      	adds	r3, r1, #1
 800f600:	4614      	mov	r4, r2
 800f602:	d103      	bne.n	800f60c <_sungetc_r+0x10>
 800f604:	f04f 35ff 	mov.w	r5, #4294967295
 800f608:	4628      	mov	r0, r5
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	8993      	ldrh	r3, [r2, #12]
 800f60e:	f023 0320 	bic.w	r3, r3, #32
 800f612:	8193      	strh	r3, [r2, #12]
 800f614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f616:	6852      	ldr	r2, [r2, #4]
 800f618:	b2cd      	uxtb	r5, r1
 800f61a:	b18b      	cbz	r3, 800f640 <_sungetc_r+0x44>
 800f61c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f61e:	4293      	cmp	r3, r2
 800f620:	dd08      	ble.n	800f634 <_sungetc_r+0x38>
 800f622:	6823      	ldr	r3, [r4, #0]
 800f624:	1e5a      	subs	r2, r3, #1
 800f626:	6022      	str	r2, [r4, #0]
 800f628:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f62c:	6863      	ldr	r3, [r4, #4]
 800f62e:	3301      	adds	r3, #1
 800f630:	6063      	str	r3, [r4, #4]
 800f632:	e7e9      	b.n	800f608 <_sungetc_r+0xc>
 800f634:	4621      	mov	r1, r4
 800f636:	f000 fb9a 	bl	800fd6e <__submore>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d0f1      	beq.n	800f622 <_sungetc_r+0x26>
 800f63e:	e7e1      	b.n	800f604 <_sungetc_r+0x8>
 800f640:	6921      	ldr	r1, [r4, #16]
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	b151      	cbz	r1, 800f65c <_sungetc_r+0x60>
 800f646:	4299      	cmp	r1, r3
 800f648:	d208      	bcs.n	800f65c <_sungetc_r+0x60>
 800f64a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f64e:	42a9      	cmp	r1, r5
 800f650:	d104      	bne.n	800f65c <_sungetc_r+0x60>
 800f652:	3b01      	subs	r3, #1
 800f654:	3201      	adds	r2, #1
 800f656:	6023      	str	r3, [r4, #0]
 800f658:	6062      	str	r2, [r4, #4]
 800f65a:	e7d5      	b.n	800f608 <_sungetc_r+0xc>
 800f65c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800f660:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f664:	6363      	str	r3, [r4, #52]	@ 0x34
 800f666:	2303      	movs	r3, #3
 800f668:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f66a:	4623      	mov	r3, r4
 800f66c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	2301      	movs	r3, #1
 800f674:	e7dc      	b.n	800f630 <_sungetc_r+0x34>

0800f676 <__ssrefill_r>:
 800f676:	b510      	push	{r4, lr}
 800f678:	460c      	mov	r4, r1
 800f67a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f67c:	b169      	cbz	r1, 800f69a <__ssrefill_r+0x24>
 800f67e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f682:	4299      	cmp	r1, r3
 800f684:	d001      	beq.n	800f68a <__ssrefill_r+0x14>
 800f686:	f7ff fa6f 	bl	800eb68 <_free_r>
 800f68a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f68c:	6063      	str	r3, [r4, #4]
 800f68e:	2000      	movs	r0, #0
 800f690:	6360      	str	r0, [r4, #52]	@ 0x34
 800f692:	b113      	cbz	r3, 800f69a <__ssrefill_r+0x24>
 800f694:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f696:	6023      	str	r3, [r4, #0]
 800f698:	bd10      	pop	{r4, pc}
 800f69a:	6923      	ldr	r3, [r4, #16]
 800f69c:	6023      	str	r3, [r4, #0]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	6063      	str	r3, [r4, #4]
 800f6a2:	89a3      	ldrh	r3, [r4, #12]
 800f6a4:	f043 0320 	orr.w	r3, r3, #32
 800f6a8:	81a3      	strh	r3, [r4, #12]
 800f6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ae:	e7f3      	b.n	800f698 <__ssrefill_r+0x22>

0800f6b0 <__ssvfiscanf_r>:
 800f6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f6c0:	49a6      	ldr	r1, [pc, #664]	@ (800f95c <__ssvfiscanf_r+0x2ac>)
 800f6c2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f6c4:	f10d 0804 	add.w	r8, sp, #4
 800f6c8:	49a5      	ldr	r1, [pc, #660]	@ (800f960 <__ssvfiscanf_r+0x2b0>)
 800f6ca:	4fa6      	ldr	r7, [pc, #664]	@ (800f964 <__ssvfiscanf_r+0x2b4>)
 800f6cc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f6d0:	4606      	mov	r6, r0
 800f6d2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f6d4:	9300      	str	r3, [sp, #0]
 800f6d6:	f892 9000 	ldrb.w	r9, [r2]
 800f6da:	f1b9 0f00 	cmp.w	r9, #0
 800f6de:	f000 8158 	beq.w	800f992 <__ssvfiscanf_r+0x2e2>
 800f6e2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800f6e6:	f013 0308 	ands.w	r3, r3, #8
 800f6ea:	f102 0501 	add.w	r5, r2, #1
 800f6ee:	d019      	beq.n	800f724 <__ssvfiscanf_r+0x74>
 800f6f0:	6863      	ldr	r3, [r4, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	dd0f      	ble.n	800f716 <__ssvfiscanf_r+0x66>
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	781a      	ldrb	r2, [r3, #0]
 800f6fa:	5cba      	ldrb	r2, [r7, r2]
 800f6fc:	0712      	lsls	r2, r2, #28
 800f6fe:	d401      	bmi.n	800f704 <__ssvfiscanf_r+0x54>
 800f700:	462a      	mov	r2, r5
 800f702:	e7e8      	b.n	800f6d6 <__ssvfiscanf_r+0x26>
 800f704:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f706:	3201      	adds	r2, #1
 800f708:	9245      	str	r2, [sp, #276]	@ 0x114
 800f70a:	6862      	ldr	r2, [r4, #4]
 800f70c:	3301      	adds	r3, #1
 800f70e:	3a01      	subs	r2, #1
 800f710:	6062      	str	r2, [r4, #4]
 800f712:	6023      	str	r3, [r4, #0]
 800f714:	e7ec      	b.n	800f6f0 <__ssvfiscanf_r+0x40>
 800f716:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f718:	4621      	mov	r1, r4
 800f71a:	4630      	mov	r0, r6
 800f71c:	4798      	blx	r3
 800f71e:	2800      	cmp	r0, #0
 800f720:	d0e9      	beq.n	800f6f6 <__ssvfiscanf_r+0x46>
 800f722:	e7ed      	b.n	800f700 <__ssvfiscanf_r+0x50>
 800f724:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800f728:	f040 8085 	bne.w	800f836 <__ssvfiscanf_r+0x186>
 800f72c:	9341      	str	r3, [sp, #260]	@ 0x104
 800f72e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800f730:	7853      	ldrb	r3, [r2, #1]
 800f732:	2b2a      	cmp	r3, #42	@ 0x2a
 800f734:	bf02      	ittt	eq
 800f736:	2310      	moveq	r3, #16
 800f738:	1c95      	addeq	r5, r2, #2
 800f73a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f73c:	220a      	movs	r2, #10
 800f73e:	46aa      	mov	sl, r5
 800f740:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f744:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f748:	2b09      	cmp	r3, #9
 800f74a:	d91e      	bls.n	800f78a <__ssvfiscanf_r+0xda>
 800f74c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800f968 <__ssvfiscanf_r+0x2b8>
 800f750:	2203      	movs	r2, #3
 800f752:	4658      	mov	r0, fp
 800f754:	f7f0 fd3c 	bl	80001d0 <memchr>
 800f758:	b138      	cbz	r0, 800f76a <__ssvfiscanf_r+0xba>
 800f75a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f75c:	eba0 000b 	sub.w	r0, r0, fp
 800f760:	2301      	movs	r3, #1
 800f762:	4083      	lsls	r3, r0
 800f764:	4313      	orrs	r3, r2
 800f766:	9341      	str	r3, [sp, #260]	@ 0x104
 800f768:	4655      	mov	r5, sl
 800f76a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f76e:	2b78      	cmp	r3, #120	@ 0x78
 800f770:	d806      	bhi.n	800f780 <__ssvfiscanf_r+0xd0>
 800f772:	2b57      	cmp	r3, #87	@ 0x57
 800f774:	d810      	bhi.n	800f798 <__ssvfiscanf_r+0xe8>
 800f776:	2b25      	cmp	r3, #37	@ 0x25
 800f778:	d05d      	beq.n	800f836 <__ssvfiscanf_r+0x186>
 800f77a:	d857      	bhi.n	800f82c <__ssvfiscanf_r+0x17c>
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d075      	beq.n	800f86c <__ssvfiscanf_r+0x1bc>
 800f780:	2303      	movs	r3, #3
 800f782:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f784:	230a      	movs	r3, #10
 800f786:	9342      	str	r3, [sp, #264]	@ 0x108
 800f788:	e088      	b.n	800f89c <__ssvfiscanf_r+0x1ec>
 800f78a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f78c:	fb02 1103 	mla	r1, r2, r3, r1
 800f790:	3930      	subs	r1, #48	@ 0x30
 800f792:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f794:	4655      	mov	r5, sl
 800f796:	e7d2      	b.n	800f73e <__ssvfiscanf_r+0x8e>
 800f798:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f79c:	2a20      	cmp	r2, #32
 800f79e:	d8ef      	bhi.n	800f780 <__ssvfiscanf_r+0xd0>
 800f7a0:	a101      	add	r1, pc, #4	@ (adr r1, 800f7a8 <__ssvfiscanf_r+0xf8>)
 800f7a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f7a6:	bf00      	nop
 800f7a8:	0800f87b 	.word	0x0800f87b
 800f7ac:	0800f781 	.word	0x0800f781
 800f7b0:	0800f781 	.word	0x0800f781
 800f7b4:	0800f8d5 	.word	0x0800f8d5
 800f7b8:	0800f781 	.word	0x0800f781
 800f7bc:	0800f781 	.word	0x0800f781
 800f7c0:	0800f781 	.word	0x0800f781
 800f7c4:	0800f781 	.word	0x0800f781
 800f7c8:	0800f781 	.word	0x0800f781
 800f7cc:	0800f781 	.word	0x0800f781
 800f7d0:	0800f781 	.word	0x0800f781
 800f7d4:	0800f8eb 	.word	0x0800f8eb
 800f7d8:	0800f8d1 	.word	0x0800f8d1
 800f7dc:	0800f833 	.word	0x0800f833
 800f7e0:	0800f833 	.word	0x0800f833
 800f7e4:	0800f833 	.word	0x0800f833
 800f7e8:	0800f781 	.word	0x0800f781
 800f7ec:	0800f88d 	.word	0x0800f88d
 800f7f0:	0800f781 	.word	0x0800f781
 800f7f4:	0800f781 	.word	0x0800f781
 800f7f8:	0800f781 	.word	0x0800f781
 800f7fc:	0800f781 	.word	0x0800f781
 800f800:	0800f8fb 	.word	0x0800f8fb
 800f804:	0800f895 	.word	0x0800f895
 800f808:	0800f873 	.word	0x0800f873
 800f80c:	0800f781 	.word	0x0800f781
 800f810:	0800f781 	.word	0x0800f781
 800f814:	0800f8f7 	.word	0x0800f8f7
 800f818:	0800f781 	.word	0x0800f781
 800f81c:	0800f8d1 	.word	0x0800f8d1
 800f820:	0800f781 	.word	0x0800f781
 800f824:	0800f781 	.word	0x0800f781
 800f828:	0800f87b 	.word	0x0800f87b
 800f82c:	3b45      	subs	r3, #69	@ 0x45
 800f82e:	2b02      	cmp	r3, #2
 800f830:	d8a6      	bhi.n	800f780 <__ssvfiscanf_r+0xd0>
 800f832:	2305      	movs	r3, #5
 800f834:	e031      	b.n	800f89a <__ssvfiscanf_r+0x1ea>
 800f836:	6863      	ldr	r3, [r4, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	dd0d      	ble.n	800f858 <__ssvfiscanf_r+0x1a8>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	781a      	ldrb	r2, [r3, #0]
 800f840:	454a      	cmp	r2, r9
 800f842:	f040 80a6 	bne.w	800f992 <__ssvfiscanf_r+0x2e2>
 800f846:	3301      	adds	r3, #1
 800f848:	6862      	ldr	r2, [r4, #4]
 800f84a:	6023      	str	r3, [r4, #0]
 800f84c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f84e:	3a01      	subs	r2, #1
 800f850:	3301      	adds	r3, #1
 800f852:	6062      	str	r2, [r4, #4]
 800f854:	9345      	str	r3, [sp, #276]	@ 0x114
 800f856:	e753      	b.n	800f700 <__ssvfiscanf_r+0x50>
 800f858:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f85a:	4621      	mov	r1, r4
 800f85c:	4630      	mov	r0, r6
 800f85e:	4798      	blx	r3
 800f860:	2800      	cmp	r0, #0
 800f862:	d0eb      	beq.n	800f83c <__ssvfiscanf_r+0x18c>
 800f864:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f866:	2800      	cmp	r0, #0
 800f868:	f040 808b 	bne.w	800f982 <__ssvfiscanf_r+0x2d2>
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	e08b      	b.n	800f98a <__ssvfiscanf_r+0x2da>
 800f872:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f874:	f042 0220 	orr.w	r2, r2, #32
 800f878:	9241      	str	r2, [sp, #260]	@ 0x104
 800f87a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f87c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f880:	9241      	str	r2, [sp, #260]	@ 0x104
 800f882:	2210      	movs	r2, #16
 800f884:	2b6e      	cmp	r3, #110	@ 0x6e
 800f886:	9242      	str	r2, [sp, #264]	@ 0x108
 800f888:	d902      	bls.n	800f890 <__ssvfiscanf_r+0x1e0>
 800f88a:	e005      	b.n	800f898 <__ssvfiscanf_r+0x1e8>
 800f88c:	2300      	movs	r3, #0
 800f88e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f890:	2303      	movs	r3, #3
 800f892:	e002      	b.n	800f89a <__ssvfiscanf_r+0x1ea>
 800f894:	2308      	movs	r3, #8
 800f896:	9342      	str	r3, [sp, #264]	@ 0x108
 800f898:	2304      	movs	r3, #4
 800f89a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f89c:	6863      	ldr	r3, [r4, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	dd39      	ble.n	800f916 <__ssvfiscanf_r+0x266>
 800f8a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f8a4:	0659      	lsls	r1, r3, #25
 800f8a6:	d404      	bmi.n	800f8b2 <__ssvfiscanf_r+0x202>
 800f8a8:	6823      	ldr	r3, [r4, #0]
 800f8aa:	781a      	ldrb	r2, [r3, #0]
 800f8ac:	5cba      	ldrb	r2, [r7, r2]
 800f8ae:	0712      	lsls	r2, r2, #28
 800f8b0:	d438      	bmi.n	800f924 <__ssvfiscanf_r+0x274>
 800f8b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	dc47      	bgt.n	800f948 <__ssvfiscanf_r+0x298>
 800f8b8:	466b      	mov	r3, sp
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	a941      	add	r1, sp, #260	@ 0x104
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f000 f86c 	bl	800f99c <_scanf_chars>
 800f8c4:	2801      	cmp	r0, #1
 800f8c6:	d064      	beq.n	800f992 <__ssvfiscanf_r+0x2e2>
 800f8c8:	2802      	cmp	r0, #2
 800f8ca:	f47f af19 	bne.w	800f700 <__ssvfiscanf_r+0x50>
 800f8ce:	e7c9      	b.n	800f864 <__ssvfiscanf_r+0x1b4>
 800f8d0:	220a      	movs	r2, #10
 800f8d2:	e7d7      	b.n	800f884 <__ssvfiscanf_r+0x1d4>
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	f000 fa10 	bl	800fcfc <__sccl>
 800f8dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8e2:	9341      	str	r3, [sp, #260]	@ 0x104
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e7d7      	b.n	800f89a <__ssvfiscanf_r+0x1ea>
 800f8ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f8ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8f0:	9341      	str	r3, [sp, #260]	@ 0x104
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	e7d1      	b.n	800f89a <__ssvfiscanf_r+0x1ea>
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	e7cf      	b.n	800f89a <__ssvfiscanf_r+0x1ea>
 800f8fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f8fc:	06c3      	lsls	r3, r0, #27
 800f8fe:	f53f aeff 	bmi.w	800f700 <__ssvfiscanf_r+0x50>
 800f902:	9b00      	ldr	r3, [sp, #0]
 800f904:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f906:	1d19      	adds	r1, r3, #4
 800f908:	9100      	str	r1, [sp, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	07c0      	lsls	r0, r0, #31
 800f90e:	bf4c      	ite	mi
 800f910:	801a      	strhmi	r2, [r3, #0]
 800f912:	601a      	strpl	r2, [r3, #0]
 800f914:	e6f4      	b.n	800f700 <__ssvfiscanf_r+0x50>
 800f916:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f918:	4621      	mov	r1, r4
 800f91a:	4630      	mov	r0, r6
 800f91c:	4798      	blx	r3
 800f91e:	2800      	cmp	r0, #0
 800f920:	d0bf      	beq.n	800f8a2 <__ssvfiscanf_r+0x1f2>
 800f922:	e79f      	b.n	800f864 <__ssvfiscanf_r+0x1b4>
 800f924:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f926:	3201      	adds	r2, #1
 800f928:	9245      	str	r2, [sp, #276]	@ 0x114
 800f92a:	6862      	ldr	r2, [r4, #4]
 800f92c:	3a01      	subs	r2, #1
 800f92e:	2a00      	cmp	r2, #0
 800f930:	6062      	str	r2, [r4, #4]
 800f932:	dd02      	ble.n	800f93a <__ssvfiscanf_r+0x28a>
 800f934:	3301      	adds	r3, #1
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	e7b6      	b.n	800f8a8 <__ssvfiscanf_r+0x1f8>
 800f93a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f93c:	4621      	mov	r1, r4
 800f93e:	4630      	mov	r0, r6
 800f940:	4798      	blx	r3
 800f942:	2800      	cmp	r0, #0
 800f944:	d0b0      	beq.n	800f8a8 <__ssvfiscanf_r+0x1f8>
 800f946:	e78d      	b.n	800f864 <__ssvfiscanf_r+0x1b4>
 800f948:	2b04      	cmp	r3, #4
 800f94a:	dc0f      	bgt.n	800f96c <__ssvfiscanf_r+0x2bc>
 800f94c:	466b      	mov	r3, sp
 800f94e:	4622      	mov	r2, r4
 800f950:	a941      	add	r1, sp, #260	@ 0x104
 800f952:	4630      	mov	r0, r6
 800f954:	f000 f87c 	bl	800fa50 <_scanf_i>
 800f958:	e7b4      	b.n	800f8c4 <__ssvfiscanf_r+0x214>
 800f95a:	bf00      	nop
 800f95c:	0800f5fd 	.word	0x0800f5fd
 800f960:	0800f677 	.word	0x0800f677
 800f964:	08010c5f 	.word	0x08010c5f
 800f968:	08010b26 	.word	0x08010b26
 800f96c:	4b0a      	ldr	r3, [pc, #40]	@ (800f998 <__ssvfiscanf_r+0x2e8>)
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f43f aec6 	beq.w	800f700 <__ssvfiscanf_r+0x50>
 800f974:	466b      	mov	r3, sp
 800f976:	4622      	mov	r2, r4
 800f978:	a941      	add	r1, sp, #260	@ 0x104
 800f97a:	4630      	mov	r0, r6
 800f97c:	f3af 8000 	nop.w
 800f980:	e7a0      	b.n	800f8c4 <__ssvfiscanf_r+0x214>
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	065b      	lsls	r3, r3, #25
 800f986:	f53f af71 	bmi.w	800f86c <__ssvfiscanf_r+0x1bc>
 800f98a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800f98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f992:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f994:	e7f9      	b.n	800f98a <__ssvfiscanf_r+0x2da>
 800f996:	bf00      	nop
 800f998:	00000000 	.word	0x00000000

0800f99c <_scanf_chars>:
 800f99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9a0:	4615      	mov	r5, r2
 800f9a2:	688a      	ldr	r2, [r1, #8]
 800f9a4:	4680      	mov	r8, r0
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	b932      	cbnz	r2, 800f9b8 <_scanf_chars+0x1c>
 800f9aa:	698a      	ldr	r2, [r1, #24]
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	bf14      	ite	ne
 800f9b0:	f04f 32ff 	movne.w	r2, #4294967295
 800f9b4:	2201      	moveq	r2, #1
 800f9b6:	608a      	str	r2, [r1, #8]
 800f9b8:	6822      	ldr	r2, [r4, #0]
 800f9ba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800fa4c <_scanf_chars+0xb0>
 800f9be:	06d1      	lsls	r1, r2, #27
 800f9c0:	bf5f      	itttt	pl
 800f9c2:	681a      	ldrpl	r2, [r3, #0]
 800f9c4:	1d11      	addpl	r1, r2, #4
 800f9c6:	6019      	strpl	r1, [r3, #0]
 800f9c8:	6816      	ldrpl	r6, [r2, #0]
 800f9ca:	2700      	movs	r7, #0
 800f9cc:	69a0      	ldr	r0, [r4, #24]
 800f9ce:	b188      	cbz	r0, 800f9f4 <_scanf_chars+0x58>
 800f9d0:	2801      	cmp	r0, #1
 800f9d2:	d107      	bne.n	800f9e4 <_scanf_chars+0x48>
 800f9d4:	682b      	ldr	r3, [r5, #0]
 800f9d6:	781a      	ldrb	r2, [r3, #0]
 800f9d8:	6963      	ldr	r3, [r4, #20]
 800f9da:	5c9b      	ldrb	r3, [r3, r2]
 800f9dc:	b953      	cbnz	r3, 800f9f4 <_scanf_chars+0x58>
 800f9de:	2f00      	cmp	r7, #0
 800f9e0:	d031      	beq.n	800fa46 <_scanf_chars+0xaa>
 800f9e2:	e022      	b.n	800fa2a <_scanf_chars+0x8e>
 800f9e4:	2802      	cmp	r0, #2
 800f9e6:	d120      	bne.n	800fa2a <_scanf_chars+0x8e>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f9f0:	071b      	lsls	r3, r3, #28
 800f9f2:	d41a      	bmi.n	800fa2a <_scanf_chars+0x8e>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	06da      	lsls	r2, r3, #27
 800f9f8:	bf5e      	ittt	pl
 800f9fa:	682b      	ldrpl	r3, [r5, #0]
 800f9fc:	781b      	ldrbpl	r3, [r3, #0]
 800f9fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fa02:	682a      	ldr	r2, [r5, #0]
 800fa04:	686b      	ldr	r3, [r5, #4]
 800fa06:	3201      	adds	r2, #1
 800fa08:	602a      	str	r2, [r5, #0]
 800fa0a:	68a2      	ldr	r2, [r4, #8]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	3a01      	subs	r2, #1
 800fa10:	606b      	str	r3, [r5, #4]
 800fa12:	3701      	adds	r7, #1
 800fa14:	60a2      	str	r2, [r4, #8]
 800fa16:	b142      	cbz	r2, 800fa2a <_scanf_chars+0x8e>
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	dcd7      	bgt.n	800f9cc <_scanf_chars+0x30>
 800fa1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fa20:	4629      	mov	r1, r5
 800fa22:	4640      	mov	r0, r8
 800fa24:	4798      	blx	r3
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d0d0      	beq.n	800f9cc <_scanf_chars+0x30>
 800fa2a:	6823      	ldr	r3, [r4, #0]
 800fa2c:	f013 0310 	ands.w	r3, r3, #16
 800fa30:	d105      	bne.n	800fa3e <_scanf_chars+0xa2>
 800fa32:	68e2      	ldr	r2, [r4, #12]
 800fa34:	3201      	adds	r2, #1
 800fa36:	60e2      	str	r2, [r4, #12]
 800fa38:	69a2      	ldr	r2, [r4, #24]
 800fa3a:	b102      	cbz	r2, 800fa3e <_scanf_chars+0xa2>
 800fa3c:	7033      	strb	r3, [r6, #0]
 800fa3e:	6923      	ldr	r3, [r4, #16]
 800fa40:	443b      	add	r3, r7
 800fa42:	6123      	str	r3, [r4, #16]
 800fa44:	2000      	movs	r0, #0
 800fa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	bf00      	nop
 800fa4c:	08010c5f 	.word	0x08010c5f

0800fa50 <_scanf_i>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	4698      	mov	r8, r3
 800fa56:	4b74      	ldr	r3, [pc, #464]	@ (800fc28 <_scanf_i+0x1d8>)
 800fa58:	460c      	mov	r4, r1
 800fa5a:	4682      	mov	sl, r0
 800fa5c:	4616      	mov	r6, r2
 800fa5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa62:	b087      	sub	sp, #28
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fa6a:	4b70      	ldr	r3, [pc, #448]	@ (800fc2c <_scanf_i+0x1dc>)
 800fa6c:	69a1      	ldr	r1, [r4, #24]
 800fa6e:	4a70      	ldr	r2, [pc, #448]	@ (800fc30 <_scanf_i+0x1e0>)
 800fa70:	2903      	cmp	r1, #3
 800fa72:	bf08      	it	eq
 800fa74:	461a      	moveq	r2, r3
 800fa76:	68a3      	ldr	r3, [r4, #8]
 800fa78:	9201      	str	r2, [sp, #4]
 800fa7a:	1e5a      	subs	r2, r3, #1
 800fa7c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fa80:	bf88      	it	hi
 800fa82:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fa86:	4627      	mov	r7, r4
 800fa88:	bf82      	ittt	hi
 800fa8a:	eb03 0905 	addhi.w	r9, r3, r5
 800fa8e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fa92:	60a3      	strhi	r3, [r4, #8]
 800fa94:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fa98:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800fa9c:	bf98      	it	ls
 800fa9e:	f04f 0900 	movls.w	r9, #0
 800faa2:	6023      	str	r3, [r4, #0]
 800faa4:	463d      	mov	r5, r7
 800faa6:	f04f 0b00 	mov.w	fp, #0
 800faaa:	6831      	ldr	r1, [r6, #0]
 800faac:	ab03      	add	r3, sp, #12
 800faae:	7809      	ldrb	r1, [r1, #0]
 800fab0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fab4:	2202      	movs	r2, #2
 800fab6:	f7f0 fb8b 	bl	80001d0 <memchr>
 800faba:	b328      	cbz	r0, 800fb08 <_scanf_i+0xb8>
 800fabc:	f1bb 0f01 	cmp.w	fp, #1
 800fac0:	d159      	bne.n	800fb76 <_scanf_i+0x126>
 800fac2:	6862      	ldr	r2, [r4, #4]
 800fac4:	b92a      	cbnz	r2, 800fad2 <_scanf_i+0x82>
 800fac6:	6822      	ldr	r2, [r4, #0]
 800fac8:	2108      	movs	r1, #8
 800faca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800face:	6061      	str	r1, [r4, #4]
 800fad0:	6022      	str	r2, [r4, #0]
 800fad2:	6822      	ldr	r2, [r4, #0]
 800fad4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800fad8:	6022      	str	r2, [r4, #0]
 800fada:	68a2      	ldr	r2, [r4, #8]
 800fadc:	1e51      	subs	r1, r2, #1
 800fade:	60a1      	str	r1, [r4, #8]
 800fae0:	b192      	cbz	r2, 800fb08 <_scanf_i+0xb8>
 800fae2:	6832      	ldr	r2, [r6, #0]
 800fae4:	1c51      	adds	r1, r2, #1
 800fae6:	6031      	str	r1, [r6, #0]
 800fae8:	7812      	ldrb	r2, [r2, #0]
 800faea:	f805 2b01 	strb.w	r2, [r5], #1
 800faee:	6872      	ldr	r2, [r6, #4]
 800faf0:	3a01      	subs	r2, #1
 800faf2:	2a00      	cmp	r2, #0
 800faf4:	6072      	str	r2, [r6, #4]
 800faf6:	dc07      	bgt.n	800fb08 <_scanf_i+0xb8>
 800faf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800fafc:	4631      	mov	r1, r6
 800fafe:	4650      	mov	r0, sl
 800fb00:	4790      	blx	r2
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f040 8085 	bne.w	800fc12 <_scanf_i+0x1c2>
 800fb08:	f10b 0b01 	add.w	fp, fp, #1
 800fb0c:	f1bb 0f03 	cmp.w	fp, #3
 800fb10:	d1cb      	bne.n	800faaa <_scanf_i+0x5a>
 800fb12:	6863      	ldr	r3, [r4, #4]
 800fb14:	b90b      	cbnz	r3, 800fb1a <_scanf_i+0xca>
 800fb16:	230a      	movs	r3, #10
 800fb18:	6063      	str	r3, [r4, #4]
 800fb1a:	6863      	ldr	r3, [r4, #4]
 800fb1c:	4945      	ldr	r1, [pc, #276]	@ (800fc34 <_scanf_i+0x1e4>)
 800fb1e:	6960      	ldr	r0, [r4, #20]
 800fb20:	1ac9      	subs	r1, r1, r3
 800fb22:	f000 f8eb 	bl	800fcfc <__sccl>
 800fb26:	f04f 0b00 	mov.w	fp, #0
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	6822      	ldr	r2, [r4, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d03d      	beq.n	800fbae <_scanf_i+0x15e>
 800fb32:	6831      	ldr	r1, [r6, #0]
 800fb34:	6960      	ldr	r0, [r4, #20]
 800fb36:	f891 c000 	ldrb.w	ip, [r1]
 800fb3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d035      	beq.n	800fbae <_scanf_i+0x15e>
 800fb42:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800fb46:	d124      	bne.n	800fb92 <_scanf_i+0x142>
 800fb48:	0510      	lsls	r0, r2, #20
 800fb4a:	d522      	bpl.n	800fb92 <_scanf_i+0x142>
 800fb4c:	f10b 0b01 	add.w	fp, fp, #1
 800fb50:	f1b9 0f00 	cmp.w	r9, #0
 800fb54:	d003      	beq.n	800fb5e <_scanf_i+0x10e>
 800fb56:	3301      	adds	r3, #1
 800fb58:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb5c:	60a3      	str	r3, [r4, #8]
 800fb5e:	6873      	ldr	r3, [r6, #4]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	6073      	str	r3, [r6, #4]
 800fb66:	dd1b      	ble.n	800fba0 <_scanf_i+0x150>
 800fb68:	6833      	ldr	r3, [r6, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	6033      	str	r3, [r6, #0]
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	60a3      	str	r3, [r4, #8]
 800fb74:	e7d9      	b.n	800fb2a <_scanf_i+0xda>
 800fb76:	f1bb 0f02 	cmp.w	fp, #2
 800fb7a:	d1ae      	bne.n	800fada <_scanf_i+0x8a>
 800fb7c:	6822      	ldr	r2, [r4, #0]
 800fb7e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800fb82:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800fb86:	d1c4      	bne.n	800fb12 <_scanf_i+0xc2>
 800fb88:	2110      	movs	r1, #16
 800fb8a:	6061      	str	r1, [r4, #4]
 800fb8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fb90:	e7a2      	b.n	800fad8 <_scanf_i+0x88>
 800fb92:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800fb96:	6022      	str	r2, [r4, #0]
 800fb98:	780b      	ldrb	r3, [r1, #0]
 800fb9a:	f805 3b01 	strb.w	r3, [r5], #1
 800fb9e:	e7de      	b.n	800fb5e <_scanf_i+0x10e>
 800fba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fba4:	4631      	mov	r1, r6
 800fba6:	4650      	mov	r0, sl
 800fba8:	4798      	blx	r3
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0df      	beq.n	800fb6e <_scanf_i+0x11e>
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	05d9      	lsls	r1, r3, #23
 800fbb2:	d50d      	bpl.n	800fbd0 <_scanf_i+0x180>
 800fbb4:	42bd      	cmp	r5, r7
 800fbb6:	d909      	bls.n	800fbcc <_scanf_i+0x17c>
 800fbb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fbbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	4650      	mov	r0, sl
 800fbc4:	4798      	blx	r3
 800fbc6:	f105 39ff 	add.w	r9, r5, #4294967295
 800fbca:	464d      	mov	r5, r9
 800fbcc:	42bd      	cmp	r5, r7
 800fbce:	d028      	beq.n	800fc22 <_scanf_i+0x1d2>
 800fbd0:	6822      	ldr	r2, [r4, #0]
 800fbd2:	f012 0210 	ands.w	r2, r2, #16
 800fbd6:	d113      	bne.n	800fc00 <_scanf_i+0x1b0>
 800fbd8:	702a      	strb	r2, [r5, #0]
 800fbda:	6863      	ldr	r3, [r4, #4]
 800fbdc:	9e01      	ldr	r6, [sp, #4]
 800fbde:	4639      	mov	r1, r7
 800fbe0:	4650      	mov	r0, sl
 800fbe2:	47b0      	blx	r6
 800fbe4:	f8d8 3000 	ldr.w	r3, [r8]
 800fbe8:	6821      	ldr	r1, [r4, #0]
 800fbea:	1d1a      	adds	r2, r3, #4
 800fbec:	f8c8 2000 	str.w	r2, [r8]
 800fbf0:	f011 0f20 	tst.w	r1, #32
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	d00f      	beq.n	800fc18 <_scanf_i+0x1c8>
 800fbf8:	6018      	str	r0, [r3, #0]
 800fbfa:	68e3      	ldr	r3, [r4, #12]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	60e3      	str	r3, [r4, #12]
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	1bed      	subs	r5, r5, r7
 800fc04:	445d      	add	r5, fp
 800fc06:	442b      	add	r3, r5
 800fc08:	6123      	str	r3, [r4, #16]
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	b007      	add	sp, #28
 800fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc12:	f04f 0b00 	mov.w	fp, #0
 800fc16:	e7ca      	b.n	800fbae <_scanf_i+0x15e>
 800fc18:	07ca      	lsls	r2, r1, #31
 800fc1a:	bf4c      	ite	mi
 800fc1c:	8018      	strhmi	r0, [r3, #0]
 800fc1e:	6018      	strpl	r0, [r3, #0]
 800fc20:	e7eb      	b.n	800fbfa <_scanf_i+0x1aa>
 800fc22:	2001      	movs	r0, #1
 800fc24:	e7f2      	b.n	800fc0c <_scanf_i+0x1bc>
 800fc26:	bf00      	nop
 800fc28:	08010a28 	.word	0x08010a28
 800fc2c:	0800cb21 	.word	0x0800cb21
 800fc30:	0800ffe9 	.word	0x0800ffe9
 800fc34:	08010c49 	.word	0x08010c49

0800fc38 <__swhatbuf_r>:
 800fc38:	b570      	push	{r4, r5, r6, lr}
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc40:	2900      	cmp	r1, #0
 800fc42:	b096      	sub	sp, #88	@ 0x58
 800fc44:	4615      	mov	r5, r2
 800fc46:	461e      	mov	r6, r3
 800fc48:	da0d      	bge.n	800fc66 <__swhatbuf_r+0x2e>
 800fc4a:	89a3      	ldrh	r3, [r4, #12]
 800fc4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc50:	f04f 0100 	mov.w	r1, #0
 800fc54:	bf14      	ite	ne
 800fc56:	2340      	movne	r3, #64	@ 0x40
 800fc58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc5c:	2000      	movs	r0, #0
 800fc5e:	6031      	str	r1, [r6, #0]
 800fc60:	602b      	str	r3, [r5, #0]
 800fc62:	b016      	add	sp, #88	@ 0x58
 800fc64:	bd70      	pop	{r4, r5, r6, pc}
 800fc66:	466a      	mov	r2, sp
 800fc68:	f000 f8ec 	bl	800fe44 <_fstat_r>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	dbec      	blt.n	800fc4a <__swhatbuf_r+0x12>
 800fc70:	9901      	ldr	r1, [sp, #4]
 800fc72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc7a:	4259      	negs	r1, r3
 800fc7c:	4159      	adcs	r1, r3
 800fc7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc82:	e7eb      	b.n	800fc5c <__swhatbuf_r+0x24>

0800fc84 <__smakebuf_r>:
 800fc84:	898b      	ldrh	r3, [r1, #12]
 800fc86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc88:	079d      	lsls	r5, r3, #30
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	460c      	mov	r4, r1
 800fc8e:	d507      	bpl.n	800fca0 <__smakebuf_r+0x1c>
 800fc90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	2301      	movs	r3, #1
 800fc9a:	6163      	str	r3, [r4, #20]
 800fc9c:	b003      	add	sp, #12
 800fc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca0:	ab01      	add	r3, sp, #4
 800fca2:	466a      	mov	r2, sp
 800fca4:	f7ff ffc8 	bl	800fc38 <__swhatbuf_r>
 800fca8:	9f00      	ldr	r7, [sp, #0]
 800fcaa:	4605      	mov	r5, r0
 800fcac:	4639      	mov	r1, r7
 800fcae:	4630      	mov	r0, r6
 800fcb0:	f7fc fe30 	bl	800c914 <_malloc_r>
 800fcb4:	b948      	cbnz	r0, 800fcca <__smakebuf_r+0x46>
 800fcb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcba:	059a      	lsls	r2, r3, #22
 800fcbc:	d4ee      	bmi.n	800fc9c <__smakebuf_r+0x18>
 800fcbe:	f023 0303 	bic.w	r3, r3, #3
 800fcc2:	f043 0302 	orr.w	r3, r3, #2
 800fcc6:	81a3      	strh	r3, [r4, #12]
 800fcc8:	e7e2      	b.n	800fc90 <__smakebuf_r+0xc>
 800fcca:	89a3      	ldrh	r3, [r4, #12]
 800fccc:	6020      	str	r0, [r4, #0]
 800fcce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcd2:	81a3      	strh	r3, [r4, #12]
 800fcd4:	9b01      	ldr	r3, [sp, #4]
 800fcd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcda:	b15b      	cbz	r3, 800fcf4 <__smakebuf_r+0x70>
 800fcdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fce0:	4630      	mov	r0, r6
 800fce2:	f000 f8c1 	bl	800fe68 <_isatty_r>
 800fce6:	b128      	cbz	r0, 800fcf4 <__smakebuf_r+0x70>
 800fce8:	89a3      	ldrh	r3, [r4, #12]
 800fcea:	f023 0303 	bic.w	r3, r3, #3
 800fcee:	f043 0301 	orr.w	r3, r3, #1
 800fcf2:	81a3      	strh	r3, [r4, #12]
 800fcf4:	89a3      	ldrh	r3, [r4, #12]
 800fcf6:	431d      	orrs	r5, r3
 800fcf8:	81a5      	strh	r5, [r4, #12]
 800fcfa:	e7cf      	b.n	800fc9c <__smakebuf_r+0x18>

0800fcfc <__sccl>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	780b      	ldrb	r3, [r1, #0]
 800fd00:	4604      	mov	r4, r0
 800fd02:	2b5e      	cmp	r3, #94	@ 0x5e
 800fd04:	bf0b      	itete	eq
 800fd06:	784b      	ldrbeq	r3, [r1, #1]
 800fd08:	1c4a      	addne	r2, r1, #1
 800fd0a:	1c8a      	addeq	r2, r1, #2
 800fd0c:	2100      	movne	r1, #0
 800fd0e:	bf08      	it	eq
 800fd10:	2101      	moveq	r1, #1
 800fd12:	3801      	subs	r0, #1
 800fd14:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800fd18:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fd1c:	42a8      	cmp	r0, r5
 800fd1e:	d1fb      	bne.n	800fd18 <__sccl+0x1c>
 800fd20:	b90b      	cbnz	r3, 800fd26 <__sccl+0x2a>
 800fd22:	1e50      	subs	r0, r2, #1
 800fd24:	bd70      	pop	{r4, r5, r6, pc}
 800fd26:	f081 0101 	eor.w	r1, r1, #1
 800fd2a:	54e1      	strb	r1, [r4, r3]
 800fd2c:	4610      	mov	r0, r2
 800fd2e:	4602      	mov	r2, r0
 800fd30:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fd34:	2d2d      	cmp	r5, #45	@ 0x2d
 800fd36:	d005      	beq.n	800fd44 <__sccl+0x48>
 800fd38:	2d5d      	cmp	r5, #93	@ 0x5d
 800fd3a:	d016      	beq.n	800fd6a <__sccl+0x6e>
 800fd3c:	2d00      	cmp	r5, #0
 800fd3e:	d0f1      	beq.n	800fd24 <__sccl+0x28>
 800fd40:	462b      	mov	r3, r5
 800fd42:	e7f2      	b.n	800fd2a <__sccl+0x2e>
 800fd44:	7846      	ldrb	r6, [r0, #1]
 800fd46:	2e5d      	cmp	r6, #93	@ 0x5d
 800fd48:	d0fa      	beq.n	800fd40 <__sccl+0x44>
 800fd4a:	42b3      	cmp	r3, r6
 800fd4c:	dcf8      	bgt.n	800fd40 <__sccl+0x44>
 800fd4e:	3002      	adds	r0, #2
 800fd50:	461a      	mov	r2, r3
 800fd52:	3201      	adds	r2, #1
 800fd54:	4296      	cmp	r6, r2
 800fd56:	54a1      	strb	r1, [r4, r2]
 800fd58:	dcfb      	bgt.n	800fd52 <__sccl+0x56>
 800fd5a:	1af2      	subs	r2, r6, r3
 800fd5c:	3a01      	subs	r2, #1
 800fd5e:	1c5d      	adds	r5, r3, #1
 800fd60:	42b3      	cmp	r3, r6
 800fd62:	bfa8      	it	ge
 800fd64:	2200      	movge	r2, #0
 800fd66:	18ab      	adds	r3, r5, r2
 800fd68:	e7e1      	b.n	800fd2e <__sccl+0x32>
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	e7da      	b.n	800fd24 <__sccl+0x28>

0800fd6e <__submore>:
 800fd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd72:	460c      	mov	r4, r1
 800fd74:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fd76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd7a:	4299      	cmp	r1, r3
 800fd7c:	d11d      	bne.n	800fdba <__submore+0x4c>
 800fd7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800fd82:	f7fc fdc7 	bl	800c914 <_malloc_r>
 800fd86:	b918      	cbnz	r0, 800fd90 <__submore+0x22>
 800fd88:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd94:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fd96:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800fd9a:	6360      	str	r0, [r4, #52]	@ 0x34
 800fd9c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800fda0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800fda4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800fda8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fdac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800fdb0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800fdb4:	6020      	str	r0, [r4, #0]
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	e7e8      	b.n	800fd8c <__submore+0x1e>
 800fdba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800fdbc:	0077      	lsls	r7, r6, #1
 800fdbe:	463a      	mov	r2, r7
 800fdc0:	f7ff fa96 	bl	800f2f0 <_realloc_r>
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d0de      	beq.n	800fd88 <__submore+0x1a>
 800fdca:	eb00 0806 	add.w	r8, r0, r6
 800fdce:	4601      	mov	r1, r0
 800fdd0:	4632      	mov	r2, r6
 800fdd2:	4640      	mov	r0, r8
 800fdd4:	f7fe f85b 	bl	800de8e <memcpy>
 800fdd8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800fddc:	f8c4 8000 	str.w	r8, [r4]
 800fde0:	e7e9      	b.n	800fdb6 <__submore+0x48>

0800fde2 <_raise_r>:
 800fde2:	291f      	cmp	r1, #31
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4605      	mov	r5, r0
 800fde8:	460c      	mov	r4, r1
 800fdea:	d904      	bls.n	800fdf6 <_raise_r+0x14>
 800fdec:	2316      	movs	r3, #22
 800fdee:	6003      	str	r3, [r0, #0]
 800fdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf4:	bd38      	pop	{r3, r4, r5, pc}
 800fdf6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fdf8:	b112      	cbz	r2, 800fe00 <_raise_r+0x1e>
 800fdfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdfe:	b94b      	cbnz	r3, 800fe14 <_raise_r+0x32>
 800fe00:	4628      	mov	r0, r5
 800fe02:	f000 f853 	bl	800feac <_getpid_r>
 800fe06:	4622      	mov	r2, r4
 800fe08:	4601      	mov	r1, r0
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe10:	f000 b83a 	b.w	800fe88 <_kill_r>
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d00a      	beq.n	800fe2e <_raise_r+0x4c>
 800fe18:	1c59      	adds	r1, r3, #1
 800fe1a:	d103      	bne.n	800fe24 <_raise_r+0x42>
 800fe1c:	2316      	movs	r3, #22
 800fe1e:	6003      	str	r3, [r0, #0]
 800fe20:	2001      	movs	r0, #1
 800fe22:	e7e7      	b.n	800fdf4 <_raise_r+0x12>
 800fe24:	2100      	movs	r1, #0
 800fe26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	4798      	blx	r3
 800fe2e:	2000      	movs	r0, #0
 800fe30:	e7e0      	b.n	800fdf4 <_raise_r+0x12>
	...

0800fe34 <raise>:
 800fe34:	4b02      	ldr	r3, [pc, #8]	@ (800fe40 <raise+0xc>)
 800fe36:	4601      	mov	r1, r0
 800fe38:	6818      	ldr	r0, [r3, #0]
 800fe3a:	f7ff bfd2 	b.w	800fde2 <_raise_r>
 800fe3e:	bf00      	nop
 800fe40:	20000030 	.word	0x20000030

0800fe44 <_fstat_r>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	4d07      	ldr	r5, [pc, #28]	@ (800fe64 <_fstat_r+0x20>)
 800fe48:	2300      	movs	r3, #0
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	4608      	mov	r0, r1
 800fe4e:	4611      	mov	r1, r2
 800fe50:	602b      	str	r3, [r5, #0]
 800fe52:	f7f3 fb31 	bl	80034b8 <_fstat>
 800fe56:	1c43      	adds	r3, r0, #1
 800fe58:	d102      	bne.n	800fe60 <_fstat_r+0x1c>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	b103      	cbz	r3, 800fe60 <_fstat_r+0x1c>
 800fe5e:	6023      	str	r3, [r4, #0]
 800fe60:	bd38      	pop	{r3, r4, r5, pc}
 800fe62:	bf00      	nop
 800fe64:	20003dc8 	.word	0x20003dc8

0800fe68 <_isatty_r>:
 800fe68:	b538      	push	{r3, r4, r5, lr}
 800fe6a:	4d06      	ldr	r5, [pc, #24]	@ (800fe84 <_isatty_r+0x1c>)
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4608      	mov	r0, r1
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	f7f3 fb30 	bl	80034d8 <_isatty>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_isatty_r+0x1a>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_isatty_r+0x1a>
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	20003dc8 	.word	0x20003dc8

0800fe88 <_kill_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4d07      	ldr	r5, [pc, #28]	@ (800fea8 <_kill_r+0x20>)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	4611      	mov	r1, r2
 800fe94:	602b      	str	r3, [r5, #0]
 800fe96:	f7f3 facb 	bl	8003430 <_kill>
 800fe9a:	1c43      	adds	r3, r0, #1
 800fe9c:	d102      	bne.n	800fea4 <_kill_r+0x1c>
 800fe9e:	682b      	ldr	r3, [r5, #0]
 800fea0:	b103      	cbz	r3, 800fea4 <_kill_r+0x1c>
 800fea2:	6023      	str	r3, [r4, #0]
 800fea4:	bd38      	pop	{r3, r4, r5, pc}
 800fea6:	bf00      	nop
 800fea8:	20003dc8 	.word	0x20003dc8

0800feac <_getpid_r>:
 800feac:	f7f3 bab8 	b.w	8003420 <_getpid>

0800feb0 <_calloc_r>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	fba1 5402 	umull	r5, r4, r1, r2
 800feb6:	b934      	cbnz	r4, 800fec6 <_calloc_r+0x16>
 800feb8:	4629      	mov	r1, r5
 800feba:	f7fc fd2b 	bl	800c914 <_malloc_r>
 800febe:	4606      	mov	r6, r0
 800fec0:	b928      	cbnz	r0, 800fece <_calloc_r+0x1e>
 800fec2:	4630      	mov	r0, r6
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	220c      	movs	r2, #12
 800fec8:	6002      	str	r2, [r0, #0]
 800feca:	2600      	movs	r6, #0
 800fecc:	e7f9      	b.n	800fec2 <_calloc_r+0x12>
 800fece:	462a      	mov	r2, r5
 800fed0:	4621      	mov	r1, r4
 800fed2:	f7fd ff37 	bl	800dd44 <memset>
 800fed6:	e7f4      	b.n	800fec2 <_calloc_r+0x12>

0800fed8 <__ascii_mbtowc>:
 800fed8:	b082      	sub	sp, #8
 800feda:	b901      	cbnz	r1, 800fede <__ascii_mbtowc+0x6>
 800fedc:	a901      	add	r1, sp, #4
 800fede:	b142      	cbz	r2, 800fef2 <__ascii_mbtowc+0x1a>
 800fee0:	b14b      	cbz	r3, 800fef6 <__ascii_mbtowc+0x1e>
 800fee2:	7813      	ldrb	r3, [r2, #0]
 800fee4:	600b      	str	r3, [r1, #0]
 800fee6:	7812      	ldrb	r2, [r2, #0]
 800fee8:	1e10      	subs	r0, r2, #0
 800feea:	bf18      	it	ne
 800feec:	2001      	movne	r0, #1
 800feee:	b002      	add	sp, #8
 800fef0:	4770      	bx	lr
 800fef2:	4610      	mov	r0, r2
 800fef4:	e7fb      	b.n	800feee <__ascii_mbtowc+0x16>
 800fef6:	f06f 0001 	mvn.w	r0, #1
 800fefa:	e7f8      	b.n	800feee <__ascii_mbtowc+0x16>

0800fefc <_malloc_usable_size_r>:
 800fefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff00:	1f18      	subs	r0, r3, #4
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfbc      	itt	lt
 800ff06:	580b      	ldrlt	r3, [r1, r0]
 800ff08:	18c0      	addlt	r0, r0, r3
 800ff0a:	4770      	bx	lr

0800ff0c <_strtoul_l.isra.0>:
 800ff0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff10:	4e34      	ldr	r6, [pc, #208]	@ (800ffe4 <_strtoul_l.isra.0+0xd8>)
 800ff12:	4686      	mov	lr, r0
 800ff14:	460d      	mov	r5, r1
 800ff16:	4628      	mov	r0, r5
 800ff18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff1c:	5d37      	ldrb	r7, [r6, r4]
 800ff1e:	f017 0708 	ands.w	r7, r7, #8
 800ff22:	d1f8      	bne.n	800ff16 <_strtoul_l.isra.0+0xa>
 800ff24:	2c2d      	cmp	r4, #45	@ 0x2d
 800ff26:	d110      	bne.n	800ff4a <_strtoul_l.isra.0+0x3e>
 800ff28:	782c      	ldrb	r4, [r5, #0]
 800ff2a:	2701      	movs	r7, #1
 800ff2c:	1c85      	adds	r5, r0, #2
 800ff2e:	f033 0010 	bics.w	r0, r3, #16
 800ff32:	d115      	bne.n	800ff60 <_strtoul_l.isra.0+0x54>
 800ff34:	2c30      	cmp	r4, #48	@ 0x30
 800ff36:	d10d      	bne.n	800ff54 <_strtoul_l.isra.0+0x48>
 800ff38:	7828      	ldrb	r0, [r5, #0]
 800ff3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ff3e:	2858      	cmp	r0, #88	@ 0x58
 800ff40:	d108      	bne.n	800ff54 <_strtoul_l.isra.0+0x48>
 800ff42:	786c      	ldrb	r4, [r5, #1]
 800ff44:	3502      	adds	r5, #2
 800ff46:	2310      	movs	r3, #16
 800ff48:	e00a      	b.n	800ff60 <_strtoul_l.isra.0+0x54>
 800ff4a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ff4c:	bf04      	itt	eq
 800ff4e:	782c      	ldrbeq	r4, [r5, #0]
 800ff50:	1c85      	addeq	r5, r0, #2
 800ff52:	e7ec      	b.n	800ff2e <_strtoul_l.isra.0+0x22>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1f6      	bne.n	800ff46 <_strtoul_l.isra.0+0x3a>
 800ff58:	2c30      	cmp	r4, #48	@ 0x30
 800ff5a:	bf14      	ite	ne
 800ff5c:	230a      	movne	r3, #10
 800ff5e:	2308      	moveq	r3, #8
 800ff60:	f04f 38ff 	mov.w	r8, #4294967295
 800ff64:	2600      	movs	r6, #0
 800ff66:	fbb8 f8f3 	udiv	r8, r8, r3
 800ff6a:	fb03 f908 	mul.w	r9, r3, r8
 800ff6e:	ea6f 0909 	mvn.w	r9, r9
 800ff72:	4630      	mov	r0, r6
 800ff74:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ff78:	f1bc 0f09 	cmp.w	ip, #9
 800ff7c:	d810      	bhi.n	800ffa0 <_strtoul_l.isra.0+0x94>
 800ff7e:	4664      	mov	r4, ip
 800ff80:	42a3      	cmp	r3, r4
 800ff82:	dd1e      	ble.n	800ffc2 <_strtoul_l.isra.0+0xb6>
 800ff84:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ff88:	d007      	beq.n	800ff9a <_strtoul_l.isra.0+0x8e>
 800ff8a:	4580      	cmp	r8, r0
 800ff8c:	d316      	bcc.n	800ffbc <_strtoul_l.isra.0+0xb0>
 800ff8e:	d101      	bne.n	800ff94 <_strtoul_l.isra.0+0x88>
 800ff90:	45a1      	cmp	r9, r4
 800ff92:	db13      	blt.n	800ffbc <_strtoul_l.isra.0+0xb0>
 800ff94:	fb00 4003 	mla	r0, r0, r3, r4
 800ff98:	2601      	movs	r6, #1
 800ff9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff9e:	e7e9      	b.n	800ff74 <_strtoul_l.isra.0+0x68>
 800ffa0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ffa4:	f1bc 0f19 	cmp.w	ip, #25
 800ffa8:	d801      	bhi.n	800ffae <_strtoul_l.isra.0+0xa2>
 800ffaa:	3c37      	subs	r4, #55	@ 0x37
 800ffac:	e7e8      	b.n	800ff80 <_strtoul_l.isra.0+0x74>
 800ffae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ffb2:	f1bc 0f19 	cmp.w	ip, #25
 800ffb6:	d804      	bhi.n	800ffc2 <_strtoul_l.isra.0+0xb6>
 800ffb8:	3c57      	subs	r4, #87	@ 0x57
 800ffba:	e7e1      	b.n	800ff80 <_strtoul_l.isra.0+0x74>
 800ffbc:	f04f 36ff 	mov.w	r6, #4294967295
 800ffc0:	e7eb      	b.n	800ff9a <_strtoul_l.isra.0+0x8e>
 800ffc2:	1c73      	adds	r3, r6, #1
 800ffc4:	d106      	bne.n	800ffd4 <_strtoul_l.isra.0+0xc8>
 800ffc6:	2322      	movs	r3, #34	@ 0x22
 800ffc8:	f8ce 3000 	str.w	r3, [lr]
 800ffcc:	4630      	mov	r0, r6
 800ffce:	b932      	cbnz	r2, 800ffde <_strtoul_l.isra.0+0xd2>
 800ffd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffd4:	b107      	cbz	r7, 800ffd8 <_strtoul_l.isra.0+0xcc>
 800ffd6:	4240      	negs	r0, r0
 800ffd8:	2a00      	cmp	r2, #0
 800ffda:	d0f9      	beq.n	800ffd0 <_strtoul_l.isra.0+0xc4>
 800ffdc:	b106      	cbz	r6, 800ffe0 <_strtoul_l.isra.0+0xd4>
 800ffde:	1e69      	subs	r1, r5, #1
 800ffe0:	6011      	str	r1, [r2, #0]
 800ffe2:	e7f5      	b.n	800ffd0 <_strtoul_l.isra.0+0xc4>
 800ffe4:	08010c5f 	.word	0x08010c5f

0800ffe8 <_strtoul_r>:
 800ffe8:	f7ff bf90 	b.w	800ff0c <_strtoul_l.isra.0>

0800ffec <__ascii_wctomb>:
 800ffec:	4603      	mov	r3, r0
 800ffee:	4608      	mov	r0, r1
 800fff0:	b141      	cbz	r1, 8010004 <__ascii_wctomb+0x18>
 800fff2:	2aff      	cmp	r2, #255	@ 0xff
 800fff4:	d904      	bls.n	8010000 <__ascii_wctomb+0x14>
 800fff6:	228a      	movs	r2, #138	@ 0x8a
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	f04f 30ff 	mov.w	r0, #4294967295
 800fffe:	4770      	bx	lr
 8010000:	700a      	strb	r2, [r1, #0]
 8010002:	2001      	movs	r0, #1
 8010004:	4770      	bx	lr
	...

08010008 <_init>:
 8010008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801000a:	bf00      	nop
 801000c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801000e:	bc08      	pop	{r3}
 8010010:	469e      	mov	lr, r3
 8010012:	4770      	bx	lr

08010014 <_fini>:
 8010014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010016:	bf00      	nop
 8010018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801001a:	bc08      	pop	{r3}
 801001c:	469e      	mov	lr, r3
 801001e:	4770      	bx	lr
